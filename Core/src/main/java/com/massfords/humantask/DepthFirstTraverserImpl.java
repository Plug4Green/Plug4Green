//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package com.massfords.humantask;

import javax.xml.bind.JAXBElement;
import f4g.schemas.java.ENTITIES;
import f4g.schemas.java.ENTITY;
import f4g.schemas.java.IDREFS;
import f4g.schemas.java.Language;
import f4g.schemas.java.NCName;
import f4g.schemas.java.NMTOKEN;
import f4g.schemas.java.NMTOKENS;
import f4g.schemas.java.Name;
import f4g.schemas.java.NegativeInteger;
import f4g.schemas.java.NonNegativeInteger;
import f4g.schemas.java.NonPositiveInteger;
import f4g.schemas.java.PositiveInteger;
import f4g.schemas.java.UnsignedLong;
import f4g.schemas.java.actions.AbstractBaseAction;
import f4g.schemas.java.actions.ActionRequest;
import f4g.schemas.java.actions.LiveMigrateVMAction;
import f4g.schemas.java.actions.MoveVMAction;
import f4g.schemas.java.actions.PowerOffAction;
import f4g.schemas.java.actions.PowerOnAction;
import f4g.schemas.java.actions.StandByAction;
import f4g.schemas.java.actions.StartJobAction;
import f4g.schemas.java.allocation.AllocationRequest;
import f4g.schemas.java.allocation.AllocationResponse;
import f4g.schemas.java.allocation.CloudVmAllocation;
import f4g.schemas.java.allocation.CloudVmAllocationResponse;
import f4g.schemas.java.constraints.optimizerconstraints.Ban;
import f4g.schemas.java.constraints.optimizerconstraints.BoundedClustersType;
import f4g.schemas.java.constraints.optimizerconstraints.BoundedPlacementConstraint;
import f4g.schemas.java.constraints.optimizerconstraints.BoundedPoliciesType;
import f4g.schemas.java.constraints.optimizerconstraints.BoundedSLAsType;
import f4g.schemas.java.constraints.optimizerconstraints.Capacity;
import f4g.schemas.java.constraints.optimizerconstraints.CapacityType;
import f4g.schemas.java.constraints.optimizerconstraints.ClusterType;
import f4g.schemas.java.constraints.optimizerconstraints.Constraint;
import f4g.schemas.java.constraints.optimizerconstraints.EnergyConstraintsType;
import f4g.schemas.java.constraints.optimizerconstraints.ExpectedLoad;
import f4g.schemas.java.constraints.optimizerconstraints.FIT4GreenOptimizerConstraint;
import f4g.schemas.java.constraints.optimizerconstraints.FederationType;
import f4g.schemas.java.constraints.optimizerconstraints.Fence;
import f4g.schemas.java.constraints.optimizerconstraints.Gather;
import f4g.schemas.java.constraints.optimizerconstraints.HardwareConstraintsType;
import f4g.schemas.java.constraints.optimizerconstraints.Load;
import f4g.schemas.java.constraints.optimizerconstraints.Lonely;
import f4g.schemas.java.constraints.optimizerconstraints.NodeController;
import f4g.schemas.java.constraints.optimizerconstraints.Period;
import f4g.schemas.java.constraints.optimizerconstraints.PolicyType;
import f4g.schemas.java.constraints.optimizerconstraints.QoSConstraintsType;
import f4g.schemas.java.constraints.optimizerconstraints.Root;
import f4g.schemas.java.constraints.optimizerconstraints.SLAType;
import f4g.schemas.java.constraints.optimizerconstraints.SecurityConstraintsType;
import f4g.schemas.java.constraints.optimizerconstraints.ServerGroupType;
import f4g.schemas.java.constraints.optimizerconstraints.SpareCPUs;
import f4g.schemas.java.constraints.optimizerconstraints.SpareNodes;
import f4g.schemas.java.constraints.optimizerconstraints.Split;
import f4g.schemas.java.constraints.optimizerconstraints.Spread;
import f4g.schemas.java.constraints.optimizerconstraints.VMFlavorType;
import f4g.schemas.java.constraints.optimizerconstraints.VMGroup;
import f4g.schemas.java.metamodel.ATM;
import f4g.schemas.java.metamodel.ApplicationBenchmark;
import f4g.schemas.java.metamodel.BitErrorRate;
import f4g.schemas.java.metamodel.BladeServer;
import f4g.schemas.java.metamodel.BlockSize;
import f4g.schemas.java.metamodel.BoxNetwork;
import f4g.schemas.java.metamodel.BoxRouter;
import f4g.schemas.java.metamodel.BoxSwitch;
import f4g.schemas.java.metamodel.CPU;
import f4g.schemas.java.metamodel.CUE;
import f4g.schemas.java.metamodel.Cache;
import f4g.schemas.java.metamodel.CacheLevel;
import f4g.schemas.java.metamodel.ClusterManagement;
import f4g.schemas.java.metamodel.Controller;
import f4g.schemas.java.metamodel.CoolingSystem;
import f4g.schemas.java.metamodel.Core;
import f4g.schemas.java.metamodel.CoreLoad;
import f4g.schemas.java.metamodel.CpuUsage;
import f4g.schemas.java.metamodel.Datacenter;
import f4g.schemas.java.metamodel.Dimension;
import f4g.schemas.java.metamodel.E80211X;
import f4g.schemas.java.metamodel.Efficiency;
import f4g.schemas.java.metamodel.Enclosure;
import f4g.schemas.java.metamodel.Ethernet;
import f4g.schemas.java.metamodel.FIT4Green;
import f4g.schemas.java.metamodel.Fan;
import f4g.schemas.java.metamodel.FileSystem;
import f4g.schemas.java.metamodel.FileSystemFragmentation;
import f4g.schemas.java.metamodel.FileSystemSpace;
import f4g.schemas.java.metamodel.Flow;
import f4g.schemas.java.metamodel.FrameworkCapabilities;
import f4g.schemas.java.metamodel.Frequency;
import f4g.schemas.java.metamodel.GPU;
import f4g.schemas.java.metamodel.HardDisk;
import f4g.schemas.java.metamodel.HardwareRAID;
import f4g.schemas.java.metamodel.HitRatio;
import f4g.schemas.java.metamodel.HostedHypervisor;
import f4g.schemas.java.metamodel.HostedOperatingSystem;
import f4g.schemas.java.metamodel.IntAppRank;
import f4g.schemas.java.metamodel.IntPercent;
import f4g.schemas.java.metamodel.IoRate;
import f4g.schemas.java.metamodel.Job;
import f4g.schemas.java.metamodel.JobActions;
import f4g.schemas.java.metamodel.JobLimit;
import f4g.schemas.java.metamodel.JobPriority;
import f4g.schemas.java.metamodel.JobTime;
import f4g.schemas.java.metamodel.LUN;
import f4g.schemas.java.metamodel.Link;
import f4g.schemas.java.metamodel.Lithography;
import f4g.schemas.java.metamodel.Location;
import f4g.schemas.java.metamodel.LogicalUnit;
import f4g.schemas.java.metamodel.LogicalVolume;
import f4g.schemas.java.metamodel.Mainboard;
import f4g.schemas.java.metamodel.MemoryUsage;
import f4g.schemas.java.metamodel.NAS;
import f4g.schemas.java.metamodel.NIC;
import f4g.schemas.java.metamodel.NativeHypervisor;
import f4g.schemas.java.metamodel.NativeOperatingSystem;
import f4g.schemas.java.metamodel.NetworkLoad;
import f4g.schemas.java.metamodel.NetworkNode;
import f4g.schemas.java.metamodel.NetworkPort;
import f4g.schemas.java.metamodel.NetworkPortBufferOccupancy;
import f4g.schemas.java.metamodel.NetworkPortBufferSize;
import f4g.schemas.java.metamodel.NetworkTraffic;
import f4g.schemas.java.metamodel.NetworkUsage;
import f4g.schemas.java.metamodel.Node;
import f4g.schemas.java.metamodel.NodeActions;
import f4g.schemas.java.metamodel.NrOfCores;
import f4g.schemas.java.metamodel.NrOfCpus;
import f4g.schemas.java.metamodel.NrOfLinks;
import f4g.schemas.java.metamodel.NrOfNodes;
import f4g.schemas.java.metamodel.NrOfPlugs;
import f4g.schemas.java.metamodel.NrOfPorts;
import f4g.schemas.java.metamodel.NrOfPstates;
import f4g.schemas.java.metamodel.NrOfTransistors;
import f4g.schemas.java.metamodel.OP;
import f4g.schemas.java.metamodel.OperatingSystem;
import f4g.schemas.java.metamodel.OpticalFDDI;
import f4g.schemas.java.metamodel.PDU;
import f4g.schemas.java.metamodel.PSU;
import f4g.schemas.java.metamodel.PSULoad;
import f4g.schemas.java.metamodel.PUE;
import f4g.schemas.java.metamodel.Power;
import f4g.schemas.java.metamodel.PropagationDelay;
import f4g.schemas.java.metamodel.Queue;
import f4g.schemas.java.metamodel.QueuePriority;
import f4g.schemas.java.metamodel.RAID;
import f4g.schemas.java.metamodel.RAIDDisk;
import f4g.schemas.java.metamodel.RAMSize;
import f4g.schemas.java.metamodel.RAMStick;
import f4g.schemas.java.metamodel.RPM;
import f4g.schemas.java.metamodel.Rack;
import f4g.schemas.java.metamodel.RackableNetwork;
import f4g.schemas.java.metamodel.RackableRouter;
import f4g.schemas.java.metamodel.RackableServer;
import f4g.schemas.java.metamodel.RackableSwitch;
import f4g.schemas.java.metamodel.Role;
import f4g.schemas.java.metamodel.SAN;
import f4g.schemas.java.metamodel.SerialPPP;
import f4g.schemas.java.metamodel.Server;
import f4g.schemas.java.metamodel.Site;
import f4g.schemas.java.metamodel.SoftwareApplication;
import f4g.schemas.java.metamodel.SoftwareNetwork;
import f4g.schemas.java.metamodel.SoftwareRAID;
import f4g.schemas.java.metamodel.SolidStateDisk;
import f4g.schemas.java.metamodel.StorageCapacity;
import f4g.schemas.java.metamodel.StorageUnit;
import f4g.schemas.java.metamodel.StorageUsage;
import f4g.schemas.java.metamodel.StripSize;
import f4g.schemas.java.metamodel.SwitchFabric;
import f4g.schemas.java.metamodel.TowerServer;
import f4g.schemas.java.metamodel.Tunnel;
import f4g.schemas.java.metamodel.VMActions;
import f4g.schemas.java.metamodel.VPN;
import f4g.schemas.java.metamodel.VirtualMachine;
import f4g.schemas.java.metamodel.Voltage;
import f4g.schemas.java.metamodel.WaterCooler;

public class DepthFirstTraverserImpl
    implements Traverser
{


    public void traverse(ENTITIES aBean, Visitor aVisitor) {
        for (ENTITY bean: aBean.getValue()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(ENTITY aBean, Visitor aVisitor) {
        if (aBean.getValue()!= null) {
            aBean.getValue().accept(aVisitor);
        }
    }

    public void traverse(IDREFS aBean, Visitor aVisitor) {
        for (Object bean: aBean.getValue()) {
            if (bean instanceof Visitable) {
                ((Visitable) bean).accept(aVisitor);
            }
        }
    }

    public void traverse(Language aBean, Visitor aVisitor) {
    }

    public void traverse(NCName aBean, Visitor aVisitor) {
        if (aBean.getValue()!= null) {
            aBean.getValue().accept(aVisitor);
        }
    }

    public void traverse(NMTOKEN aBean, Visitor aVisitor) {
    }

    public void traverse(NMTOKENS aBean, Visitor aVisitor) {
        for (NMTOKEN bean: aBean.getValue()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(Name aBean, Visitor aVisitor) {
    }

    public void traverse(NegativeInteger aBean, Visitor aVisitor) {
        if (aBean.getValue()!= null) {
            aBean.getValue().accept(aVisitor);
        }
    }

    public void traverse(NonNegativeInteger aBean, Visitor aVisitor) {
    }

    public void traverse(NonPositiveInteger aBean, Visitor aVisitor) {
    }

    public void traverse(PositiveInteger aBean, Visitor aVisitor) {
        if (aBean.getValue()!= null) {
            aBean.getValue().accept(aVisitor);
        }
    }

    public void traverse(UnsignedLong aBean, Visitor aVisitor) {
        if (aBean.getValue()!= null) {
            aBean.getValue().accept(aVisitor);
        }
    }

    public void traverse(ActionRequest aBean, Visitor aVisitor) {
        if (aBean.getComputedPowerBefore()!= null) {
            aBean.getComputedPowerBefore().accept(aVisitor);
        }
        if (aBean.getComputedPowerAfter()!= null) {
            aBean.getComputedPowerAfter().accept(aVisitor);
        }
        if (aBean.getActionList()!= null) {
            aBean.getActionList().accept(aVisitor);
        }
    }

    public void traverse(ActionRequest.ActionList aBean, Visitor aVisitor) {
        for (JAXBElement<? extends AbstractBaseAction> obj: aBean.getAction()) {
            if (obj.getValue()!= null) {
                obj.getValue().accept(aVisitor);
            }
        }
    }

    public void traverse(LiveMigrateVMAction aBean, Visitor aVisitor) {
    }

    public void traverse(MoveVMAction aBean, Visitor aVisitor) {
    }

    public void traverse(PowerOffAction aBean, Visitor aVisitor) {
    }

    public void traverse(PowerOnAction aBean, Visitor aVisitor) {
    }

    public void traverse(StandByAction aBean, Visitor aVisitor) {
    }

    public void traverse(StartJobAction aBean, Visitor aVisitor) {
    }

    public void traverse(AllocationRequest aBean, Visitor aVisitor) {
        if (aBean.getRequest()!= null) {
            aBean.getRequest().getValue().accept(aVisitor);
        }
    }

    public void traverse(AllocationResponse aBean, Visitor aVisitor) {
        if (aBean.getResponse()!= null) {
            aBean.getResponse().getValue().accept(aVisitor);
        }
    }

    public void traverse(CloudVmAllocation aBean, Visitor aVisitor) {
    }

    public void traverse(CloudVmAllocationResponse aBean, Visitor aVisitor) {
    }

    public void traverse(Ban aBean, Visitor aVisitor) {
    }

    public void traverse(BoundedClustersType aBean, Visitor aVisitor) {
        for (BoundedClustersType.Cluster bean: aBean.getCluster()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(BoundedClustersType.Cluster aBean, Visitor aVisitor) {
    }

    public void traverse(BoundedPlacementConstraint aBean, Visitor aVisitor) {
        for (BoundedPlacementConstraint.PlacementConstraint bean: aBean.getPlacementConstraint()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(BoundedPlacementConstraint.PlacementConstraint aBean, Visitor aVisitor) {
    }

    public void traverse(BoundedPoliciesType aBean, Visitor aVisitor) {
        for (BoundedPoliciesType.Policy bean: aBean.getPolicy()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(BoundedPoliciesType.Policy aBean, Visitor aVisitor) {
    }

    public void traverse(BoundedSLAsType aBean, Visitor aVisitor) {
        for (BoundedSLAsType.SLA bean: aBean.getSLA()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(BoundedSLAsType.SLA aBean, Visitor aVisitor) {
    }

    public void traverse(Capacity aBean, Visitor aVisitor) {
    }

    public void traverse(CapacityType aBean, Visitor aVisitor) {
        if (aBean.getVCpus()!= null) {
            aBean.getVCpus().accept(aVisitor);
        }
        if (aBean.getVRam()!= null) {
            aBean.getVRam().accept(aVisitor);
        }
        if (aBean.getVHardDisk()!= null) {
            aBean.getVHardDisk().accept(aVisitor);
        }
    }

    public void traverse(ClusterType aBean, Visitor aVisitor) {
        for (ClusterType.Cluster bean: aBean.getCluster()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(ClusterType.Cluster aBean, Visitor aVisitor) {
        if (aBean.getNodeController()!= null) {
            aBean.getNodeController().accept(aVisitor);
        }
        if (aBean.getBoundedSLAs()!= null) {
            aBean.getBoundedSLAs().accept(aVisitor);
        }
        if (aBean.getBoundedPolicies()!= null) {
            aBean.getBoundedPolicies().accept(aVisitor);
        }
    }

    public void traverse(Constraint aBean, Visitor aVisitor) {
        for (Constraint.PlacementConstraint bean: aBean.getPlacementConstraint()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(Constraint.PlacementConstraint aBean, Visitor aVisitor) {
        for (Ban bean: aBean.getBan()) {
            bean.accept(aVisitor);
        }
        for (Capacity bean: aBean.getCapacity()) {
            bean.accept(aVisitor);
        }
        for (Fence bean: aBean.getFence()) {
            bean.accept(aVisitor);
        }
        for (Gather bean: aBean.getGather()) {
            bean.accept(aVisitor);
        }
        for (Lonely bean: aBean.getLonely()) {
            bean.accept(aVisitor);
        }
        for (Root bean: aBean.getRoot()) {
            bean.accept(aVisitor);
        }
        for (Split bean: aBean.getSplit()) {
            bean.accept(aVisitor);
        }
        for (Spread bean: aBean.getSpread()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(EnergyConstraintsType aBean, Visitor aVisitor) {
        if (aBean.getMaxPowerServer()!= null) {
            aBean.getMaxPowerServer().accept(aVisitor);
        }
    }

    public void traverse(EnergyConstraintsType.MaxPowerServer aBean, Visitor aVisitor) {
    }

    public void traverse(ExpectedLoad aBean, Visitor aVisitor) {
        if (aBean.getVCpuLoad()!= null) {
            aBean.getVCpuLoad().accept(aVisitor);
        }
        if (aBean.getVRamUsage()!= null) {
            aBean.getVRamUsage().accept(aVisitor);
        }
        if (aBean.getVDiskLoad()!= null) {
            aBean.getVDiskLoad().accept(aVisitor);
        }
        if (aBean.getVNetworkLoad()!= null) {
            aBean.getVNetworkLoad().accept(aVisitor);
        }
    }

    public void traverse(FIT4GreenOptimizerConstraint aBean, Visitor aVisitor) {
        if (aBean.getVirtualMachines()!= null) {
            aBean.getVirtualMachines().accept(aVisitor);
        }
        if (aBean.getFIT4GreenFederation()!= null) {
            aBean.getFIT4GreenFederation().accept(aVisitor);
        }
        if (aBean.getFIT4GreenCluster()!= null) {
            aBean.getFIT4GreenCluster().accept(aVisitor);
        }
        if (aBean.getFIT4GreenServerGroup()!= null) {
            aBean.getFIT4GreenServerGroup().accept(aVisitor);
        }
        if (aBean.getListOfSLA()!= null) {
            aBean.getListOfSLA().accept(aVisitor);
        }
        if (aBean.getListOfPolicies()!= null) {
            aBean.getListOfPolicies().accept(aVisitor);
        }
        if (aBean.getListOfPlacementConstraints()!= null) {
            aBean.getListOfPlacementConstraints().accept(aVisitor);
        }
    }

    public void traverse(FederationType aBean, Visitor aVisitor) {
        if (aBean.getBoundedCluster()!= null) {
            aBean.getBoundedCluster().accept(aVisitor);
        }
        if (aBean.getBoundedPolicies()!= null) {
            aBean.getBoundedPolicies().accept(aVisitor);
        }
    }

    public void traverse(Fence aBean, Visitor aVisitor) {
    }

    public void traverse(Gather aBean, Visitor aVisitor) {
    }

    public void traverse(HardwareConstraintsType aBean, Visitor aVisitor) {
        if (aBean.getHDDCapacity()!= null) {
            aBean.getHDDCapacity().accept(aVisitor);
        }
        if (aBean.getNbOfCores()!= null) {
            aBean.getNbOfCores().accept(aVisitor);
        }
        if (aBean.getCompPowerGHz()!= null) {
            aBean.getCompPowerGHz().accept(aVisitor);
        }
        if (aBean.getMemorySpaceGB()!= null) {
            aBean.getMemorySpaceGB().accept(aVisitor);
        }
        if (aBean.getNbOfGPUCores()!= null) {
            aBean.getNbOfGPUCores().accept(aVisitor);
        }
        if (aBean.getGPUFreqGHz()!= null) {
            aBean.getGPUFreqGHz().accept(aVisitor);
        }
        if (aBean.getRAIDLevel()!= null) {
            aBean.getRAIDLevel().accept(aVisitor);
        }
    }

    public void traverse(HardwareConstraintsType.CompPowerGHz aBean, Visitor aVisitor) {
    }

    public void traverse(HardwareConstraintsType.GPUFreqGHz aBean, Visitor aVisitor) {
    }

    public void traverse(HardwareConstraintsType.HDDCapacity aBean, Visitor aVisitor) {
    }

    public void traverse(HardwareConstraintsType.MemorySpaceGB aBean, Visitor aVisitor) {
    }

    public void traverse(HardwareConstraintsType.NbOfCores aBean, Visitor aVisitor) {
    }

    public void traverse(HardwareConstraintsType.NbOfGPUCores aBean, Visitor aVisitor) {
    }

    public void traverse(HardwareConstraintsType.RAIDLevel aBean, Visitor aVisitor) {
    }

    public void traverse(Load aBean, Visitor aVisitor) {
        if (aBean.getSpareCPUs()!= null) {
            aBean.getSpareCPUs().accept(aVisitor);
        }
        if (aBean.getSpareNodes()!= null) {
            aBean.getSpareNodes().accept(aVisitor);
        }
    }

    public void traverse(Lonely aBean, Visitor aVisitor) {
    }

    public void traverse(NodeController aBean, Visitor aVisitor) {
    }

    public void traverse(Period aBean, Visitor aVisitor) {
        if (aBean.getLoad()!= null) {
            aBean.getLoad().accept(aVisitor);
        }
    }

    public void traverse(f4g.schemas.java.constraints.optimizerconstraints.PlacementConstraint aBean, Visitor aVisitor) {
    }

    public void traverse(PolicyType aBean, Visitor aVisitor) {
        for (PolicyType.Policy bean: aBean.getPolicy()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(PolicyType.Policy aBean, Visitor aVisitor) {
        for (Period bean: aBean.getPeriodVMThreshold()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(QoSConstraintsType aBean, Visitor aVisitor) {
        if (aBean.getMaxServerCPULoad()!= null) {
            aBean.getMaxServerCPULoad().accept(aVisitor);
        }
        if (aBean.getMaxVirtualLoadPerCore()!= null) {
            aBean.getMaxVirtualLoadPerCore().accept(aVisitor);
        }
        if (aBean.getMaxVirtualCPUPerCore()!= null) {
            aBean.getMaxVirtualCPUPerCore().accept(aVisitor);
        }
        if (aBean.getMaxServerAvgVCPUperCore()!= null) {
            aBean.getMaxServerAvgVCPUperCore().accept(aVisitor);
        }
        if (aBean.getMaxServerAvgVRAMperPhyRAM()!= null) {
            aBean.getMaxServerAvgVRAMperPhyRAM().accept(aVisitor);
        }
        if (aBean.getMaxVRAMperPhyRAM()!= null) {
            aBean.getMaxVRAMperPhyRAM().accept(aVisitor);
        }
        if (aBean.getBandwidth()!= null) {
            aBean.getBandwidth().accept(aVisitor);
        }
        if (aBean.getMaxVMperServer()!= null) {
            aBean.getMaxVMperServer().accept(aVisitor);
        }
    }

    public void traverse(QoSConstraintsType.Bandwidth aBean, Visitor aVisitor) {
    }

    public void traverse(QoSConstraintsType.MaxServerAvgVCPUperCore aBean, Visitor aVisitor) {
    }

    public void traverse(QoSConstraintsType.MaxServerAvgVRAMperPhyRAM aBean, Visitor aVisitor) {
    }

    public void traverse(QoSConstraintsType.MaxServerCPULoad aBean, Visitor aVisitor) {
    }

    public void traverse(QoSConstraintsType.MaxVMperServer aBean, Visitor aVisitor) {
    }

    public void traverse(QoSConstraintsType.MaxVRAMperPhyRAM aBean, Visitor aVisitor) {
    }

    public void traverse(QoSConstraintsType.MaxVirtualCPUPerCore aBean, Visitor aVisitor) {
    }

    public void traverse(QoSConstraintsType.MaxVirtualLoadPerCore aBean, Visitor aVisitor) {
    }

    public void traverse(Root aBean, Visitor aVisitor) {
    }

    public void traverse(SLAType aBean, Visitor aVisitor) {
        for (SLAType.SLA bean: aBean.getSLA()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(SLAType.SLA aBean, Visitor aVisitor) {
        if (aBean.getHardwareConstraints()!= null) {
            aBean.getHardwareConstraints().accept(aVisitor);
        }
        if (aBean.getQoSConstraints()!= null) {
            aBean.getQoSConstraints().accept(aVisitor);
        }
        if (aBean.getSecurityConstraints()!= null) {
            aBean.getSecurityConstraints().accept(aVisitor);
        }
        if (aBean.getEnergyConstraints()!= null) {
            aBean.getEnergyConstraints().accept(aVisitor);
        }
    }

    public void traverse(SecurityConstraintsType aBean, Visitor aVisitor) {
        if (aBean.getDedicatedServer()!= null) {
            aBean.getDedicatedServer().accept(aVisitor);
        }
        if (aBean.getSecureAccessPossibility()!= null) {
            aBean.getSecureAccessPossibility().accept(aVisitor);
        }
    }

    public void traverse(SecurityConstraintsType.DedicatedServer aBean, Visitor aVisitor) {
    }

    public void traverse(SecurityConstraintsType.SecureAccessPossibility aBean, Visitor aVisitor) {
    }

    public void traverse(ServerGroupType aBean, Visitor aVisitor) {
        for (ServerGroupType.ServerGroup bean: aBean.getServerGroup()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(ServerGroupType.ServerGroup aBean, Visitor aVisitor) {
        if (aBean.getNodeController()!= null) {
            aBean.getNodeController().accept(aVisitor);
        }
        if (aBean.getBoundedSLAs()!= null) {
            aBean.getBoundedSLAs().accept(aVisitor);
        }
        if (aBean.getBoundedPlacementConstraints()!= null) {
            aBean.getBoundedPlacementConstraints().accept(aVisitor);
        }
    }

    public void traverse(SpareCPUs aBean, Visitor aVisitor) {
    }

    public void traverse(SpareNodes aBean, Visitor aVisitor) {
    }

    public void traverse(Split aBean, Visitor aVisitor) {
        if (aBean.getVMGroup1()!= null) {
            aBean.getVMGroup1().accept(aVisitor);
        }
        if (aBean.getVMGroup2()!= null) {
            aBean.getVMGroup2().accept(aVisitor);
        }
    }

    public void traverse(Spread aBean, Visitor aVisitor) {
    }

    public void traverse(VMFlavorType aBean, Visitor aVisitor) {
        for (VMFlavorType.VMFlavor bean: aBean.getVMFlavor()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(VMFlavorType.VMFlavor aBean, Visitor aVisitor) {
        if (aBean.getCapacity()!= null) {
            aBean.getCapacity().accept(aVisitor);
        }
        if (aBean.getExpectedLoad()!= null) {
            aBean.getExpectedLoad().accept(aVisitor);
        }
    }

    public void traverse(VMGroup aBean, Visitor aVisitor) {
    }

    public void traverse(ATM aBean, Visitor aVisitor) {
        if (aBean.getLineCapacity()!= null) {
            aBean.getLineCapacity().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getTrafficIn()!= null) {
            aBean.getTrafficIn().accept(aVisitor);
        }
        if (aBean.getTrafficOut()!= null) {
            aBean.getTrafficOut().accept(aVisitor);
        }
        if (aBean.getBufferSize()!= null) {
            aBean.getBufferSize().accept(aVisitor);
        }
        if (aBean.getBufferOccupancy()!= null) {
            aBean.getBufferOccupancy().accept(aVisitor);
        }
        if (aBean.getLink()!= null) {
            aBean.getLink().accept(aVisitor);
        }
    }

    public void traverse(ApplicationBenchmark aBean, Visitor aVisitor) {
        if (aBean.getRank()!= null) {
            aBean.getRank().accept(aVisitor);
        }
    }

    public void traverse(f4g.schemas.java.metamodel.Bandwidth aBean, Visitor aVisitor) {
    }

    public void traverse(BitErrorRate aBean, Visitor aVisitor) {
    }

    public void traverse(BladeServer aBean, Visitor aVisitor) {
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (LogicalVolume bean: aBean.getLogicalVolume()) {
            bean.accept(aVisitor);
        }
        for (Mainboard bean: aBean.getMainboard()) {
            bean.accept(aVisitor);
        }
        if (aBean.getNativeOperatingSystem()!= null) {
            aBean.getNativeOperatingSystem().accept(aVisitor);
        }
        if (aBean.getNativeHypervisor()!= null) {
            aBean.getNativeHypervisor().accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(BlockSize aBean, Visitor aVisitor) {
    }

    public void traverse(BoxNetwork aBean, Visitor aVisitor) {
        if (aBean.getProcessingBandwidth()!= null) {
            aBean.getProcessingBandwidth().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (NetworkPort bean: aBean.getNetworkPort()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(BoxRouter aBean, Visitor aVisitor) {
        if (aBean.getProcessingBandwidth()!= null) {
            aBean.getProcessingBandwidth().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (NetworkPort bean: aBean.getNetworkPort()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(BoxSwitch aBean, Visitor aVisitor) {
        if (aBean.getProcessingBandwidth()!= null) {
            aBean.getProcessingBandwidth().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (NetworkPort bean: aBean.getNetworkPort()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(CPU aBean, Visitor aVisitor) {
        if (aBean.getLithography()!= null) {
            aBean.getLithography().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getCpuUsage()!= null) {
            aBean.getCpuUsage().accept(aVisitor);
        }
        if (aBean.getTransistorNumber()!= null) {
            aBean.getTransistorNumber().accept(aVisitor);
        }
        for (Core bean: aBean.getCore()) {
            bean.accept(aVisitor);
        }
        for (Cache bean: aBean.getCache()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(CUE aBean, Visitor aVisitor) {
    }

    public void traverse(Cache aBean, Visitor aVisitor) {
        if (aBean.getLevel()!= null) {
            aBean.getLevel().accept(aVisitor);
        }
        if (aBean.getSize()!= null) {
            aBean.getSize().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getHitRatio()!= null) {
            aBean.getHitRatio().accept(aVisitor);
        }
    }

    public void traverse(CacheLevel aBean, Visitor aVisitor) {
    }

    public void traverse(ClusterManagement aBean, Visitor aVisitor) {
        if (aBean.getQueue()!= null) {
            aBean.getQueue().accept(aVisitor);
        }
        if (aBean.getNumberOfCPUs()!= null) {
            aBean.getNumberOfCPUs().accept(aVisitor);
        }
        if (aBean.getActualCPUUsage()!= null) {
            aBean.getActualCPUUsage().accept(aVisitor);
        }
        if (aBean.getActualStorageUsage()!= null) {
            aBean.getActualStorageUsage().accept(aVisitor);
        }
        if (aBean.getActualDiskIORate()!= null) {
            aBean.getActualDiskIORate().accept(aVisitor);
        }
        if (aBean.getActualMemoryUsage()!= null) {
            aBean.getActualMemoryUsage().accept(aVisitor);
        }
        if (aBean.getActualNetworkUsage()!= null) {
            aBean.getActualNetworkUsage().accept(aVisitor);
        }
    }

    public void traverse(Controller aBean, Visitor aVisitor) {
        if (aBean.getNativeOperatingSystem()!= null) {
            aBean.getNativeOperatingSystem().accept(aVisitor);
        }
        if (aBean.getNativeHypervisor()!= null) {
            aBean.getNativeHypervisor().accept(aVisitor);
        }
        if (aBean.getLithography()!= null) {
            aBean.getLithography().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getCpuUsage()!= null) {
            aBean.getCpuUsage().accept(aVisitor);
        }
        if (aBean.getTransistorNumber()!= null) {
            aBean.getTransistorNumber().accept(aVisitor);
        }
        for (Core bean: aBean.getCore()) {
            bean.accept(aVisitor);
        }
        for (Cache bean: aBean.getCache()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(CoolingSystem aBean, Visitor aVisitor) {
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
    }

    public void traverse(Core aBean, Visitor aVisitor) {
        if (aBean.getVoltage()!= null) {
            aBean.getVoltage().accept(aVisitor);
        }
        if (aBean.getFrequency()!= null) {
            aBean.getFrequency().accept(aVisitor);
        }
        if (aBean.getFrequencyMin()!= null) {
            aBean.getFrequencyMin().accept(aVisitor);
        }
        if (aBean.getFrequencyMax()!= null) {
            aBean.getFrequencyMax().accept(aVisitor);
        }
        if (aBean.getCoreLoad()!= null) {
            aBean.getCoreLoad().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getTotalPstates()!= null) {
            aBean.getTotalPstates().accept(aVisitor);
        }
        if (aBean.getLastPstate()!= null) {
            aBean.getLastPstate().accept(aVisitor);
        }
        for (Cache bean: aBean.getCache()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(CoreLoad aBean, Visitor aVisitor) {
    }

    public void traverse(CpuUsage aBean, Visitor aVisitor) {
    }

    public void traverse(Datacenter aBean, Visitor aVisitor) {
        for (ApplicationBenchmark bean: aBean.getApplicationBenchmark()) {
            bean.accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        for (Rack bean: aBean.getRack()) {
            bean.accept(aVisitor);
        }
        for (TowerServer bean: aBean.getTowerServer()) {
            bean.accept(aVisitor);
        }
        for (BoxRouter bean: aBean.getBoxRouter()) {
            bean.accept(aVisitor);
        }
        for (BoxSwitch bean: aBean.getBoxSwitch()) {
            bean.accept(aVisitor);
        }
        for (FrameworkCapabilities bean: aBean.getFrameworkCapabilities()) {
            bean.accept(aVisitor);
        }
        if (aBean.getNetworkLoad()!= null) {
            aBean.getNetworkLoad().accept(aVisitor);
        }
    }

    public void traverse(Dimension aBean, Visitor aVisitor) {
    }

    public void traverse(E80211X aBean, Visitor aVisitor) {
        if (aBean.getLineCapacity()!= null) {
            aBean.getLineCapacity().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getTrafficIn()!= null) {
            aBean.getTrafficIn().accept(aVisitor);
        }
        if (aBean.getTrafficOut()!= null) {
            aBean.getTrafficOut().accept(aVisitor);
        }
        if (aBean.getBufferSize()!= null) {
            aBean.getBufferSize().accept(aVisitor);
        }
        if (aBean.getBufferOccupancy()!= null) {
            aBean.getBufferOccupancy().accept(aVisitor);
        }
        if (aBean.getLink()!= null) {
            aBean.getLink().accept(aVisitor);
        }
    }

    public void traverse(Efficiency aBean, Visitor aVisitor) {
    }

    public void traverse(Enclosure aBean, Visitor aVisitor) {
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (BladeServer bean: aBean.getBladeServer()) {
            bean.accept(aVisitor);
        }
        for (NIC bean: aBean.getEthernetNIC()) {
            bean.accept(aVisitor);
        }
        for (NIC bean: aBean.getFiberchannelNIC()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(Ethernet aBean, Visitor aVisitor) {
        if (aBean.getLineCapacity()!= null) {
            aBean.getLineCapacity().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getTrafficIn()!= null) {
            aBean.getTrafficIn().accept(aVisitor);
        }
        if (aBean.getTrafficOut()!= null) {
            aBean.getTrafficOut().accept(aVisitor);
        }
        if (aBean.getBufferSize()!= null) {
            aBean.getBufferSize().accept(aVisitor);
        }
        if (aBean.getBufferOccupancy()!= null) {
            aBean.getBufferOccupancy().accept(aVisitor);
        }
        if (aBean.getLink()!= null) {
            aBean.getLink().accept(aVisitor);
        }
    }

    public void traverse(FIT4Green aBean, Visitor aVisitor) {
        for (Site bean: aBean.getSite()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(Fan aBean, Visitor aVisitor) {
        if (aBean.getMaxRPM()!= null) {
            aBean.getMaxRPM().accept(aVisitor);
        }
        if (aBean.getActualRPM()!= null) {
            aBean.getActualRPM().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getDepth()!= null) {
            aBean.getDepth().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
    }

    public void traverse(FileSystem aBean, Visitor aVisitor) {
        if (aBean.getFragmentation()!= null) {
            aBean.getFragmentation().accept(aVisitor);
        }
        if (aBean.getSize()!= null) {
            aBean.getSize().accept(aVisitor);
        }
        if (aBean.getFree()!= null) {
            aBean.getFree().accept(aVisitor);
        }
        if (aBean.getRAIDRef() instanceof Visitable) {
            ((Visitable) aBean.getRAIDRef()).accept(aVisitor);
        }
    }

    public void traverse(FileSystemFragmentation aBean, Visitor aVisitor) {
    }

    public void traverse(FileSystemSpace aBean, Visitor aVisitor) {
    }

    public void traverse(Flow aBean, Visitor aVisitor) {
        if (aBean.getSourceNetworkNodeRef() instanceof Visitable) {
            ((Visitable) aBean.getSourceNetworkNodeRef()).accept(aVisitor);
        }
        if (aBean.getDestinationNetworkNodeRef() instanceof Visitable) {
            ((Visitable) aBean.getDestinationNetworkNodeRef()).accept(aVisitor);
        }
        if (aBean.getBandwidth()!= null) {
            aBean.getBandwidth().accept(aVisitor);
        }
    }

    public void traverse(FrameworkCapabilities aBean, Visitor aVisitor) {
        if (aBean.getNode()!= null) {
            aBean.getNode().accept(aVisitor);
        }
        if (aBean.getVm()!= null) {
            aBean.getVm().accept(aVisitor);
        }
        if (aBean.getJob()!= null) {
            aBean.getJob().accept(aVisitor);
        }
        if (aBean.getNetworkNode()!= null) {
            aBean.getNetworkNode().accept(aVisitor);
        }
    }

    public void traverse(Frequency aBean, Visitor aVisitor) {
    }

    public void traverse(GPU aBean, Visitor aVisitor) {
        if (aBean.getCoreFrequency()!= null) {
            aBean.getCoreFrequency().accept(aVisitor);
        }
    }

    public void traverse(HardDisk aBean, Visitor aVisitor) {
        if (aBean.getRpm()!= null) {
            aBean.getRpm().accept(aVisitor);
        }
        if (aBean.getStorageCapacity()!= null) {
            aBean.getStorageCapacity().accept(aVisitor);
        }
        if (aBean.getMaxReadRate()!= null) {
            aBean.getMaxReadRate().accept(aVisitor);
        }
        if (aBean.getMaxWriteRate()!= null) {
            aBean.getMaxWriteRate().accept(aVisitor);
        }
        if (aBean.getReadRate()!= null) {
            aBean.getReadRate().accept(aVisitor);
        }
        if (aBean.getWriteRate()!= null) {
            aBean.getWriteRate().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        for (Cache bean: aBean.getCache()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(HardwareRAID aBean, Visitor aVisitor) {
        for (Cache bean: aBean.getCache()) {
            bean.accept(aVisitor);
        }
        if (aBean.getLevel()!= null) {
            aBean.getLevel().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        for (SolidStateDisk bean: aBean.getSolidStateDisk()) {
            bean.accept(aVisitor);
        }
        for (HardDisk bean: aBean.getHardDisk()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(HitRatio aBean, Visitor aVisitor) {
    }

    public void traverse(HostedHypervisor aBean, Visitor aVisitor) {
        for (VirtualMachine bean: aBean.getVirtualMachine()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(HostedOperatingSystem aBean, Visitor aVisitor) {
        for (SoftwareApplication bean: aBean.getSoftwareApplication()) {
            bean.accept(aVisitor);
        }
        if (aBean.getSystemRAMBaseUsage()!= null) {
            aBean.getSystemRAMBaseUsage().accept(aVisitor);
        }
        for (FileSystem bean: aBean.getFileSystem()) {
            bean.accept(aVisitor);
        }
        for (SoftwareRAID bean: aBean.getSoftwareRAID()) {
            bean.accept(aVisitor);
        }
        for (SoftwareNetwork bean: aBean.getSoftwareNetwork()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(IntAppRank aBean, Visitor aVisitor) {
    }

    public void traverse(IntPercent aBean, Visitor aVisitor) {
    }

    public void traverse(IoRate aBean, Visitor aVisitor) {
    }

    public void traverse(Job aBean, Visitor aVisitor) {
        if (aBean.getNumberOfNodes()!= null) {
            aBean.getNumberOfNodes().accept(aVisitor);
        }
        if (aBean.getNeededMemory()!= null) {
            aBean.getNeededMemory().accept(aVisitor);
        }
        if (aBean.getNeededCoresPerNode()!= null) {
            aBean.getNeededCoresPerNode().accept(aVisitor);
        }
        if (aBean.getNeededCPUSpeed()!= null) {
            aBean.getNeededCPUSpeed().accept(aVisitor);
        }
        if (aBean.getWallTime()!= null) {
            aBean.getWallTime().accept(aVisitor);
        }
        if (aBean.getTimeOfSubmission()!= null) {
            aBean.getTimeOfSubmission().accept(aVisitor);
        }
        if (aBean.getTimeOfStart()!= null) {
            aBean.getTimeOfStart().accept(aVisitor);
        }
        if (aBean.getPriority()!= null) {
            aBean.getPriority().accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(JobActions aBean, Visitor aVisitor) {
    }

    public void traverse(JobLimit aBean, Visitor aVisitor) {
    }

    public void traverse(JobPriority aBean, Visitor aVisitor) {
    }

    public void traverse(JobTime aBean, Visitor aVisitor) {
    }

    public void traverse(LUN aBean, Visitor aVisitor) {
        if (aBean.getReadRate()!= null) {
            aBean.getReadRate().accept(aVisitor);
        }
        if (aBean.getWriteRate()!= null) {
            aBean.getWriteRate().accept(aVisitor);
        }
        if (aBean.getLunRef() instanceof Visitable) {
            ((Visitable) aBean.getLunRef()).accept(aVisitor);
        }
    }

    public void traverse(Link aBean, Visitor aVisitor) {
        if (aBean.getPropagationDelay()!= null) {
            aBean.getPropagationDelay().accept(aVisitor);
        }
        if (aBean.getBitErrorRate()!= null) {
            aBean.getBitErrorRate().accept(aVisitor);
        }
    }

    public void traverse(Lithography aBean, Visitor aVisitor) {
    }

    public void traverse(Location aBean, Visitor aVisitor) {
    }

    public void traverse(LogicalUnit aBean, Visitor aVisitor) {
        if (aBean.getReadRate()!= null) {
            aBean.getReadRate().accept(aVisitor);
        }
        if (aBean.getWriteRate()!= null) {
            aBean.getWriteRate().accept(aVisitor);
        }
        if (aBean.getMaxReadRate()!= null) {
            aBean.getMaxReadRate().accept(aVisitor);
        }
        if (aBean.getMaxWriteRate()!= null) {
            aBean.getMaxWriteRate().accept(aVisitor);
        }
        if (aBean.getNumOfReadOP()!= null) {
            aBean.getNumOfReadOP().accept(aVisitor);
        }
        if (aBean.getNumOfWriteOP()!= null) {
            aBean.getNumOfWriteOP().accept(aVisitor);
        }
        if (aBean.getStripSize()!= null) {
            aBean.getStripSize().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getRAID()!= null) {
            aBean.getRAID().accept(aVisitor);
        }
        if (aBean.getRAIDDisk()!= null) {
            aBean.getRAIDDisk().accept(aVisitor);
        }
        for (SolidStateDisk bean: aBean.getSolidStateDisk()) {
            bean.accept(aVisitor);
        }
        for (HardDisk bean: aBean.getHardDisk()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(LogicalVolume aBean, Visitor aVisitor) {
        if (aBean.getLevel()!= null) {
            aBean.getLevel().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getReadRate()!= null) {
            aBean.getReadRate().accept(aVisitor);
        }
        if (aBean.getWriteRate()!= null) {
            aBean.getWriteRate().accept(aVisitor);
        }
        if (aBean.getMaxReadRate()!= null) {
            aBean.getMaxReadRate().accept(aVisitor);
        }
        if (aBean.getMaxWriteRate()!= null) {
            aBean.getMaxWriteRate().accept(aVisitor);
        }
        if (aBean.getNumberOfReadOps()!= null) {
            aBean.getNumberOfReadOps().accept(aVisitor);
        }
        if (aBean.getNumberOfWriteOps()!= null) {
            aBean.getNumberOfWriteOps().accept(aVisitor);
        }
        if (aBean.getBlockSize()!= null) {
            aBean.getBlockSize().accept(aVisitor);
        }
        if (aBean.getFileSystem()!= null) {
            aBean.getFileSystem().accept(aVisitor);
        }
        for (LogicalUnit bean: aBean.getLogicalUnit()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(Mainboard aBean, Visitor aVisitor) {
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMemoryUsage()!= null) {
            aBean.getMemoryUsage().accept(aVisitor);
        }
        for (NIC bean: aBean.getEthernetNIC()) {
            bean.accept(aVisitor);
        }
        for (NIC bean: aBean.getFiberchannelNIC()) {
            bean.accept(aVisitor);
        }
        for (HardwareRAID bean: aBean.getHardwareRAID()) {
            bean.accept(aVisitor);
        }
        for (SolidStateDisk bean: aBean.getSolidStateDisk()) {
            bean.accept(aVisitor);
        }
        for (HardDisk bean: aBean.getHardDisk()) {
            bean.accept(aVisitor);
        }
        for (LUN bean: aBean.getLUN()) {
            bean.accept(aVisitor);
        }
        for (CPU bean: aBean.getCPU()) {
            bean.accept(aVisitor);
        }
        for (RAMStick bean: aBean.getRAMStick()) {
            bean.accept(aVisitor);
        }
        for (GPU bean: aBean.getGPU()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(MemoryUsage aBean, Visitor aVisitor) {
    }

    public void traverse(NAS aBean, Visitor aVisitor) {
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getConstantFactor()!= null) {
            aBean.getConstantFactor().accept(aVisitor);
        }
        for (Cache bean: aBean.getCache()) {
            bean.accept(aVisitor);
        }
        for (Controller bean: aBean.getController()) {
            bean.accept(aVisitor);
        }
        for (RAIDDisk bean: aBean.getRAIDDisk()) {
            bean.accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (NIC bean: aBean.getEthernetNIC()) {
            bean.accept(aVisitor);
        }
        for (NIC bean: aBean.getFiberchannelNIC()) {
            bean.accept(aVisitor);
        }
        for (SolidStateDisk bean: aBean.getSolidStateDisk()) {
            bean.accept(aVisitor);
        }
        for (HardDisk bean: aBean.getHardDisk()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(NIC aBean, Visitor aVisitor) {
        if (aBean.getProcessingBandwidth()!= null) {
            aBean.getProcessingBandwidth().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (NetworkPort bean: aBean.getNetworkPort()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(NativeHypervisor aBean, Visitor aVisitor) {
        for (VirtualMachine bean: aBean.getVirtualMachine()) {
            bean.accept(aVisitor);
        }
        if (aBean.getSystemRAMBaseUsage()!= null) {
            aBean.getSystemRAMBaseUsage().accept(aVisitor);
        }
        for (FileSystem bean: aBean.getFileSystem()) {
            bean.accept(aVisitor);
        }
        for (SoftwareRAID bean: aBean.getSoftwareRAID()) {
            bean.accept(aVisitor);
        }
        for (SoftwareNetwork bean: aBean.getSoftwareNetwork()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(NativeOperatingSystem aBean, Visitor aVisitor) {
        for (SoftwareApplication bean: aBean.getSoftwareApplication()) {
            bean.accept(aVisitor);
        }
        for (ClusterManagement bean: aBean.getClusterManagement()) {
            bean.accept(aVisitor);
        }
        for (Node bean: aBean.getNode()) {
            bean.accept(aVisitor);
        }
        for (HostedHypervisor bean: aBean.getHostedHypervisor()) {
            bean.accept(aVisitor);
        }
        if (aBean.getSystemRAMBaseUsage()!= null) {
            aBean.getSystemRAMBaseUsage().accept(aVisitor);
        }
        for (FileSystem bean: aBean.getFileSystem()) {
            bean.accept(aVisitor);
        }
        for (SoftwareRAID bean: aBean.getSoftwareRAID()) {
            bean.accept(aVisitor);
        }
        for (SoftwareNetwork bean: aBean.getSoftwareNetwork()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(NetworkLoad aBean, Visitor aVisitor) {
        for (Flow bean: aBean.getFlow()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(NetworkNode aBean, Visitor aVisitor) {
        if (aBean.getProcessingBandwidth()!= null) {
            aBean.getProcessingBandwidth().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (NetworkPort bean: aBean.getNetworkPort()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(NetworkPort aBean, Visitor aVisitor) {
        if (aBean.getLineCapacity()!= null) {
            aBean.getLineCapacity().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getTrafficIn()!= null) {
            aBean.getTrafficIn().accept(aVisitor);
        }
        if (aBean.getTrafficOut()!= null) {
            aBean.getTrafficOut().accept(aVisitor);
        }
        if (aBean.getBufferSize()!= null) {
            aBean.getBufferSize().accept(aVisitor);
        }
        if (aBean.getBufferOccupancy()!= null) {
            aBean.getBufferOccupancy().accept(aVisitor);
        }
        if (aBean.getLink()!= null) {
            aBean.getLink().accept(aVisitor);
        }
    }

    public void traverse(NetworkPortBufferOccupancy aBean, Visitor aVisitor) {
    }

    public void traverse(NetworkPortBufferSize aBean, Visitor aVisitor) {
    }

    public void traverse(NetworkTraffic aBean, Visitor aVisitor) {
    }

    public void traverse(NetworkUsage aBean, Visitor aVisitor) {
    }

    public void traverse(Node aBean, Visitor aVisitor) {
        if (aBean.getCoresInUse()!= null) {
            aBean.getCoresInUse().accept(aVisitor);
        }
        if (aBean.getJobRef()!= null) {
            aBean.getJobRef().accept(aVisitor);
        }
        if (aBean.getNumberOfCPUs()!= null) {
            aBean.getNumberOfCPUs().accept(aVisitor);
        }
        if (aBean.getActualCPUUsage()!= null) {
            aBean.getActualCPUUsage().accept(aVisitor);
        }
        if (aBean.getActualStorageUsage()!= null) {
            aBean.getActualStorageUsage().accept(aVisitor);
        }
        if (aBean.getActualDiskIORate()!= null) {
            aBean.getActualDiskIORate().accept(aVisitor);
        }
        if (aBean.getActualMemoryUsage()!= null) {
            aBean.getActualMemoryUsage().accept(aVisitor);
        }
        if (aBean.getActualNetworkUsage()!= null) {
            aBean.getActualNetworkUsage().accept(aVisitor);
        }
    }

    public void traverse(NodeActions aBean, Visitor aVisitor) {
    }

    public void traverse(NrOfCores aBean, Visitor aVisitor) {
    }

    public void traverse(NrOfCpus aBean, Visitor aVisitor) {
    }

    public void traverse(NrOfLinks aBean, Visitor aVisitor) {
    }

    public void traverse(NrOfNodes aBean, Visitor aVisitor) {
    }

    public void traverse(NrOfPlugs aBean, Visitor aVisitor) {
    }

    public void traverse(NrOfPorts aBean, Visitor aVisitor) {
    }

    public void traverse(NrOfPstates aBean, Visitor aVisitor) {
    }

    public void traverse(NrOfTransistors aBean, Visitor aVisitor) {
    }

    public void traverse(OP aBean, Visitor aVisitor) {
    }

    public void traverse(OperatingSystem aBean, Visitor aVisitor) {
        if (aBean.getSystemRAMBaseUsage()!= null) {
            aBean.getSystemRAMBaseUsage().accept(aVisitor);
        }
        for (FileSystem bean: aBean.getFileSystem()) {
            bean.accept(aVisitor);
        }
        for (SoftwareRAID bean: aBean.getSoftwareRAID()) {
            bean.accept(aVisitor);
        }
        for (SoftwareNetwork bean: aBean.getSoftwareNetwork()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(OpticalFDDI aBean, Visitor aVisitor) {
        if (aBean.getLineCapacity()!= null) {
            aBean.getLineCapacity().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getTrafficIn()!= null) {
            aBean.getTrafficIn().accept(aVisitor);
        }
        if (aBean.getTrafficOut()!= null) {
            aBean.getTrafficOut().accept(aVisitor);
        }
        if (aBean.getBufferSize()!= null) {
            aBean.getBufferSize().accept(aVisitor);
        }
        if (aBean.getBufferOccupancy()!= null) {
            aBean.getBufferOccupancy().accept(aVisitor);
        }
        if (aBean.getLink()!= null) {
            aBean.getLink().accept(aVisitor);
        }
    }

    public void traverse(PDU aBean, Visitor aVisitor) {
        if (aBean.getCapacity()!= null) {
            aBean.getCapacity().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
    }

    public void traverse(PSU aBean, Visitor aVisitor) {
        if (aBean.getLoad()!= null) {
            aBean.getLoad().accept(aVisitor);
        }
        if (aBean.getEfficiency()!= null) {
            aBean.getEfficiency().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(PSULoad aBean, Visitor aVisitor) {
    }

    public void traverse(PUE aBean, Visitor aVisitor) {
    }

    public void traverse(Power aBean, Visitor aVisitor) {
    }

    public void traverse(PropagationDelay aBean, Visitor aVisitor) {
    }

    public void traverse(Queue aBean, Visitor aVisitor) {
        if (aBean.getPriority()!= null) {
            aBean.getPriority().accept(aVisitor);
        }
        if (aBean.getWallTimeLimit()!= null) {
            aBean.getWallTimeLimit().accept(aVisitor);
        }
        if (aBean.getNumberOfNodesLimit()!= null) {
            aBean.getNumberOfNodesLimit().accept(aVisitor);
        }
        for (Job bean: aBean.getJobs()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(QueuePriority aBean, Visitor aVisitor) {
    }

    public void traverse(RAID aBean, Visitor aVisitor) {
        if (aBean.getLevel()!= null) {
            aBean.getLevel().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        for (SolidStateDisk bean: aBean.getSolidStateDisk()) {
            bean.accept(aVisitor);
        }
        for (HardDisk bean: aBean.getHardDisk()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(RAIDDisk aBean, Visitor aVisitor) {
        if (aBean.getLevel()!= null) {
            aBean.getLevel().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getReadRate()!= null) {
            aBean.getReadRate().accept(aVisitor);
        }
        if (aBean.getWriteRate()!= null) {
            aBean.getWriteRate().accept(aVisitor);
        }
        if (aBean.getMaxReadRate()!= null) {
            aBean.getMaxReadRate().accept(aVisitor);
        }
        if (aBean.getMaxWriteRate()!= null) {
            aBean.getMaxWriteRate().accept(aVisitor);
        }
        if (aBean.getNumberOfReadOps()!= null) {
            aBean.getNumberOfReadOps().accept(aVisitor);
        }
        if (aBean.getNumberOfWriteOps()!= null) {
            aBean.getNumberOfWriteOps().accept(aVisitor);
        }
        if (aBean.getBlockSize()!= null) {
            aBean.getBlockSize().accept(aVisitor);
        }
        if (aBean.getFileSystem()!= null) {
            aBean.getFileSystem().accept(aVisitor);
        }
        for (SolidStateDisk bean: aBean.getSolidStateDisk()) {
            bean.accept(aVisitor);
        }
        for (HardDisk bean: aBean.getHardDisk()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(f4g.schemas.java.metamodel.RAIDLevel aBean, Visitor aVisitor) {
    }

    public void traverse(RAMSize aBean, Visitor aVisitor) {
    }

    public void traverse(RAMStick aBean, Visitor aVisitor) {
        if (aBean.getVoltage()!= null) {
            aBean.getVoltage().accept(aVisitor);
        }
        if (aBean.getSize()!= null) {
            aBean.getSize().accept(aVisitor);
        }
        if (aBean.getFrequency()!= null) {
            aBean.getFrequency().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
    }

    public void traverse(RPM aBean, Visitor aVisitor) {
    }

    public void traverse(Rack aBean, Visitor aVisitor) {
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        for (RackableServer bean: aBean.getRackableServer()) {
            bean.accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        for (RackableRouter bean: aBean.getRackableRouter()) {
            bean.accept(aVisitor);
        }
        for (RackableSwitch bean: aBean.getRackableSwitch()) {
            bean.accept(aVisitor);
        }
        for (SAN bean: aBean.getSAN()) {
            bean.accept(aVisitor);
        }
        for (NAS bean: aBean.getNAS()) {
            bean.accept(aVisitor);
        }
        for (Enclosure bean: aBean.getEnclosure()) {
            bean.accept(aVisitor);
        }
        for (PDU bean: aBean.getPDU()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(RackableNetwork aBean, Visitor aVisitor) {
        if (aBean.getProcessingBandwidth()!= null) {
            aBean.getProcessingBandwidth().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (NetworkPort bean: aBean.getNetworkPort()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(RackableRouter aBean, Visitor aVisitor) {
        if (aBean.getProcessingBandwidth()!= null) {
            aBean.getProcessingBandwidth().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (NetworkPort bean: aBean.getNetworkPort()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(RackableServer aBean, Visitor aVisitor) {
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (LogicalVolume bean: aBean.getLogicalVolume()) {
            bean.accept(aVisitor);
        }
        for (Mainboard bean: aBean.getMainboard()) {
            bean.accept(aVisitor);
        }
        if (aBean.getNativeOperatingSystem()!= null) {
            aBean.getNativeOperatingSystem().accept(aVisitor);
        }
        if (aBean.getNativeHypervisor()!= null) {
            aBean.getNativeHypervisor().accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(RackableSwitch aBean, Visitor aVisitor) {
        if (aBean.getProcessingBandwidth()!= null) {
            aBean.getProcessingBandwidth().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (NetworkPort bean: aBean.getNetworkPort()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(Role aBean, Visitor aVisitor) {
    }

    public void traverse(SAN aBean, Visitor aVisitor) {
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        if (aBean.getNetworkTrafficIn()!= null) {
            aBean.getNetworkTrafficIn().accept(aVisitor);
        }
        if (aBean.getNetworkTrafficOut()!= null) {
            aBean.getNetworkTrafficOut().accept(aVisitor);
        }
        for (NIC bean: aBean.getEthernetNIC()) {
            bean.accept(aVisitor);
        }
        for (NIC bean: aBean.getFiberchannelNIC()) {
            bean.accept(aVisitor);
        }
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (LogicalUnit bean: aBean.getLogicalUnit()) {
            bean.accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(SerialPPP aBean, Visitor aVisitor) {
        if (aBean.getLineCapacity()!= null) {
            aBean.getLineCapacity().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getTrafficIn()!= null) {
            aBean.getTrafficIn().accept(aVisitor);
        }
        if (aBean.getTrafficOut()!= null) {
            aBean.getTrafficOut().accept(aVisitor);
        }
        if (aBean.getBufferSize()!= null) {
            aBean.getBufferSize().accept(aVisitor);
        }
        if (aBean.getBufferOccupancy()!= null) {
            aBean.getBufferOccupancy().accept(aVisitor);
        }
        if (aBean.getLink()!= null) {
            aBean.getLink().accept(aVisitor);
        }
    }

    public void traverse(Server aBean, Visitor aVisitor) {
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (LogicalVolume bean: aBean.getLogicalVolume()) {
            bean.accept(aVisitor);
        }
        for (Mainboard bean: aBean.getMainboard()) {
            bean.accept(aVisitor);
        }
        if (aBean.getNativeOperatingSystem()!= null) {
            aBean.getNativeOperatingSystem().accept(aVisitor);
        }
        if (aBean.getNativeHypervisor()!= null) {
            aBean.getNativeHypervisor().accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(Site aBean, Visitor aVisitor) {
        if (aBean.getPUE()!= null) {
            aBean.getPUE().accept(aVisitor);
        }
        if (aBean.getCUE()!= null) {
            aBean.getCUE().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        for (Datacenter bean: aBean.getDatacenter()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(SoftwareApplication aBean, Visitor aVisitor) {
        if (aBean.getNumberOfCPUs()!= null) {
            aBean.getNumberOfCPUs().accept(aVisitor);
        }
        if (aBean.getActualCPUUsage()!= null) {
            aBean.getActualCPUUsage().accept(aVisitor);
        }
        if (aBean.getActualStorageUsage()!= null) {
            aBean.getActualStorageUsage().accept(aVisitor);
        }
        if (aBean.getActualDiskIORate()!= null) {
            aBean.getActualDiskIORate().accept(aVisitor);
        }
        if (aBean.getActualMemoryUsage()!= null) {
            aBean.getActualMemoryUsage().accept(aVisitor);
        }
        if (aBean.getActualNetworkUsage()!= null) {
            aBean.getActualNetworkUsage().accept(aVisitor);
        }
    }

    public void traverse(SoftwareNetwork aBean, Visitor aVisitor) {
        if (aBean.getSwitchFabric()!= null) {
            aBean.getSwitchFabric().accept(aVisitor);
        }
    }

    public void traverse(SoftwareRAID aBean, Visitor aVisitor) {
        if (aBean.getLevel()!= null) {
            aBean.getLevel().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        for (SolidStateDisk bean: aBean.getSolidStateDisk()) {
            bean.accept(aVisitor);
        }
        for (HardDisk bean: aBean.getHardDisk()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(SolidStateDisk aBean, Visitor aVisitor) {
        if (aBean.getPowerByRead()!= null) {
            aBean.getPowerByRead().accept(aVisitor);
        }
        if (aBean.getPowerByWrite()!= null) {
            aBean.getPowerByWrite().accept(aVisitor);
        }
        if (aBean.getStorageCapacity()!= null) {
            aBean.getStorageCapacity().accept(aVisitor);
        }
        if (aBean.getMaxReadRate()!= null) {
            aBean.getMaxReadRate().accept(aVisitor);
        }
        if (aBean.getMaxWriteRate()!= null) {
            aBean.getMaxWriteRate().accept(aVisitor);
        }
        if (aBean.getReadRate()!= null) {
            aBean.getReadRate().accept(aVisitor);
        }
        if (aBean.getWriteRate()!= null) {
            aBean.getWriteRate().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        for (Cache bean: aBean.getCache()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(StorageCapacity aBean, Visitor aVisitor) {
    }

    public void traverse(StorageUnit aBean, Visitor aVisitor) {
        if (aBean.getStorageCapacity()!= null) {
            aBean.getStorageCapacity().accept(aVisitor);
        }
        if (aBean.getMaxReadRate()!= null) {
            aBean.getMaxReadRate().accept(aVisitor);
        }
        if (aBean.getMaxWriteRate()!= null) {
            aBean.getMaxWriteRate().accept(aVisitor);
        }
        if (aBean.getReadRate()!= null) {
            aBean.getReadRate().accept(aVisitor);
        }
        if (aBean.getWriteRate()!= null) {
            aBean.getWriteRate().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        for (Cache bean: aBean.getCache()) {
            bean.accept(aVisitor);
        }
    }

    public void traverse(StorageUsage aBean, Visitor aVisitor) {
    }

    public void traverse(StripSize aBean, Visitor aVisitor) {
    }

    public void traverse(SwitchFabric aBean, Visitor aVisitor) {
    }

    public void traverse(TowerServer aBean, Visitor aVisitor) {
        for (PSU bean: aBean.getPSU()) {
            bean.accept(aVisitor);
        }
        for (Fan bean: aBean.getFan()) {
            bean.accept(aVisitor);
        }
        for (WaterCooler bean: aBean.getWaterCooler()) {
            bean.accept(aVisitor);
        }
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
        for (LogicalVolume bean: aBean.getLogicalVolume()) {
            bean.accept(aVisitor);
        }
        for (Mainboard bean: aBean.getMainboard()) {
            bean.accept(aVisitor);
        }
        if (aBean.getNativeOperatingSystem()!= null) {
            aBean.getNativeOperatingSystem().accept(aVisitor);
        }
        if (aBean.getNativeHypervisor()!= null) {
            aBean.getNativeHypervisor().accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(Tunnel aBean, Visitor aVisitor) {
        if (aBean.getLineCapacity()!= null) {
            aBean.getLineCapacity().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getTrafficIn()!= null) {
            aBean.getTrafficIn().accept(aVisitor);
        }
        if (aBean.getTrafficOut()!= null) {
            aBean.getTrafficOut().accept(aVisitor);
        }
        if (aBean.getBufferSize()!= null) {
            aBean.getBufferSize().accept(aVisitor);
        }
        if (aBean.getBufferOccupancy()!= null) {
            aBean.getBufferOccupancy().accept(aVisitor);
        }
        if (aBean.getLink()!= null) {
            aBean.getLink().accept(aVisitor);
        }
    }

    public void traverse(VMActions aBean, Visitor aVisitor) {
    }

    public void traverse(VPN aBean, Visitor aVisitor) {
        if (aBean.getLineCapacity()!= null) {
            aBean.getLineCapacity().accept(aVisitor);
        }
        if (aBean.getPowerIdle()!= null) {
            aBean.getPowerIdle().accept(aVisitor);
        }
        if (aBean.getPowerMax()!= null) {
            aBean.getPowerMax().accept(aVisitor);
        }
        if (aBean.getTrafficIn()!= null) {
            aBean.getTrafficIn().accept(aVisitor);
        }
        if (aBean.getTrafficOut()!= null) {
            aBean.getTrafficOut().accept(aVisitor);
        }
        if (aBean.getBufferSize()!= null) {
            aBean.getBufferSize().accept(aVisitor);
        }
        if (aBean.getBufferOccupancy()!= null) {
            aBean.getBufferOccupancy().accept(aVisitor);
        }
        if (aBean.getLink()!= null) {
            aBean.getLink().accept(aVisitor);
        }
    }

    public void traverse(VirtualMachine aBean, Visitor aVisitor) {
        if (aBean.getNumberOfCPUs()!= null) {
            aBean.getNumberOfCPUs().accept(aVisitor);
        }
        if (aBean.getActualCPUUsage()!= null) {
            aBean.getActualCPUUsage().accept(aVisitor);
        }
        if (aBean.getActualStorageUsage()!= null) {
            aBean.getActualStorageUsage().accept(aVisitor);
        }
        if (aBean.getActualDiskIORate()!= null) {
            aBean.getActualDiskIORate().accept(aVisitor);
        }
        if (aBean.getActualMemoryUsage()!= null) {
            aBean.getActualMemoryUsage().accept(aVisitor);
        }
        if (aBean.getActualNetworkUsage()!= null) {
            aBean.getActualNetworkUsage().accept(aVisitor);
        }
        if (aBean.getHostedOperatingSystem()!= null) {
            aBean.getHostedOperatingSystem().accept(aVisitor);
        }
        if (aBean.getFrameworkRef() instanceof Visitable) {
            ((Visitable) aBean.getFrameworkRef()).accept(aVisitor);
        }
    }

    public void traverse(Voltage aBean, Visitor aVisitor) {
    }

    public void traverse(WaterCooler aBean, Visitor aVisitor) {
        if (aBean.getComputedPower()!= null) {
            aBean.getComputedPower().accept(aVisitor);
        }
        if (aBean.getMeasuredPower()!= null) {
            aBean.getMeasuredPower().accept(aVisitor);
        }
    }

}
