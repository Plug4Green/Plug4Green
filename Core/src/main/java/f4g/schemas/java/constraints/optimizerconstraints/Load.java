//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Load complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Load"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="spareCPUs" type="{f4g/schemas/java/constraints/OptimizerConstraints}spareCPUs" minOccurs="0"/&gt;
 *         &lt;element name="spareNodes" type="{f4g/schemas/java/constraints/OptimizerConstraints}spareNodes" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Load", propOrder = {
    "spareCPUs",
    "spareNodes"
})
public class Load implements Cloneable, Visitable, CopyTo
{

    protected SpareCPUs spareCPUs;
    protected SpareNodes spareNodes;

    /**
     * Default no-arg constructor
     * 
     */
    public Load() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Load(final SpareCPUs spareCPUs, final SpareNodes spareNodes) {
        this.spareCPUs = spareCPUs;
        this.spareNodes = spareNodes;
    }

    /**
     * Gets the value of the spareCPUs property.
     * 
     * @return
     *     possible object is
     *     {@link SpareCPUs }
     *     
     */
    public SpareCPUs getSpareCPUs() {
        return spareCPUs;
    }

    /**
     * Sets the value of the spareCPUs property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpareCPUs }
     *     
     */
    public void setSpareCPUs(SpareCPUs value) {
        this.spareCPUs = value;
    }

    /**
     * Gets the value of the spareNodes property.
     * 
     * @return
     *     possible object is
     *     {@link SpareNodes }
     *     
     */
    public SpareNodes getSpareNodes() {
        return spareNodes;
    }

    /**
     * Sets the value of the spareNodes property.
     * 
     * @param value
     *     allowed object is
     *     {@link SpareNodes }
     *     
     */
    public void setSpareNodes(SpareNodes value) {
        this.spareNodes = value;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Load) {
            final Load copy = ((Load) draftCopy);
            if (this.spareCPUs!= null) {
                SpareCPUs sourceSpareCPUs;
                sourceSpareCPUs = this.getSpareCPUs();
                SpareCPUs copySpareCPUs = ((SpareCPUs) strategy.copy(LocatorUtils.property(locator, "spareCPUs", sourceSpareCPUs), sourceSpareCPUs));
                copy.setSpareCPUs(copySpareCPUs);
            } else {
                copy.spareCPUs = null;
            }
            if (this.spareNodes!= null) {
                SpareNodes sourceSpareNodes;
                sourceSpareNodes = this.getSpareNodes();
                SpareNodes copySpareNodes = ((SpareNodes) strategy.copy(LocatorUtils.property(locator, "spareNodes", sourceSpareNodes), sourceSpareNodes));
                copy.setSpareNodes(copySpareNodes);
            } else {
                copy.spareNodes = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Load();
    }

}
