//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for QoSConstraintsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="QoSConstraintsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="MaxServerCPULoad" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="MaxVirtualLoadPerCore" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="MaxVirtualCPUPerCore" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;float"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="MaxServerAvg_vCPUperCore" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;float"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="MaxServerAvg_vRAMperPhyRAM" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;float"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Max_vRAMperPhyRAM" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;float"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="Bandwidth" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="MaxVMperServer" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;int"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "QoSConstraintsType", propOrder = {
    "maxServerCPULoad",
    "maxVirtualLoadPerCore",
    "maxVirtualCPUPerCore",
    "maxServerAvgVCPUperCore",
    "maxServerAvgVRAMperPhyRAM",
    "maxVRAMperPhyRAM",
    "bandwidth",
    "maxVMperServer"
})
public class QoSConstraintsType implements Cloneable, Visitable, CopyTo
{

    @XmlElement(name = "MaxServerCPULoad")
    protected QoSConstraintsType.MaxServerCPULoad maxServerCPULoad;
    @XmlElement(name = "MaxVirtualLoadPerCore")
    protected QoSConstraintsType.MaxVirtualLoadPerCore maxVirtualLoadPerCore;
    @XmlElement(name = "MaxVirtualCPUPerCore")
    protected QoSConstraintsType.MaxVirtualCPUPerCore maxVirtualCPUPerCore;
    @XmlElement(name = "MaxServerAvg_vCPUperCore")
    protected QoSConstraintsType.MaxServerAvgVCPUperCore maxServerAvgVCPUperCore;
    @XmlElement(name = "MaxServerAvg_vRAMperPhyRAM")
    protected QoSConstraintsType.MaxServerAvgVRAMperPhyRAM maxServerAvgVRAMperPhyRAM;
    @XmlElement(name = "Max_vRAMperPhyRAM")
    protected QoSConstraintsType.MaxVRAMperPhyRAM maxVRAMperPhyRAM;
    @XmlElement(name = "Bandwidth")
    protected QoSConstraintsType.Bandwidth bandwidth;
    @XmlElement(name = "MaxVMperServer")
    protected QoSConstraintsType.MaxVMperServer maxVMperServer;

    /**
     * Default no-arg constructor
     * 
     */
    public QoSConstraintsType() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public QoSConstraintsType(final QoSConstraintsType.MaxServerCPULoad maxServerCPULoad, final QoSConstraintsType.MaxVirtualLoadPerCore maxVirtualLoadPerCore, final QoSConstraintsType.MaxVirtualCPUPerCore maxVirtualCPUPerCore, final QoSConstraintsType.MaxServerAvgVCPUperCore maxServerAvgVCPUperCore, final QoSConstraintsType.MaxServerAvgVRAMperPhyRAM maxServerAvgVRAMperPhyRAM, final QoSConstraintsType.MaxVRAMperPhyRAM maxVRAMperPhyRAM, final QoSConstraintsType.Bandwidth bandwidth, final QoSConstraintsType.MaxVMperServer maxVMperServer) {
        this.maxServerCPULoad = maxServerCPULoad;
        this.maxVirtualLoadPerCore = maxVirtualLoadPerCore;
        this.maxVirtualCPUPerCore = maxVirtualCPUPerCore;
        this.maxServerAvgVCPUperCore = maxServerAvgVCPUperCore;
        this.maxServerAvgVRAMperPhyRAM = maxServerAvgVRAMperPhyRAM;
        this.maxVRAMperPhyRAM = maxVRAMperPhyRAM;
        this.bandwidth = bandwidth;
        this.maxVMperServer = maxVMperServer;
    }

    /**
     * Gets the value of the maxServerCPULoad property.
     * 
     * @return
     *     possible object is
     *     {@link QoSConstraintsType.MaxServerCPULoad }
     *     
     */
    public QoSConstraintsType.MaxServerCPULoad getMaxServerCPULoad() {
        return maxServerCPULoad;
    }

    /**
     * Sets the value of the maxServerCPULoad property.
     * 
     * @param value
     *     allowed object is
     *     {@link QoSConstraintsType.MaxServerCPULoad }
     *     
     */
    public void setMaxServerCPULoad(QoSConstraintsType.MaxServerCPULoad value) {
        this.maxServerCPULoad = value;
    }

    /**
     * Gets the value of the maxVirtualLoadPerCore property.
     * 
     * @return
     *     possible object is
     *     {@link QoSConstraintsType.MaxVirtualLoadPerCore }
     *     
     */
    public QoSConstraintsType.MaxVirtualLoadPerCore getMaxVirtualLoadPerCore() {
        return maxVirtualLoadPerCore;
    }

    /**
     * Sets the value of the maxVirtualLoadPerCore property.
     * 
     * @param value
     *     allowed object is
     *     {@link QoSConstraintsType.MaxVirtualLoadPerCore }
     *     
     */
    public void setMaxVirtualLoadPerCore(QoSConstraintsType.MaxVirtualLoadPerCore value) {
        this.maxVirtualLoadPerCore = value;
    }

    /**
     * Gets the value of the maxVirtualCPUPerCore property.
     * 
     * @return
     *     possible object is
     *     {@link QoSConstraintsType.MaxVirtualCPUPerCore }
     *     
     */
    public QoSConstraintsType.MaxVirtualCPUPerCore getMaxVirtualCPUPerCore() {
        return maxVirtualCPUPerCore;
    }

    /**
     * Sets the value of the maxVirtualCPUPerCore property.
     * 
     * @param value
     *     allowed object is
     *     {@link QoSConstraintsType.MaxVirtualCPUPerCore }
     *     
     */
    public void setMaxVirtualCPUPerCore(QoSConstraintsType.MaxVirtualCPUPerCore value) {
        this.maxVirtualCPUPerCore = value;
    }

    /**
     * Gets the value of the maxServerAvgVCPUperCore property.
     * 
     * @return
     *     possible object is
     *     {@link QoSConstraintsType.MaxServerAvgVCPUperCore }
     *     
     */
    public QoSConstraintsType.MaxServerAvgVCPUperCore getMaxServerAvgVCPUperCore() {
        return maxServerAvgVCPUperCore;
    }

    /**
     * Sets the value of the maxServerAvgVCPUperCore property.
     * 
     * @param value
     *     allowed object is
     *     {@link QoSConstraintsType.MaxServerAvgVCPUperCore }
     *     
     */
    public void setMaxServerAvgVCPUperCore(QoSConstraintsType.MaxServerAvgVCPUperCore value) {
        this.maxServerAvgVCPUperCore = value;
    }

    /**
     * Gets the value of the maxServerAvgVRAMperPhyRAM property.
     * 
     * @return
     *     possible object is
     *     {@link QoSConstraintsType.MaxServerAvgVRAMperPhyRAM }
     *     
     */
    public QoSConstraintsType.MaxServerAvgVRAMperPhyRAM getMaxServerAvgVRAMperPhyRAM() {
        return maxServerAvgVRAMperPhyRAM;
    }

    /**
     * Sets the value of the maxServerAvgVRAMperPhyRAM property.
     * 
     * @param value
     *     allowed object is
     *     {@link QoSConstraintsType.MaxServerAvgVRAMperPhyRAM }
     *     
     */
    public void setMaxServerAvgVRAMperPhyRAM(QoSConstraintsType.MaxServerAvgVRAMperPhyRAM value) {
        this.maxServerAvgVRAMperPhyRAM = value;
    }

    /**
     * Gets the value of the maxVRAMperPhyRAM property.
     * 
     * @return
     *     possible object is
     *     {@link QoSConstraintsType.MaxVRAMperPhyRAM }
     *     
     */
    public QoSConstraintsType.MaxVRAMperPhyRAM getMaxVRAMperPhyRAM() {
        return maxVRAMperPhyRAM;
    }

    /**
     * Sets the value of the maxVRAMperPhyRAM property.
     * 
     * @param value
     *     allowed object is
     *     {@link QoSConstraintsType.MaxVRAMperPhyRAM }
     *     
     */
    public void setMaxVRAMperPhyRAM(QoSConstraintsType.MaxVRAMperPhyRAM value) {
        this.maxVRAMperPhyRAM = value;
    }

    /**
     * Gets the value of the bandwidth property.
     * 
     * @return
     *     possible object is
     *     {@link QoSConstraintsType.Bandwidth }
     *     
     */
    public QoSConstraintsType.Bandwidth getBandwidth() {
        return bandwidth;
    }

    /**
     * Sets the value of the bandwidth property.
     * 
     * @param value
     *     allowed object is
     *     {@link QoSConstraintsType.Bandwidth }
     *     
     */
    public void setBandwidth(QoSConstraintsType.Bandwidth value) {
        this.bandwidth = value;
    }

    /**
     * Gets the value of the maxVMperServer property.
     * 
     * @return
     *     possible object is
     *     {@link QoSConstraintsType.MaxVMperServer }
     *     
     */
    public QoSConstraintsType.MaxVMperServer getMaxVMperServer() {
        return maxVMperServer;
    }

    /**
     * Sets the value of the maxVMperServer property.
     * 
     * @param value
     *     allowed object is
     *     {@link QoSConstraintsType.MaxVMperServer }
     *     
     */
    public void setMaxVMperServer(QoSConstraintsType.MaxVMperServer value) {
        this.maxVMperServer = value;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof QoSConstraintsType) {
            final QoSConstraintsType copy = ((QoSConstraintsType) draftCopy);
            if (this.maxServerCPULoad!= null) {
                QoSConstraintsType.MaxServerCPULoad sourceMaxServerCPULoad;
                sourceMaxServerCPULoad = this.getMaxServerCPULoad();
                QoSConstraintsType.MaxServerCPULoad copyMaxServerCPULoad = ((QoSConstraintsType.MaxServerCPULoad) strategy.copy(LocatorUtils.property(locator, "maxServerCPULoad", sourceMaxServerCPULoad), sourceMaxServerCPULoad));
                copy.setMaxServerCPULoad(copyMaxServerCPULoad);
            } else {
                copy.maxServerCPULoad = null;
            }
            if (this.maxVirtualLoadPerCore!= null) {
                QoSConstraintsType.MaxVirtualLoadPerCore sourceMaxVirtualLoadPerCore;
                sourceMaxVirtualLoadPerCore = this.getMaxVirtualLoadPerCore();
                QoSConstraintsType.MaxVirtualLoadPerCore copyMaxVirtualLoadPerCore = ((QoSConstraintsType.MaxVirtualLoadPerCore) strategy.copy(LocatorUtils.property(locator, "maxVirtualLoadPerCore", sourceMaxVirtualLoadPerCore), sourceMaxVirtualLoadPerCore));
                copy.setMaxVirtualLoadPerCore(copyMaxVirtualLoadPerCore);
            } else {
                copy.maxVirtualLoadPerCore = null;
            }
            if (this.maxVirtualCPUPerCore!= null) {
                QoSConstraintsType.MaxVirtualCPUPerCore sourceMaxVirtualCPUPerCore;
                sourceMaxVirtualCPUPerCore = this.getMaxVirtualCPUPerCore();
                QoSConstraintsType.MaxVirtualCPUPerCore copyMaxVirtualCPUPerCore = ((QoSConstraintsType.MaxVirtualCPUPerCore) strategy.copy(LocatorUtils.property(locator, "maxVirtualCPUPerCore", sourceMaxVirtualCPUPerCore), sourceMaxVirtualCPUPerCore));
                copy.setMaxVirtualCPUPerCore(copyMaxVirtualCPUPerCore);
            } else {
                copy.maxVirtualCPUPerCore = null;
            }
            if (this.maxServerAvgVCPUperCore!= null) {
                QoSConstraintsType.MaxServerAvgVCPUperCore sourceMaxServerAvgVCPUperCore;
                sourceMaxServerAvgVCPUperCore = this.getMaxServerAvgVCPUperCore();
                QoSConstraintsType.MaxServerAvgVCPUperCore copyMaxServerAvgVCPUperCore = ((QoSConstraintsType.MaxServerAvgVCPUperCore) strategy.copy(LocatorUtils.property(locator, "maxServerAvgVCPUperCore", sourceMaxServerAvgVCPUperCore), sourceMaxServerAvgVCPUperCore));
                copy.setMaxServerAvgVCPUperCore(copyMaxServerAvgVCPUperCore);
            } else {
                copy.maxServerAvgVCPUperCore = null;
            }
            if (this.maxServerAvgVRAMperPhyRAM!= null) {
                QoSConstraintsType.MaxServerAvgVRAMperPhyRAM sourceMaxServerAvgVRAMperPhyRAM;
                sourceMaxServerAvgVRAMperPhyRAM = this.getMaxServerAvgVRAMperPhyRAM();
                QoSConstraintsType.MaxServerAvgVRAMperPhyRAM copyMaxServerAvgVRAMperPhyRAM = ((QoSConstraintsType.MaxServerAvgVRAMperPhyRAM) strategy.copy(LocatorUtils.property(locator, "maxServerAvgVRAMperPhyRAM", sourceMaxServerAvgVRAMperPhyRAM), sourceMaxServerAvgVRAMperPhyRAM));
                copy.setMaxServerAvgVRAMperPhyRAM(copyMaxServerAvgVRAMperPhyRAM);
            } else {
                copy.maxServerAvgVRAMperPhyRAM = null;
            }
            if (this.maxVRAMperPhyRAM!= null) {
                QoSConstraintsType.MaxVRAMperPhyRAM sourceMaxVRAMperPhyRAM;
                sourceMaxVRAMperPhyRAM = this.getMaxVRAMperPhyRAM();
                QoSConstraintsType.MaxVRAMperPhyRAM copyMaxVRAMperPhyRAM = ((QoSConstraintsType.MaxVRAMperPhyRAM) strategy.copy(LocatorUtils.property(locator, "maxVRAMperPhyRAM", sourceMaxVRAMperPhyRAM), sourceMaxVRAMperPhyRAM));
                copy.setMaxVRAMperPhyRAM(copyMaxVRAMperPhyRAM);
            } else {
                copy.maxVRAMperPhyRAM = null;
            }
            if (this.bandwidth!= null) {
                QoSConstraintsType.Bandwidth sourceBandwidth;
                sourceBandwidth = this.getBandwidth();
                QoSConstraintsType.Bandwidth copyBandwidth = ((QoSConstraintsType.Bandwidth) strategy.copy(LocatorUtils.property(locator, "bandwidth", sourceBandwidth), sourceBandwidth));
                copy.setBandwidth(copyBandwidth);
            } else {
                copy.bandwidth = null;
            }
            if (this.maxVMperServer!= null) {
                QoSConstraintsType.MaxVMperServer sourceMaxVMperServer;
                sourceMaxVMperServer = this.getMaxVMperServer();
                QoSConstraintsType.MaxVMperServer copyMaxVMperServer = ((QoSConstraintsType.MaxVMperServer) strategy.copy(LocatorUtils.property(locator, "maxVMperServer", sourceMaxVMperServer), sourceMaxVMperServer));
                copy.setMaxVMperServer(copyMaxVMperServer);
            } else {
                copy.maxVMperServer = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new QoSConstraintsType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class Bandwidth implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected double value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public Bandwidth() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public Bandwidth(final double value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public double getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(double value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof QoSConstraintsType.Bandwidth) {
                final QoSConstraintsType.Bandwidth copy = ((QoSConstraintsType.Bandwidth) draftCopy);
                double sourceValue;
                sourceValue = (true?this.getValue(): 0.0D);
                double copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new QoSConstraintsType.Bandwidth();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;float"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class MaxServerAvgVCPUperCore implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected float value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public MaxServerAvgVCPUperCore() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public MaxServerAvgVCPUperCore(final float value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public float getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(float value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof QoSConstraintsType.MaxServerAvgVCPUperCore) {
                final QoSConstraintsType.MaxServerAvgVCPUperCore copy = ((QoSConstraintsType.MaxServerAvgVCPUperCore) draftCopy);
                float sourceValue;
                sourceValue = (true?this.getValue(): 0.0F);
                float copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new QoSConstraintsType.MaxServerAvgVCPUperCore();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;float"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class MaxServerAvgVRAMperPhyRAM implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected float value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public MaxServerAvgVRAMperPhyRAM() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public MaxServerAvgVRAMperPhyRAM(final float value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public float getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(float value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof QoSConstraintsType.MaxServerAvgVRAMperPhyRAM) {
                final QoSConstraintsType.MaxServerAvgVRAMperPhyRAM copy = ((QoSConstraintsType.MaxServerAvgVRAMperPhyRAM) draftCopy);
                float sourceValue;
                sourceValue = (true?this.getValue(): 0.0F);
                float copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new QoSConstraintsType.MaxServerAvgVRAMperPhyRAM();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class MaxServerCPULoad implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected double value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public MaxServerCPULoad() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public MaxServerCPULoad(final double value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public double getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(double value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof QoSConstraintsType.MaxServerCPULoad) {
                final QoSConstraintsType.MaxServerCPULoad copy = ((QoSConstraintsType.MaxServerCPULoad) draftCopy);
                double sourceValue;
                sourceValue = (true?this.getValue(): 0.0D);
                double copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new QoSConstraintsType.MaxServerCPULoad();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;float"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class MaxVirtualCPUPerCore implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected float value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public MaxVirtualCPUPerCore() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public MaxVirtualCPUPerCore(final float value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public float getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(float value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof QoSConstraintsType.MaxVirtualCPUPerCore) {
                final QoSConstraintsType.MaxVirtualCPUPerCore copy = ((QoSConstraintsType.MaxVirtualCPUPerCore) draftCopy);
                float sourceValue;
                sourceValue = (true?this.getValue(): 0.0F);
                float copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new QoSConstraintsType.MaxVirtualCPUPerCore();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class MaxVirtualLoadPerCore implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected double value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public MaxVirtualLoadPerCore() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public MaxVirtualLoadPerCore(final double value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public double getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(double value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof QoSConstraintsType.MaxVirtualLoadPerCore) {
                final QoSConstraintsType.MaxVirtualLoadPerCore copy = ((QoSConstraintsType.MaxVirtualLoadPerCore) draftCopy);
                double sourceValue;
                sourceValue = (true?this.getValue(): 0.0D);
                double copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new QoSConstraintsType.MaxVirtualLoadPerCore();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;int"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class MaxVMperServer implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected int value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public MaxVMperServer() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public MaxVMperServer(final int value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public int getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(int value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof QoSConstraintsType.MaxVMperServer) {
                final QoSConstraintsType.MaxVMperServer copy = ((QoSConstraintsType.MaxVMperServer) draftCopy);
                int sourceValue;
                sourceValue = (true?this.getValue(): 0);
                int copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new QoSConstraintsType.MaxVMperServer();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;float"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class MaxVRAMperPhyRAM implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected float value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public MaxVRAMperPhyRAM() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public MaxVRAMperPhyRAM(final float value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public float getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(float value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof QoSConstraintsType.MaxVRAMperPhyRAM) {
                final QoSConstraintsType.MaxVRAMperPhyRAM copy = ((QoSConstraintsType.MaxVRAMperPhyRAM) draftCopy);
                float sourceValue;
                sourceValue = (true?this.getValue(): 0.0F);
                float copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new QoSConstraintsType.MaxVRAMperPhyRAM();
        }

    }

}
