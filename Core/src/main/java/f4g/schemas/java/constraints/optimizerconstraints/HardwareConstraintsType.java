//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for HardwareConstraintsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="HardwareConstraintsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="HDDCapacity" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="NbOfCores" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;int"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="CompPowerGHz" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="MemorySpaceGB" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="NbOfGPUCores" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;int"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="GPUFreqGHz" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="RAIDLevel" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;int"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "HardwareConstraintsType", propOrder = {
    "hddCapacity",
    "nbOfCores",
    "compPowerGHz",
    "memorySpaceGB",
    "nbOfGPUCores",
    "gpuFreqGHz",
    "raidLevel"
})
public class HardwareConstraintsType implements Cloneable, Visitable, CopyTo
{

    @XmlElement(name = "HDDCapacity")
    protected HardwareConstraintsType.HDDCapacity hddCapacity;
    @XmlElement(name = "NbOfCores")
    protected HardwareConstraintsType.NbOfCores nbOfCores;
    @XmlElement(name = "CompPowerGHz")
    protected HardwareConstraintsType.CompPowerGHz compPowerGHz;
    @XmlElement(name = "MemorySpaceGB")
    protected HardwareConstraintsType.MemorySpaceGB memorySpaceGB;
    @XmlElement(name = "NbOfGPUCores")
    protected HardwareConstraintsType.NbOfGPUCores nbOfGPUCores;
    @XmlElement(name = "GPUFreqGHz")
    protected HardwareConstraintsType.GPUFreqGHz gpuFreqGHz;
    @XmlElement(name = "RAIDLevel")
    protected HardwareConstraintsType.RAIDLevel raidLevel;

    /**
     * Default no-arg constructor
     * 
     */
    public HardwareConstraintsType() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public HardwareConstraintsType(final HardwareConstraintsType.HDDCapacity hddCapacity, final HardwareConstraintsType.NbOfCores nbOfCores, final HardwareConstraintsType.CompPowerGHz compPowerGHz, final HardwareConstraintsType.MemorySpaceGB memorySpaceGB, final HardwareConstraintsType.NbOfGPUCores nbOfGPUCores, final HardwareConstraintsType.GPUFreqGHz gpuFreqGHz, final HardwareConstraintsType.RAIDLevel raidLevel) {
        this.hddCapacity = hddCapacity;
        this.nbOfCores = nbOfCores;
        this.compPowerGHz = compPowerGHz;
        this.memorySpaceGB = memorySpaceGB;
        this.nbOfGPUCores = nbOfGPUCores;
        this.gpuFreqGHz = gpuFreqGHz;
        this.raidLevel = raidLevel;
    }

    /**
     * Gets the value of the hddCapacity property.
     * 
     * @return
     *     possible object is
     *     {@link HardwareConstraintsType.HDDCapacity }
     *     
     */
    public HardwareConstraintsType.HDDCapacity getHDDCapacity() {
        return hddCapacity;
    }

    /**
     * Sets the value of the hddCapacity property.
     * 
     * @param value
     *     allowed object is
     *     {@link HardwareConstraintsType.HDDCapacity }
     *     
     */
    public void setHDDCapacity(HardwareConstraintsType.HDDCapacity value) {
        this.hddCapacity = value;
    }

    /**
     * Gets the value of the nbOfCores property.
     * 
     * @return
     *     possible object is
     *     {@link HardwareConstraintsType.NbOfCores }
     *     
     */
    public HardwareConstraintsType.NbOfCores getNbOfCores() {
        return nbOfCores;
    }

    /**
     * Sets the value of the nbOfCores property.
     * 
     * @param value
     *     allowed object is
     *     {@link HardwareConstraintsType.NbOfCores }
     *     
     */
    public void setNbOfCores(HardwareConstraintsType.NbOfCores value) {
        this.nbOfCores = value;
    }

    /**
     * Gets the value of the compPowerGHz property.
     * 
     * @return
     *     possible object is
     *     {@link HardwareConstraintsType.CompPowerGHz }
     *     
     */
    public HardwareConstraintsType.CompPowerGHz getCompPowerGHz() {
        return compPowerGHz;
    }

    /**
     * Sets the value of the compPowerGHz property.
     * 
     * @param value
     *     allowed object is
     *     {@link HardwareConstraintsType.CompPowerGHz }
     *     
     */
    public void setCompPowerGHz(HardwareConstraintsType.CompPowerGHz value) {
        this.compPowerGHz = value;
    }

    /**
     * Gets the value of the memorySpaceGB property.
     * 
     * @return
     *     possible object is
     *     {@link HardwareConstraintsType.MemorySpaceGB }
     *     
     */
    public HardwareConstraintsType.MemorySpaceGB getMemorySpaceGB() {
        return memorySpaceGB;
    }

    /**
     * Sets the value of the memorySpaceGB property.
     * 
     * @param value
     *     allowed object is
     *     {@link HardwareConstraintsType.MemorySpaceGB }
     *     
     */
    public void setMemorySpaceGB(HardwareConstraintsType.MemorySpaceGB value) {
        this.memorySpaceGB = value;
    }

    /**
     * Gets the value of the nbOfGPUCores property.
     * 
     * @return
     *     possible object is
     *     {@link HardwareConstraintsType.NbOfGPUCores }
     *     
     */
    public HardwareConstraintsType.NbOfGPUCores getNbOfGPUCores() {
        return nbOfGPUCores;
    }

    /**
     * Sets the value of the nbOfGPUCores property.
     * 
     * @param value
     *     allowed object is
     *     {@link HardwareConstraintsType.NbOfGPUCores }
     *     
     */
    public void setNbOfGPUCores(HardwareConstraintsType.NbOfGPUCores value) {
        this.nbOfGPUCores = value;
    }

    /**
     * Gets the value of the gpuFreqGHz property.
     * 
     * @return
     *     possible object is
     *     {@link HardwareConstraintsType.GPUFreqGHz }
     *     
     */
    public HardwareConstraintsType.GPUFreqGHz getGPUFreqGHz() {
        return gpuFreqGHz;
    }

    /**
     * Sets the value of the gpuFreqGHz property.
     * 
     * @param value
     *     allowed object is
     *     {@link HardwareConstraintsType.GPUFreqGHz }
     *     
     */
    public void setGPUFreqGHz(HardwareConstraintsType.GPUFreqGHz value) {
        this.gpuFreqGHz = value;
    }

    /**
     * Gets the value of the raidLevel property.
     * 
     * @return
     *     possible object is
     *     {@link HardwareConstraintsType.RAIDLevel }
     *     
     */
    public HardwareConstraintsType.RAIDLevel getRAIDLevel() {
        return raidLevel;
    }

    /**
     * Sets the value of the raidLevel property.
     * 
     * @param value
     *     allowed object is
     *     {@link HardwareConstraintsType.RAIDLevel }
     *     
     */
    public void setRAIDLevel(HardwareConstraintsType.RAIDLevel value) {
        this.raidLevel = value;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof HardwareConstraintsType) {
            final HardwareConstraintsType copy = ((HardwareConstraintsType) draftCopy);
            if (this.hddCapacity!= null) {
                HardwareConstraintsType.HDDCapacity sourceHDDCapacity;
                sourceHDDCapacity = this.getHDDCapacity();
                HardwareConstraintsType.HDDCapacity copyHDDCapacity = ((HardwareConstraintsType.HDDCapacity) strategy.copy(LocatorUtils.property(locator, "hddCapacity", sourceHDDCapacity), sourceHDDCapacity));
                copy.setHDDCapacity(copyHDDCapacity);
            } else {
                copy.hddCapacity = null;
            }
            if (this.nbOfCores!= null) {
                HardwareConstraintsType.NbOfCores sourceNbOfCores;
                sourceNbOfCores = this.getNbOfCores();
                HardwareConstraintsType.NbOfCores copyNbOfCores = ((HardwareConstraintsType.NbOfCores) strategy.copy(LocatorUtils.property(locator, "nbOfCores", sourceNbOfCores), sourceNbOfCores));
                copy.setNbOfCores(copyNbOfCores);
            } else {
                copy.nbOfCores = null;
            }
            if (this.compPowerGHz!= null) {
                HardwareConstraintsType.CompPowerGHz sourceCompPowerGHz;
                sourceCompPowerGHz = this.getCompPowerGHz();
                HardwareConstraintsType.CompPowerGHz copyCompPowerGHz = ((HardwareConstraintsType.CompPowerGHz) strategy.copy(LocatorUtils.property(locator, "compPowerGHz", sourceCompPowerGHz), sourceCompPowerGHz));
                copy.setCompPowerGHz(copyCompPowerGHz);
            } else {
                copy.compPowerGHz = null;
            }
            if (this.memorySpaceGB!= null) {
                HardwareConstraintsType.MemorySpaceGB sourceMemorySpaceGB;
                sourceMemorySpaceGB = this.getMemorySpaceGB();
                HardwareConstraintsType.MemorySpaceGB copyMemorySpaceGB = ((HardwareConstraintsType.MemorySpaceGB) strategy.copy(LocatorUtils.property(locator, "memorySpaceGB", sourceMemorySpaceGB), sourceMemorySpaceGB));
                copy.setMemorySpaceGB(copyMemorySpaceGB);
            } else {
                copy.memorySpaceGB = null;
            }
            if (this.nbOfGPUCores!= null) {
                HardwareConstraintsType.NbOfGPUCores sourceNbOfGPUCores;
                sourceNbOfGPUCores = this.getNbOfGPUCores();
                HardwareConstraintsType.NbOfGPUCores copyNbOfGPUCores = ((HardwareConstraintsType.NbOfGPUCores) strategy.copy(LocatorUtils.property(locator, "nbOfGPUCores", sourceNbOfGPUCores), sourceNbOfGPUCores));
                copy.setNbOfGPUCores(copyNbOfGPUCores);
            } else {
                copy.nbOfGPUCores = null;
            }
            if (this.gpuFreqGHz!= null) {
                HardwareConstraintsType.GPUFreqGHz sourceGPUFreqGHz;
                sourceGPUFreqGHz = this.getGPUFreqGHz();
                HardwareConstraintsType.GPUFreqGHz copyGPUFreqGHz = ((HardwareConstraintsType.GPUFreqGHz) strategy.copy(LocatorUtils.property(locator, "gpuFreqGHz", sourceGPUFreqGHz), sourceGPUFreqGHz));
                copy.setGPUFreqGHz(copyGPUFreqGHz);
            } else {
                copy.gpuFreqGHz = null;
            }
            if (this.raidLevel!= null) {
                HardwareConstraintsType.RAIDLevel sourceRAIDLevel;
                sourceRAIDLevel = this.getRAIDLevel();
                HardwareConstraintsType.RAIDLevel copyRAIDLevel = ((HardwareConstraintsType.RAIDLevel) strategy.copy(LocatorUtils.property(locator, "raidLevel", sourceRAIDLevel), sourceRAIDLevel));
                copy.setRAIDLevel(copyRAIDLevel);
            } else {
                copy.raidLevel = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new HardwareConstraintsType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class CompPowerGHz implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected double value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public CompPowerGHz() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public CompPowerGHz(final double value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public double getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(double value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof HardwareConstraintsType.CompPowerGHz) {
                final HardwareConstraintsType.CompPowerGHz copy = ((HardwareConstraintsType.CompPowerGHz) draftCopy);
                double sourceValue;
                sourceValue = (true?this.getValue(): 0.0D);
                double copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new HardwareConstraintsType.CompPowerGHz();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class GPUFreqGHz implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected double value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public GPUFreqGHz() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public GPUFreqGHz(final double value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public double getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(double value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof HardwareConstraintsType.GPUFreqGHz) {
                final HardwareConstraintsType.GPUFreqGHz copy = ((HardwareConstraintsType.GPUFreqGHz) draftCopy);
                double sourceValue;
                sourceValue = (true?this.getValue(): 0.0D);
                double copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new HardwareConstraintsType.GPUFreqGHz();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class HDDCapacity implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected double value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public HDDCapacity() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public HDDCapacity(final double value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public double getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(double value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof HardwareConstraintsType.HDDCapacity) {
                final HardwareConstraintsType.HDDCapacity copy = ((HardwareConstraintsType.HDDCapacity) draftCopy);
                double sourceValue;
                sourceValue = (true?this.getValue(): 0.0D);
                double copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new HardwareConstraintsType.HDDCapacity();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;double"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class MemorySpaceGB implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected double value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public MemorySpaceGB() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public MemorySpaceGB(final double value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public double getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(double value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof HardwareConstraintsType.MemorySpaceGB) {
                final HardwareConstraintsType.MemorySpaceGB copy = ((HardwareConstraintsType.MemorySpaceGB) draftCopy);
                double sourceValue;
                sourceValue = (true?this.getValue(): 0.0D);
                double copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new HardwareConstraintsType.MemorySpaceGB();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;int"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class NbOfCores implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected int value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public NbOfCores() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public NbOfCores(final int value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public int getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(int value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof HardwareConstraintsType.NbOfCores) {
                final HardwareConstraintsType.NbOfCores copy = ((HardwareConstraintsType.NbOfCores) draftCopy);
                int sourceValue;
                sourceValue = (true?this.getValue(): 0);
                int copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new HardwareConstraintsType.NbOfCores();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;int"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class NbOfGPUCores implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected int value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public NbOfGPUCores() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public NbOfGPUCores(final int value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public int getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(int value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof HardwareConstraintsType.NbOfGPUCores) {
                final HardwareConstraintsType.NbOfGPUCores copy = ((HardwareConstraintsType.NbOfGPUCores) draftCopy);
                int sourceValue;
                sourceValue = (true?this.getValue(): 0);
                int copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new HardwareConstraintsType.NbOfGPUCores();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;int"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class RAIDLevel implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected int value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public RAIDLevel() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public RAIDLevel(final int value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public int getValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(int value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof HardwareConstraintsType.RAIDLevel) {
                final HardwareConstraintsType.RAIDLevel copy = ((HardwareConstraintsType.RAIDLevel) draftCopy);
                int sourceValue;
                sourceValue = (true?this.getValue(): 0);
                int copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new HardwareConstraintsType.RAIDLevel();
        }

    }

}
