//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for SLAType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SLAType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="SLA" maxOccurs="unbounded"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="HardwareConstraints" type="{f4g/schemas/java/constraints/OptimizerConstraints}HardwareConstraintsType"/&gt;
 *                   &lt;element name="QoSConstraints" type="{f4g/schemas/java/constraints/OptimizerConstraints}QoSConstraintsType"/&gt;
 *                   &lt;element name="SecurityConstraints" type="{f4g/schemas/java/constraints/OptimizerConstraints}SecurityConstraintsType"/&gt;
 *                   &lt;element name="EnergyConstraints" type="{f4g/schemas/java/constraints/OptimizerConstraints}EnergyConstraintsType"/&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SLAType", propOrder = {
    "sla"
})
public class SLAType implements Cloneable, Visitable, CopyTo
{

    @XmlElement(name = "SLA", required = true)
    protected List<SLAType.SLA> sla;

    /**
     * Default no-arg constructor
     * 
     */
    public SLAType() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public SLAType(final List<SLAType.SLA> sla) {
        this.sla = sla;
    }

    /**
     * Gets the value of the sla property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the sla property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSLA().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SLAType.SLA }
     * 
     * 
     */
    public List<SLAType.SLA> getSLA() {
        if (sla == null) {
            sla = new ArrayList<SLAType.SLA>();
        }
        return this.sla;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SLAType) {
            final SLAType copy = ((SLAType) draftCopy);
            if ((this.sla!= null)&&(!this.sla.isEmpty())) {
                List<SLAType.SLA> sourceSLA;
                sourceSLA = (((this.sla!= null)&&(!this.sla.isEmpty()))?this.getSLA():null);
                @SuppressWarnings("unchecked")
                List<SLAType.SLA> copySLA = ((List<SLAType.SLA> ) strategy.copy(LocatorUtils.property(locator, "sla", sourceSLA), sourceSLA));
                copy.sla = null;
                if (copySLA!= null) {
                    List<SLAType.SLA> uniqueSLAl = copy.getSLA();
                    uniqueSLAl.addAll(copySLA);
                }
            } else {
                copy.sla = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SLAType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="HardwareConstraints" type="{f4g/schemas/java/constraints/OptimizerConstraints}HardwareConstraintsType"/&gt;
     *         &lt;element name="QoSConstraints" type="{f4g/schemas/java/constraints/OptimizerConstraints}QoSConstraintsType"/&gt;
     *         &lt;element name="SecurityConstraints" type="{f4g/schemas/java/constraints/OptimizerConstraints}SecurityConstraintsType"/&gt;
     *         &lt;element name="EnergyConstraints" type="{f4g/schemas/java/constraints/OptimizerConstraints}EnergyConstraintsType"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "hardwareConstraints",
        "qoSConstraints",
        "securityConstraints",
        "energyConstraints"
    })
    public static class SLA implements Cloneable, Visitable, CopyTo
    {

        @XmlElement(name = "HardwareConstraints", required = true)
        protected HardwareConstraintsType hardwareConstraints;
        @XmlElement(name = "QoSConstraints", required = true)
        protected QoSConstraintsType qoSConstraints;
        @XmlElement(name = "SecurityConstraints", required = true)
        protected SecurityConstraintsType securityConstraints;
        @XmlElement(name = "EnergyConstraints", required = true)
        protected EnergyConstraintsType energyConstraints;
        @XmlAttribute(name = "id", required = true)
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;

        /**
         * Default no-arg constructor
         * 
         */
        public SLA() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public SLA(final HardwareConstraintsType hardwareConstraints, final QoSConstraintsType qoSConstraints, final SecurityConstraintsType securityConstraints, final EnergyConstraintsType energyConstraints, final String id) {
            this.hardwareConstraints = hardwareConstraints;
            this.qoSConstraints = qoSConstraints;
            this.securityConstraints = securityConstraints;
            this.energyConstraints = energyConstraints;
            this.id = id;
        }

        /**
         * Gets the value of the hardwareConstraints property.
         * 
         * @return
         *     possible object is
         *     {@link HardwareConstraintsType }
         *     
         */
        public HardwareConstraintsType getHardwareConstraints() {
            return hardwareConstraints;
        }

        /**
         * Sets the value of the hardwareConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link HardwareConstraintsType }
         *     
         */
        public void setHardwareConstraints(HardwareConstraintsType value) {
            this.hardwareConstraints = value;
        }

        /**
         * Gets the value of the qoSConstraints property.
         * 
         * @return
         *     possible object is
         *     {@link QoSConstraintsType }
         *     
         */
        public QoSConstraintsType getQoSConstraints() {
            return qoSConstraints;
        }

        /**
         * Sets the value of the qoSConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link QoSConstraintsType }
         *     
         */
        public void setQoSConstraints(QoSConstraintsType value) {
            this.qoSConstraints = value;
        }

        /**
         * Gets the value of the securityConstraints property.
         * 
         * @return
         *     possible object is
         *     {@link SecurityConstraintsType }
         *     
         */
        public SecurityConstraintsType getSecurityConstraints() {
            return securityConstraints;
        }

        /**
         * Sets the value of the securityConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link SecurityConstraintsType }
         *     
         */
        public void setSecurityConstraints(SecurityConstraintsType value) {
            this.securityConstraints = value;
        }

        /**
         * Gets the value of the energyConstraints property.
         * 
         * @return
         *     possible object is
         *     {@link EnergyConstraintsType }
         *     
         */
        public EnergyConstraintsType getEnergyConstraints() {
            return energyConstraints;
        }

        /**
         * Sets the value of the energyConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link EnergyConstraintsType }
         *     
         */
        public void setEnergyConstraints(EnergyConstraintsType value) {
            this.energyConstraints = value;
        }

        /**
         * Gets the value of the id property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setId(String value) {
            this.id = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SLAType.SLA) {
                final SLAType.SLA copy = ((SLAType.SLA) draftCopy);
                if (this.hardwareConstraints!= null) {
                    HardwareConstraintsType sourceHardwareConstraints;
                    sourceHardwareConstraints = this.getHardwareConstraints();
                    HardwareConstraintsType copyHardwareConstraints = ((HardwareConstraintsType) strategy.copy(LocatorUtils.property(locator, "hardwareConstraints", sourceHardwareConstraints), sourceHardwareConstraints));
                    copy.setHardwareConstraints(copyHardwareConstraints);
                } else {
                    copy.hardwareConstraints = null;
                }
                if (this.qoSConstraints!= null) {
                    QoSConstraintsType sourceQoSConstraints;
                    sourceQoSConstraints = this.getQoSConstraints();
                    QoSConstraintsType copyQoSConstraints = ((QoSConstraintsType) strategy.copy(LocatorUtils.property(locator, "qoSConstraints", sourceQoSConstraints), sourceQoSConstraints));
                    copy.setQoSConstraints(copyQoSConstraints);
                } else {
                    copy.qoSConstraints = null;
                }
                if (this.securityConstraints!= null) {
                    SecurityConstraintsType sourceSecurityConstraints;
                    sourceSecurityConstraints = this.getSecurityConstraints();
                    SecurityConstraintsType copySecurityConstraints = ((SecurityConstraintsType) strategy.copy(LocatorUtils.property(locator, "securityConstraints", sourceSecurityConstraints), sourceSecurityConstraints));
                    copy.setSecurityConstraints(copySecurityConstraints);
                } else {
                    copy.securityConstraints = null;
                }
                if (this.energyConstraints!= null) {
                    EnergyConstraintsType sourceEnergyConstraints;
                    sourceEnergyConstraints = this.getEnergyConstraints();
                    EnergyConstraintsType copyEnergyConstraints = ((EnergyConstraintsType) strategy.copy(LocatorUtils.property(locator, "energyConstraints", sourceEnergyConstraints), sourceEnergyConstraints));
                    copy.setEnergyConstraints(copyEnergyConstraints);
                } else {
                    copy.energyConstraints = null;
                }
                if (this.id!= null) {
                    String sourceId;
                    sourceId = this.getId();
                    String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                    copy.setId(copyId);
                } else {
                    copy.id = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SLAType.SLA();
        }

    }

}
