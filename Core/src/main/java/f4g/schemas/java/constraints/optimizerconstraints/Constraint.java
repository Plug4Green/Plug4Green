//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Constraint complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Constraint"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="PlacementConstraint" maxOccurs="unbounded"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="Ban" type="{f4g/schemas/java/constraints/OptimizerConstraints}Ban" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="Capacity" type="{f4g/schemas/java/constraints/OptimizerConstraints}Capacity" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="Fence" type="{f4g/schemas/java/constraints/OptimizerConstraints}Fence" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="Gather" type="{f4g/schemas/java/constraints/OptimizerConstraints}Gather" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="Lonely" type="{f4g/schemas/java/constraints/OptimizerConstraints}Lonely" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="Root" type="{f4g/schemas/java/constraints/OptimizerConstraints}Root" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="Split" type="{f4g/schemas/java/constraints/OptimizerConstraints}Split" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="Spread" type="{f4g/schemas/java/constraints/OptimizerConstraints}Spread" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Constraint", propOrder = {
    "placementConstraint"
})
public class Constraint implements Cloneable, Visitable, CopyTo
{

    @XmlElement(name = "PlacementConstraint", required = true)
    protected List<Constraint.PlacementConstraint> placementConstraint;

    /**
     * Default no-arg constructor
     * 
     */
    public Constraint() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Constraint(final List<Constraint.PlacementConstraint> placementConstraint) {
        this.placementConstraint = placementConstraint;
    }

    /**
     * Gets the value of the placementConstraint property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the placementConstraint property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPlacementConstraint().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Constraint.PlacementConstraint }
     * 
     * 
     */
    public List<Constraint.PlacementConstraint> getPlacementConstraint() {
        if (placementConstraint == null) {
            placementConstraint = new ArrayList<Constraint.PlacementConstraint>();
        }
        return this.placementConstraint;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Constraint) {
            final Constraint copy = ((Constraint) draftCopy);
            if ((this.placementConstraint!= null)&&(!this.placementConstraint.isEmpty())) {
                List<Constraint.PlacementConstraint> sourcePlacementConstraint;
                sourcePlacementConstraint = (((this.placementConstraint!= null)&&(!this.placementConstraint.isEmpty()))?this.getPlacementConstraint():null);
                @SuppressWarnings("unchecked")
                List<Constraint.PlacementConstraint> copyPlacementConstraint = ((List<Constraint.PlacementConstraint> ) strategy.copy(LocatorUtils.property(locator, "placementConstraint", sourcePlacementConstraint), sourcePlacementConstraint));
                copy.placementConstraint = null;
                if (copyPlacementConstraint!= null) {
                    List<Constraint.PlacementConstraint> uniquePlacementConstraintl = copy.getPlacementConstraint();
                    uniquePlacementConstraintl.addAll(copyPlacementConstraint);
                }
            } else {
                copy.placementConstraint = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Constraint();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="Ban" type="{f4g/schemas/java/constraints/OptimizerConstraints}Ban" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="Capacity" type="{f4g/schemas/java/constraints/OptimizerConstraints}Capacity" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="Fence" type="{f4g/schemas/java/constraints/OptimizerConstraints}Fence" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="Gather" type="{f4g/schemas/java/constraints/OptimizerConstraints}Gather" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="Lonely" type="{f4g/schemas/java/constraints/OptimizerConstraints}Lonely" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="Root" type="{f4g/schemas/java/constraints/OptimizerConstraints}Root" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="Split" type="{f4g/schemas/java/constraints/OptimizerConstraints}Split" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="Spread" type="{f4g/schemas/java/constraints/OptimizerConstraints}Spread" maxOccurs="unbounded" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "ban",
        "capacity",
        "fence",
        "gather",
        "lonely",
        "root",
        "split",
        "spread"
    })
    public static class PlacementConstraint implements Cloneable, Visitable, CopyTo
    {

        @XmlElement(name = "Ban")
        protected List<Ban> ban;
        @XmlElement(name = "Capacity")
        protected List<Capacity> capacity;
        @XmlElement(name = "Fence")
        protected List<Fence> fence;
        @XmlElement(name = "Gather")
        protected List<Gather> gather;
        @XmlElement(name = "Lonely")
        protected List<Lonely> lonely;
        @XmlElement(name = "Root")
        protected List<Root> root;
        @XmlElement(name = "Split")
        protected List<Split> split;
        @XmlElement(name = "Spread")
        protected List<Spread> spread;
        @XmlAttribute(name = "id", required = true)
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;

        /**
         * Default no-arg constructor
         * 
         */
        public PlacementConstraint() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public PlacementConstraint(final List<Ban> ban, final List<Capacity> capacity, final List<Fence> fence, final List<Gather> gather, final List<Lonely> lonely, final List<Root> root, final List<Split> split, final List<Spread> spread, final String id) {
            this.ban = ban;
            this.capacity = capacity;
            this.fence = fence;
            this.gather = gather;
            this.lonely = lonely;
            this.root = root;
            this.split = split;
            this.spread = spread;
            this.id = id;
        }

        /**
         * Gets the value of the ban property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the ban property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getBan().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Ban }
         * 
         * 
         */
        public List<Ban> getBan() {
            if (ban == null) {
                ban = new ArrayList<Ban>();
            }
            return this.ban;
        }

        /**
         * Gets the value of the capacity property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the capacity property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getCapacity().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Capacity }
         * 
         * 
         */
        public List<Capacity> getCapacity() {
            if (capacity == null) {
                capacity = new ArrayList<Capacity>();
            }
            return this.capacity;
        }

        /**
         * Gets the value of the fence property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the fence property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getFence().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Fence }
         * 
         * 
         */
        public List<Fence> getFence() {
            if (fence == null) {
                fence = new ArrayList<Fence>();
            }
            return this.fence;
        }

        /**
         * Gets the value of the gather property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the gather property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getGather().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Gather }
         * 
         * 
         */
        public List<Gather> getGather() {
            if (gather == null) {
                gather = new ArrayList<Gather>();
            }
            return this.gather;
        }

        /**
         * Gets the value of the lonely property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the lonely property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getLonely().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Lonely }
         * 
         * 
         */
        public List<Lonely> getLonely() {
            if (lonely == null) {
                lonely = new ArrayList<Lonely>();
            }
            return this.lonely;
        }

        /**
         * Gets the value of the root property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the root property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getRoot().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Root }
         * 
         * 
         */
        public List<Root> getRoot() {
            if (root == null) {
                root = new ArrayList<Root>();
            }
            return this.root;
        }

        /**
         * Gets the value of the split property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the split property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getSplit().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Split }
         * 
         * 
         */
        public List<Split> getSplit() {
            if (split == null) {
                split = new ArrayList<Split>();
            }
            return this.split;
        }

        /**
         * Gets the value of the spread property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the spread property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getSpread().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Spread }
         * 
         * 
         */
        public List<Spread> getSpread() {
            if (spread == null) {
                spread = new ArrayList<Spread>();
            }
            return this.spread;
        }

        /**
         * Gets the value of the id property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setId(String value) {
            this.id = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof Constraint.PlacementConstraint) {
                final Constraint.PlacementConstraint copy = ((Constraint.PlacementConstraint) draftCopy);
                if ((this.ban!= null)&&(!this.ban.isEmpty())) {
                    List<Ban> sourceBan;
                    sourceBan = (((this.ban!= null)&&(!this.ban.isEmpty()))?this.getBan():null);
                    @SuppressWarnings("unchecked")
                    List<Ban> copyBan = ((List<Ban> ) strategy.copy(LocatorUtils.property(locator, "ban", sourceBan), sourceBan));
                    copy.ban = null;
                    if (copyBan!= null) {
                        List<Ban> uniqueBanl = copy.getBan();
                        uniqueBanl.addAll(copyBan);
                    }
                } else {
                    copy.ban = null;
                }
                if ((this.capacity!= null)&&(!this.capacity.isEmpty())) {
                    List<Capacity> sourceCapacity;
                    sourceCapacity = (((this.capacity!= null)&&(!this.capacity.isEmpty()))?this.getCapacity():null);
                    @SuppressWarnings("unchecked")
                    List<Capacity> copyCapacity = ((List<Capacity> ) strategy.copy(LocatorUtils.property(locator, "capacity", sourceCapacity), sourceCapacity));
                    copy.capacity = null;
                    if (copyCapacity!= null) {
                        List<Capacity> uniqueCapacityl = copy.getCapacity();
                        uniqueCapacityl.addAll(copyCapacity);
                    }
                } else {
                    copy.capacity = null;
                }
                if ((this.fence!= null)&&(!this.fence.isEmpty())) {
                    List<Fence> sourceFence;
                    sourceFence = (((this.fence!= null)&&(!this.fence.isEmpty()))?this.getFence():null);
                    @SuppressWarnings("unchecked")
                    List<Fence> copyFence = ((List<Fence> ) strategy.copy(LocatorUtils.property(locator, "fence", sourceFence), sourceFence));
                    copy.fence = null;
                    if (copyFence!= null) {
                        List<Fence> uniqueFencel = copy.getFence();
                        uniqueFencel.addAll(copyFence);
                    }
                } else {
                    copy.fence = null;
                }
                if ((this.gather!= null)&&(!this.gather.isEmpty())) {
                    List<Gather> sourceGather;
                    sourceGather = (((this.gather!= null)&&(!this.gather.isEmpty()))?this.getGather():null);
                    @SuppressWarnings("unchecked")
                    List<Gather> copyGather = ((List<Gather> ) strategy.copy(LocatorUtils.property(locator, "gather", sourceGather), sourceGather));
                    copy.gather = null;
                    if (copyGather!= null) {
                        List<Gather> uniqueGatherl = copy.getGather();
                        uniqueGatherl.addAll(copyGather);
                    }
                } else {
                    copy.gather = null;
                }
                if ((this.lonely!= null)&&(!this.lonely.isEmpty())) {
                    List<Lonely> sourceLonely;
                    sourceLonely = (((this.lonely!= null)&&(!this.lonely.isEmpty()))?this.getLonely():null);
                    @SuppressWarnings("unchecked")
                    List<Lonely> copyLonely = ((List<Lonely> ) strategy.copy(LocatorUtils.property(locator, "lonely", sourceLonely), sourceLonely));
                    copy.lonely = null;
                    if (copyLonely!= null) {
                        List<Lonely> uniqueLonelyl = copy.getLonely();
                        uniqueLonelyl.addAll(copyLonely);
                    }
                } else {
                    copy.lonely = null;
                }
                if ((this.root!= null)&&(!this.root.isEmpty())) {
                    List<Root> sourceRoot;
                    sourceRoot = (((this.root!= null)&&(!this.root.isEmpty()))?this.getRoot():null);
                    @SuppressWarnings("unchecked")
                    List<Root> copyRoot = ((List<Root> ) strategy.copy(LocatorUtils.property(locator, "root", sourceRoot), sourceRoot));
                    copy.root = null;
                    if (copyRoot!= null) {
                        List<Root> uniqueRootl = copy.getRoot();
                        uniqueRootl.addAll(copyRoot);
                    }
                } else {
                    copy.root = null;
                }
                if ((this.split!= null)&&(!this.split.isEmpty())) {
                    List<Split> sourceSplit;
                    sourceSplit = (((this.split!= null)&&(!this.split.isEmpty()))?this.getSplit():null);
                    @SuppressWarnings("unchecked")
                    List<Split> copySplit = ((List<Split> ) strategy.copy(LocatorUtils.property(locator, "split", sourceSplit), sourceSplit));
                    copy.split = null;
                    if (copySplit!= null) {
                        List<Split> uniqueSplitl = copy.getSplit();
                        uniqueSplitl.addAll(copySplit);
                    }
                } else {
                    copy.split = null;
                }
                if ((this.spread!= null)&&(!this.spread.isEmpty())) {
                    List<Spread> sourceSpread;
                    sourceSpread = (((this.spread!= null)&&(!this.spread.isEmpty()))?this.getSpread():null);
                    @SuppressWarnings("unchecked")
                    List<Spread> copySpread = ((List<Spread> ) strategy.copy(LocatorUtils.property(locator, "spread", sourceSpread), sourceSpread));
                    copy.spread = null;
                    if (copySpread!= null) {
                        List<Spread> uniqueSpreadl = copy.getSpread();
                        uniqueSpreadl.addAll(copySpread);
                    }
                } else {
                    copy.spread = null;
                }
                if (this.id!= null) {
                    String sourceId;
                    sourceId = this.getId();
                    String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                    copy.setId(copyId);
                } else {
                    copy.id = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new Constraint.PlacementConstraint();
        }

    }

}
