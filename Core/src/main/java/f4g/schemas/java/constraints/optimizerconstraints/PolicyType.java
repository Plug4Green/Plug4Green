//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for PolicyType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PolicyType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="policy" maxOccurs="unbounded"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="PeriodVMThreshold" type="{f4g/schemas/java/constraints/OptimizerConstraints}Period" maxOccurs="unbounded" minOccurs="0"/&gt;
 *                   &lt;element name="DelayBetweenMove" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/&gt;
 *                   &lt;element name="DelayBetweenOnOff" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/&gt;
 *                   &lt;element name="VMMigrationPaybacktime" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/&gt;
 *                 &lt;/sequence&gt;
 *                 &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" /&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PolicyType", propOrder = {
    "policy"
})
public class PolicyType implements Cloneable, Visitable, CopyTo
{

    @XmlElement(required = true)
    protected List<PolicyType.Policy> policy;

    /**
     * Default no-arg constructor
     * 
     */
    public PolicyType() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public PolicyType(final List<PolicyType.Policy> policy) {
        this.policy = policy;
    }

    /**
     * Gets the value of the policy property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the policy property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPolicy().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PolicyType.Policy }
     * 
     * 
     */
    public List<PolicyType.Policy> getPolicy() {
        if (policy == null) {
            policy = new ArrayList<PolicyType.Policy>();
        }
        return this.policy;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PolicyType) {
            final PolicyType copy = ((PolicyType) draftCopy);
            if ((this.policy!= null)&&(!this.policy.isEmpty())) {
                List<PolicyType.Policy> sourcePolicy;
                sourcePolicy = (((this.policy!= null)&&(!this.policy.isEmpty()))?this.getPolicy():null);
                @SuppressWarnings("unchecked")
                List<PolicyType.Policy> copyPolicy = ((List<PolicyType.Policy> ) strategy.copy(LocatorUtils.property(locator, "policy", sourcePolicy), sourcePolicy));
                copy.policy = null;
                if (copyPolicy!= null) {
                    List<PolicyType.Policy> uniquePolicyl = copy.getPolicy();
                    uniquePolicyl.addAll(copyPolicy);
                }
            } else {
                copy.policy = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PolicyType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="PeriodVMThreshold" type="{f4g/schemas/java/constraints/OptimizerConstraints}Period" maxOccurs="unbounded" minOccurs="0"/&gt;
     *         &lt;element name="DelayBetweenMove" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/&gt;
     *         &lt;element name="DelayBetweenOnOff" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/&gt;
     *         &lt;element name="VMMigrationPaybacktime" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/&gt;
     *       &lt;/sequence&gt;
     *       &lt;attribute name="id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" /&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "periodVMThreshold",
        "delayBetweenMove",
        "delayBetweenOnOff",
        "vmMigrationPaybacktime"
    })
    public static class Policy implements Cloneable, Visitable, CopyTo
    {

        @XmlElement(name = "PeriodVMThreshold")
        protected List<Period> periodVMThreshold;
        @XmlElement(name = "DelayBetweenMove")
        protected Integer delayBetweenMove;
        @XmlElement(name = "DelayBetweenOnOff")
        protected Integer delayBetweenOnOff;
        @XmlElement(name = "VMMigrationPaybacktime")
        protected Integer vmMigrationPaybacktime;
        @XmlAttribute(name = "id", required = true)
        @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
        @XmlID
        @XmlSchemaType(name = "ID")
        protected String id;

        /**
         * Default no-arg constructor
         * 
         */
        public Policy() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public Policy(final List<Period> periodVMThreshold, final Integer delayBetweenMove, final Integer delayBetweenOnOff, final Integer vmMigrationPaybacktime, final String id) {
            this.periodVMThreshold = periodVMThreshold;
            this.delayBetweenMove = delayBetweenMove;
            this.delayBetweenOnOff = delayBetweenOnOff;
            this.vmMigrationPaybacktime = vmMigrationPaybacktime;
            this.id = id;
        }

        /**
         * Gets the value of the periodVMThreshold property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the periodVMThreshold property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getPeriodVMThreshold().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Period }
         * 
         * 
         */
        public List<Period> getPeriodVMThreshold() {
            if (periodVMThreshold == null) {
                periodVMThreshold = new ArrayList<Period>();
            }
            return this.periodVMThreshold;
        }

        /**
         * Gets the value of the delayBetweenMove property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public Integer getDelayBetweenMove() {
            return delayBetweenMove;
        }

        /**
         * Sets the value of the delayBetweenMove property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setDelayBetweenMove(Integer value) {
            this.delayBetweenMove = value;
        }

        /**
         * Gets the value of the delayBetweenOnOff property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public Integer getDelayBetweenOnOff() {
            return delayBetweenOnOff;
        }

        /**
         * Sets the value of the delayBetweenOnOff property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setDelayBetweenOnOff(Integer value) {
            this.delayBetweenOnOff = value;
        }

        /**
         * Gets the value of the vmMigrationPaybacktime property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public Integer getVMMigrationPaybacktime() {
            return vmMigrationPaybacktime;
        }

        /**
         * Sets the value of the vmMigrationPaybacktime property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setVMMigrationPaybacktime(Integer value) {
            this.vmMigrationPaybacktime = value;
        }

        /**
         * Gets the value of the id property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getId() {
            return id;
        }

        /**
         * Sets the value of the id property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setId(String value) {
            this.id = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof PolicyType.Policy) {
                final PolicyType.Policy copy = ((PolicyType.Policy) draftCopy);
                if ((this.periodVMThreshold!= null)&&(!this.periodVMThreshold.isEmpty())) {
                    List<Period> sourcePeriodVMThreshold;
                    sourcePeriodVMThreshold = (((this.periodVMThreshold!= null)&&(!this.periodVMThreshold.isEmpty()))?this.getPeriodVMThreshold():null);
                    @SuppressWarnings("unchecked")
                    List<Period> copyPeriodVMThreshold = ((List<Period> ) strategy.copy(LocatorUtils.property(locator, "periodVMThreshold", sourcePeriodVMThreshold), sourcePeriodVMThreshold));
                    copy.periodVMThreshold = null;
                    if (copyPeriodVMThreshold!= null) {
                        List<Period> uniquePeriodVMThresholdl = copy.getPeriodVMThreshold();
                        uniquePeriodVMThresholdl.addAll(copyPeriodVMThreshold);
                    }
                } else {
                    copy.periodVMThreshold = null;
                }
                if (this.delayBetweenMove!= null) {
                    Integer sourceDelayBetweenMove;
                    sourceDelayBetweenMove = this.getDelayBetweenMove();
                    Integer copyDelayBetweenMove = ((Integer) strategy.copy(LocatorUtils.property(locator, "delayBetweenMove", sourceDelayBetweenMove), sourceDelayBetweenMove));
                    copy.setDelayBetweenMove(copyDelayBetweenMove);
                } else {
                    copy.delayBetweenMove = null;
                }
                if (this.delayBetweenOnOff!= null) {
                    Integer sourceDelayBetweenOnOff;
                    sourceDelayBetweenOnOff = this.getDelayBetweenOnOff();
                    Integer copyDelayBetweenOnOff = ((Integer) strategy.copy(LocatorUtils.property(locator, "delayBetweenOnOff", sourceDelayBetweenOnOff), sourceDelayBetweenOnOff));
                    copy.setDelayBetweenOnOff(copyDelayBetweenOnOff);
                } else {
                    copy.delayBetweenOnOff = null;
                }
                if (this.vmMigrationPaybacktime!= null) {
                    Integer sourceVMMigrationPaybacktime;
                    sourceVMMigrationPaybacktime = this.getVMMigrationPaybacktime();
                    Integer copyVMMigrationPaybacktime = ((Integer) strategy.copy(LocatorUtils.property(locator, "vmMigrationPaybacktime", sourceVMMigrationPaybacktime), sourceVMMigrationPaybacktime));
                    copy.setVMMigrationPaybacktime(copyVMMigrationPaybacktime);
                } else {
                    copy.vmMigrationPaybacktime = null;
                }
                if (this.id!= null) {
                    String sourceId;
                    sourceId = this.getId();
                    String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                    copy.setId(copyId);
                } else {
                    copy.id = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new PolicyType.Policy();
        }

    }

}
