//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import f4g.schemas.java.metamodel.CpuUsage;
import f4g.schemas.java.metamodel.IoRate;
import f4g.schemas.java.metamodel.MemoryUsage;
import f4g.schemas.java.metamodel.NetworkUsage;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for expectedLoad complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="expectedLoad"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="vCpuLoad" type="{f4g/schemas/java/MetaModel}CpuUsage"/&gt;
 *         &lt;element name="vRamUsage" type="{f4g/schemas/java/MetaModel}MemoryUsage"/&gt;
 *         &lt;element name="vDiskLoad" type="{f4g/schemas/java/MetaModel}IoRate"/&gt;
 *         &lt;element name="vNetworkLoad" type="{f4g/schemas/java/MetaModel}NetworkUsage"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "expectedLoad", propOrder = {
    "vCpuLoad",
    "vRamUsage",
    "vDiskLoad",
    "vNetworkLoad"
})
public class ExpectedLoad implements Cloneable, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected CpuUsage vCpuLoad;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected MemoryUsage vRamUsage;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected IoRate vDiskLoad;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected NetworkUsage vNetworkLoad;

    /**
     * Default no-arg constructor
     * 
     */
    public ExpectedLoad() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public ExpectedLoad(final CpuUsage vCpuLoad, final MemoryUsage vRamUsage, final IoRate vDiskLoad, final NetworkUsage vNetworkLoad) {
        this.vCpuLoad = vCpuLoad;
        this.vRamUsage = vRamUsage;
        this.vDiskLoad = vDiskLoad;
        this.vNetworkLoad = vNetworkLoad;
    }

    /**
     * Gets the value of the vCpuLoad property.
     * 
     * @return
     *     possible object is
     *     {@link CpuUsage }
     *     
     */
    public CpuUsage getVCpuLoad() {
        return vCpuLoad;
    }

    /**
     * Sets the value of the vCpuLoad property.
     * 
     * @param value
     *     allowed object is
     *     {@link CpuUsage }
     *     
     */
    public void setVCpuLoad(CpuUsage value) {
        this.vCpuLoad = value;
    }

    /**
     * Gets the value of the vRamUsage property.
     * 
     * @return
     *     possible object is
     *     {@link MemoryUsage }
     *     
     */
    public MemoryUsage getVRamUsage() {
        return vRamUsage;
    }

    /**
     * Sets the value of the vRamUsage property.
     * 
     * @param value
     *     allowed object is
     *     {@link MemoryUsage }
     *     
     */
    public void setVRamUsage(MemoryUsage value) {
        this.vRamUsage = value;
    }

    /**
     * Gets the value of the vDiskLoad property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getVDiskLoad() {
        return vDiskLoad;
    }

    /**
     * Sets the value of the vDiskLoad property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setVDiskLoad(IoRate value) {
        this.vDiskLoad = value;
    }

    /**
     * Gets the value of the vNetworkLoad property.
     * 
     * @return
     *     possible object is
     *     {@link NetworkUsage }
     *     
     */
    public NetworkUsage getVNetworkLoad() {
        return vNetworkLoad;
    }

    /**
     * Sets the value of the vNetworkLoad property.
     * 
     * @param value
     *     allowed object is
     *     {@link NetworkUsage }
     *     
     */
    public void setVNetworkLoad(NetworkUsage value) {
        this.vNetworkLoad = value;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ExpectedLoad) {
            final ExpectedLoad copy = ((ExpectedLoad) draftCopy);
            if (this.vCpuLoad!= null) {
                CpuUsage sourceVCpuLoad;
                sourceVCpuLoad = this.getVCpuLoad();
                CpuUsage copyVCpuLoad = ((CpuUsage) strategy.copy(LocatorUtils.property(locator, "vCpuLoad", sourceVCpuLoad), sourceVCpuLoad));
                copy.setVCpuLoad(copyVCpuLoad);
            } else {
                copy.vCpuLoad = null;
            }
            if (this.vRamUsage!= null) {
                MemoryUsage sourceVRamUsage;
                sourceVRamUsage = this.getVRamUsage();
                MemoryUsage copyVRamUsage = ((MemoryUsage) strategy.copy(LocatorUtils.property(locator, "vRamUsage", sourceVRamUsage), sourceVRamUsage));
                copy.setVRamUsage(copyVRamUsage);
            } else {
                copy.vRamUsage = null;
            }
            if (this.vDiskLoad!= null) {
                IoRate sourceVDiskLoad;
                sourceVDiskLoad = this.getVDiskLoad();
                IoRate copyVDiskLoad = ((IoRate) strategy.copy(LocatorUtils.property(locator, "vDiskLoad", sourceVDiskLoad), sourceVDiskLoad));
                copy.setVDiskLoad(copyVDiskLoad);
            } else {
                copy.vDiskLoad = null;
            }
            if (this.vNetworkLoad!= null) {
                NetworkUsage sourceVNetworkLoad;
                sourceVNetworkLoad = this.getVNetworkLoad();
                NetworkUsage copyVNetworkLoad = ((NetworkUsage) strategy.copy(LocatorUtils.property(locator, "vNetworkLoad", sourceVNetworkLoad), sourceVNetworkLoad));
                copy.setVNetworkLoad(copyVNetworkLoad);
            } else {
                copy.vNetworkLoad = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ExpectedLoad();
    }

}
