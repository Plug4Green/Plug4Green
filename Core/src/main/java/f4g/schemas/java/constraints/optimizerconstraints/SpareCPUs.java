//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for spareCPUs complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="spareCPUs"&gt;
 *   &lt;simpleContent&gt;
 *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;int"&gt;
 *       &lt;attribute name="unitType" type="{f4g/schemas/java/constraints/OptimizerConstraints}UnitType" default="ABSOLUTE" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/simpleContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "spareCPUs", propOrder = {
    "value"
})
public class SpareCPUs implements Cloneable, Visitable, CopyTo
{

    @XmlValue
    protected int value;
    @XmlAttribute(name = "unitType")
    protected UnitType unitType;

    /**
     * Default no-arg constructor
     * 
     */
    public SpareCPUs() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public SpareCPUs(final int value, final UnitType unitType) {
        this.value = value;
        this.unitType = unitType;
    }

    /**
     * Gets the value of the value property.
     * 
     */
    public int getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     */
    public void setValue(int value) {
        this.value = value;
    }

    /**
     * Gets the value of the unitType property.
     * 
     * @return
     *     possible object is
     *     {@link UnitType }
     *     
     */
    public UnitType getUnitType() {
        if (unitType == null) {
            return UnitType.ABSOLUTE;
        } else {
            return unitType;
        }
    }

    /**
     * Sets the value of the unitType property.
     * 
     * @param value
     *     allowed object is
     *     {@link UnitType }
     *     
     */
    public void setUnitType(UnitType value) {
        this.unitType = value;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SpareCPUs) {
            final SpareCPUs copy = ((SpareCPUs) draftCopy);
            int sourceValue;
            sourceValue = (true?this.getValue(): 0);
            int copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
            copy.setValue(copyValue);
            if (this.unitType!= null) {
                UnitType sourceUnitType;
                sourceUnitType = this.getUnitType();
                UnitType copyUnitType = ((UnitType) strategy.copy(LocatorUtils.property(locator, "unitType", sourceUnitType), sourceUnitType));
                copy.setUnitType(copyUnitType);
            } else {
                copy.unitType = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SpareCPUs();
    }

}
