//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Split complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Split"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{f4g/schemas/java/constraints/OptimizerConstraints}PlacementConstraint"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="VMGroup1" type="{f4g/schemas/java/constraints/OptimizerConstraints}VMGroup"/&gt;
 *         &lt;element name="VMGroup2" type="{f4g/schemas/java/constraints/OptimizerConstraints}VMGroup"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Split", propOrder = {
    "vmGroup1",
    "vmGroup2"
})
public class Split
    extends PlacementConstraint
    implements Cloneable, Visitable, CopyTo
{

    @XmlElement(name = "VMGroup1", required = true)
    protected VMGroup vmGroup1;
    @XmlElement(name = "VMGroup2", required = true)
    protected VMGroup vmGroup2;

    /**
     * Default no-arg constructor
     * 
     */
    public Split() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Split(final VMGroup vmGroup1, final VMGroup vmGroup2) {
        super();
        this.vmGroup1 = vmGroup1;
        this.vmGroup2 = vmGroup2;
    }

    /**
     * Gets the value of the vmGroup1 property.
     * 
     * @return
     *     possible object is
     *     {@link VMGroup }
     *     
     */
    public VMGroup getVMGroup1() {
        return vmGroup1;
    }

    /**
     * Sets the value of the vmGroup1 property.
     * 
     * @param value
     *     allowed object is
     *     {@link VMGroup }
     *     
     */
    public void setVMGroup1(VMGroup value) {
        this.vmGroup1 = value;
    }

    /**
     * Gets the value of the vmGroup2 property.
     * 
     * @return
     *     possible object is
     *     {@link VMGroup }
     *     
     */
    public VMGroup getVMGroup2() {
        return vmGroup2;
    }

    /**
     * Sets the value of the vmGroup2 property.
     * 
     * @param value
     *     allowed object is
     *     {@link VMGroup }
     *     
     */
    public void setVMGroup2(VMGroup value) {
        this.vmGroup2 = value;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof Split) {
            final Split copy = ((Split) draftCopy);
            if (this.vmGroup1 != null) {
                VMGroup sourceVMGroup1;
                sourceVMGroup1 = this.getVMGroup1();
                VMGroup copyVMGroup1 = ((VMGroup) strategy.copy(LocatorUtils.property(locator, "vmGroup1", sourceVMGroup1), sourceVMGroup1));
                copy.setVMGroup1(copyVMGroup1);
            } else {
                copy.vmGroup1 = null;
            }
            if (this.vmGroup2 != null) {
                VMGroup sourceVMGroup2;
                sourceVMGroup2 = this.getVMGroup2();
                VMGroup copyVMGroup2 = ((VMGroup) strategy.copy(LocatorUtils.property(locator, "vmGroup2", sourceVMGroup2), sourceVMGroup2));
                copy.setVMGroup2(copyVMGroup2);
            } else {
                copy.vmGroup2 = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Split();
    }

}
