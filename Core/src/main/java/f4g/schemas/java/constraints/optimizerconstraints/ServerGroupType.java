//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ServerGroupType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ServerGroupType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="ServerGroup" maxOccurs="unbounded"&gt;
 *           &lt;complexType&gt;
 *             &lt;complexContent&gt;
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *                 &lt;sequence&gt;
 *                   &lt;element name="Name" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *                   &lt;element name="NodeController" type="{f4g/schemas/java/constraints/OptimizerConstraints}nodeController"/&gt;
 *                   &lt;element name="BoundedSLAs" type="{f4g/schemas/java/constraints/OptimizerConstraints}boundedSLAsType"/&gt;
 *                   &lt;element name="BoundedPlacementConstraints" type="{f4g/schemas/java/constraints/OptimizerConstraints}boundedPlacementConstraint"/&gt;
 *                 &lt;/sequence&gt;
 *               &lt;/restriction&gt;
 *             &lt;/complexContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ServerGroupType", propOrder = {
    "serverGroup"
})
public class ServerGroupType implements Cloneable, Visitable, CopyTo
{

    @XmlElement(name = "ServerGroup", required = true)
    protected List<ServerGroupType.ServerGroup> serverGroup;

    /**
     * Default no-arg constructor
     * 
     */
    public ServerGroupType() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public ServerGroupType(final List<ServerGroupType.ServerGroup> serverGroup) {
        this.serverGroup = serverGroup;
    }

    /**
     * Gets the value of the serverGroup property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the serverGroup property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getServerGroup().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ServerGroupType.ServerGroup }
     * 
     * 
     */
    public List<ServerGroupType.ServerGroup> getServerGroup() {
        if (serverGroup == null) {
            serverGroup = new ArrayList<ServerGroupType.ServerGroup>();
        }
        return this.serverGroup;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ServerGroupType) {
            final ServerGroupType copy = ((ServerGroupType) draftCopy);
            if ((this.serverGroup!= null)&&(!this.serverGroup.isEmpty())) {
                List<ServerGroupType.ServerGroup> sourceServerGroup;
                sourceServerGroup = (((this.serverGroup!= null)&&(!this.serverGroup.isEmpty()))?this.getServerGroup():null);
                @SuppressWarnings("unchecked")
                List<ServerGroupType.ServerGroup> copyServerGroup = ((List<ServerGroupType.ServerGroup> ) strategy.copy(LocatorUtils.property(locator, "serverGroup", sourceServerGroup), sourceServerGroup));
                copy.serverGroup = null;
                if (copyServerGroup!= null) {
                    List<ServerGroupType.ServerGroup> uniqueServerGroupl = copy.getServerGroup();
                    uniqueServerGroupl.addAll(copyServerGroup);
                }
            } else {
                copy.serverGroup = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ServerGroupType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;complexContent&gt;
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
     *       &lt;sequence&gt;
     *         &lt;element name="Name" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
     *         &lt;element name="NodeController" type="{f4g/schemas/java/constraints/OptimizerConstraints}nodeController"/&gt;
     *         &lt;element name="BoundedSLAs" type="{f4g/schemas/java/constraints/OptimizerConstraints}boundedSLAsType"/&gt;
     *         &lt;element name="BoundedPlacementConstraints" type="{f4g/schemas/java/constraints/OptimizerConstraints}boundedPlacementConstraint"/&gt;
     *       &lt;/sequence&gt;
     *     &lt;/restriction&gt;
     *   &lt;/complexContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "name",
        "nodeController",
        "boundedSLAs",
        "boundedPlacementConstraints"
    })
    public static class ServerGroup implements Cloneable, Visitable, CopyTo
    {

        @XmlElement(name = "Name", required = true)
        protected String name;
        @XmlElement(name = "NodeController", required = true)
        protected NodeController nodeController;
        @XmlElement(name = "BoundedSLAs", required = true)
        protected BoundedSLAsType boundedSLAs;
        @XmlElement(name = "BoundedPlacementConstraints", required = true)
        protected BoundedPlacementConstraint boundedPlacementConstraints;

        /**
         * Default no-arg constructor
         * 
         */
        public ServerGroup() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public ServerGroup(final String name, final NodeController nodeController, final BoundedSLAsType boundedSLAs, final BoundedPlacementConstraint boundedPlacementConstraints) {
            this.name = name;
            this.nodeController = nodeController;
            this.boundedSLAs = boundedSLAs;
            this.boundedPlacementConstraints = boundedPlacementConstraints;
        }

        /**
         * Gets the value of the name property.
         * 
         * @return
         *     possible object is
         *     {@link String }
         *     
         */
        public String getName() {
            return name;
        }

        /**
         * Sets the value of the name property.
         * 
         * @param value
         *     allowed object is
         *     {@link String }
         *     
         */
        public void setName(String value) {
            this.name = value;
        }

        /**
         * Gets the value of the nodeController property.
         * 
         * @return
         *     possible object is
         *     {@link NodeController }
         *     
         */
        public NodeController getNodeController() {
            return nodeController;
        }

        /**
         * Sets the value of the nodeController property.
         * 
         * @param value
         *     allowed object is
         *     {@link NodeController }
         *     
         */
        public void setNodeController(NodeController value) {
            this.nodeController = value;
        }

        /**
         * Gets the value of the boundedSLAs property.
         * 
         * @return
         *     possible object is
         *     {@link BoundedSLAsType }
         *     
         */
        public BoundedSLAsType getBoundedSLAs() {
            return boundedSLAs;
        }

        /**
         * Sets the value of the boundedSLAs property.
         * 
         * @param value
         *     allowed object is
         *     {@link BoundedSLAsType }
         *     
         */
        public void setBoundedSLAs(BoundedSLAsType value) {
            this.boundedSLAs = value;
        }

        /**
         * Gets the value of the boundedPlacementConstraints property.
         * 
         * @return
         *     possible object is
         *     {@link BoundedPlacementConstraint }
         *     
         */
        public BoundedPlacementConstraint getBoundedPlacementConstraints() {
            return boundedPlacementConstraints;
        }

        /**
         * Sets the value of the boundedPlacementConstraints property.
         * 
         * @param value
         *     allowed object is
         *     {@link BoundedPlacementConstraint }
         *     
         */
        public void setBoundedPlacementConstraints(BoundedPlacementConstraint value) {
            this.boundedPlacementConstraints = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof ServerGroupType.ServerGroup) {
                final ServerGroupType.ServerGroup copy = ((ServerGroupType.ServerGroup) draftCopy);
                if (this.name!= null) {
                    String sourceName;
                    sourceName = this.getName();
                    String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                    copy.setName(copyName);
                } else {
                    copy.name = null;
                }
                if (this.nodeController!= null) {
                    NodeController sourceNodeController;
                    sourceNodeController = this.getNodeController();
                    NodeController copyNodeController = ((NodeController) strategy.copy(LocatorUtils.property(locator, "nodeController", sourceNodeController), sourceNodeController));
                    copy.setNodeController(copyNodeController);
                } else {
                    copy.nodeController = null;
                }
                if (this.boundedSLAs!= null) {
                    BoundedSLAsType sourceBoundedSLAs;
                    sourceBoundedSLAs = this.getBoundedSLAs();
                    BoundedSLAsType copyBoundedSLAs = ((BoundedSLAsType) strategy.copy(LocatorUtils.property(locator, "boundedSLAs", sourceBoundedSLAs), sourceBoundedSLAs));
                    copy.setBoundedSLAs(copyBoundedSLAs);
                } else {
                    copy.boundedSLAs = null;
                }
                if (this.boundedPlacementConstraints!= null) {
                    BoundedPlacementConstraint sourceBoundedPlacementConstraints;
                    sourceBoundedPlacementConstraints = this.getBoundedPlacementConstraints();
                    BoundedPlacementConstraint copyBoundedPlacementConstraints = ((BoundedPlacementConstraint) strategy.copy(LocatorUtils.property(locator, "boundedPlacementConstraints", sourceBoundedPlacementConstraints), sourceBoundedPlacementConstraints));
                    copy.setBoundedPlacementConstraints(copyBoundedPlacementConstraints);
                } else {
                    copy.boundedPlacementConstraints = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new ServerGroupType.ServerGroup();
        }

    }

}
