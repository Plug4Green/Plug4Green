//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.constraints.optimizerconstraints;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for SecurityConstraintsType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SecurityConstraintsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="DedicatedServer" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;boolean"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *         &lt;element name="SecureAccessPossibility" minOccurs="0"&gt;
 *           &lt;complexType&gt;
 *             &lt;simpleContent&gt;
 *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;boolean"&gt;
 *                 &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
 *               &lt;/extension&gt;
 *             &lt;/simpleContent&gt;
 *           &lt;/complexType&gt;
 *         &lt;/element&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SecurityConstraintsType", propOrder = {
    "dedicatedServer",
    "secureAccessPossibility"
})
public class SecurityConstraintsType implements Cloneable, Visitable, CopyTo
{

    @XmlElement(name = "DedicatedServer")
    protected SecurityConstraintsType.DedicatedServer dedicatedServer;
    @XmlElement(name = "SecureAccessPossibility")
    protected SecurityConstraintsType.SecureAccessPossibility secureAccessPossibility;

    /**
     * Default no-arg constructor
     * 
     */
    public SecurityConstraintsType() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public SecurityConstraintsType(final SecurityConstraintsType.DedicatedServer dedicatedServer, final SecurityConstraintsType.SecureAccessPossibility secureAccessPossibility) {
        this.dedicatedServer = dedicatedServer;
        this.secureAccessPossibility = secureAccessPossibility;
    }

    /**
     * Gets the value of the dedicatedServer property.
     * 
     * @return
     *     possible object is
     *     {@link SecurityConstraintsType.DedicatedServer }
     *     
     */
    public SecurityConstraintsType.DedicatedServer getDedicatedServer() {
        return dedicatedServer;
    }

    /**
     * Sets the value of the dedicatedServer property.
     * 
     * @param value
     *     allowed object is
     *     {@link SecurityConstraintsType.DedicatedServer }
     *     
     */
    public void setDedicatedServer(SecurityConstraintsType.DedicatedServer value) {
        this.dedicatedServer = value;
    }

    /**
     * Gets the value of the secureAccessPossibility property.
     * 
     * @return
     *     possible object is
     *     {@link SecurityConstraintsType.SecureAccessPossibility }
     *     
     */
    public SecurityConstraintsType.SecureAccessPossibility getSecureAccessPossibility() {
        return secureAccessPossibility;
    }

    /**
     * Sets the value of the secureAccessPossibility property.
     * 
     * @param value
     *     allowed object is
     *     {@link SecurityConstraintsType.SecureAccessPossibility }
     *     
     */
    public void setSecureAccessPossibility(SecurityConstraintsType.SecureAccessPossibility value) {
        this.secureAccessPossibility = value;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SecurityConstraintsType) {
            final SecurityConstraintsType copy = ((SecurityConstraintsType) draftCopy);
            if (this.dedicatedServer!= null) {
                SecurityConstraintsType.DedicatedServer sourceDedicatedServer;
                sourceDedicatedServer = this.getDedicatedServer();
                SecurityConstraintsType.DedicatedServer copyDedicatedServer = ((SecurityConstraintsType.DedicatedServer) strategy.copy(LocatorUtils.property(locator, "dedicatedServer", sourceDedicatedServer), sourceDedicatedServer));
                copy.setDedicatedServer(copyDedicatedServer);
            } else {
                copy.dedicatedServer = null;
            }
            if (this.secureAccessPossibility!= null) {
                SecurityConstraintsType.SecureAccessPossibility sourceSecureAccessPossibility;
                sourceSecureAccessPossibility = this.getSecureAccessPossibility();
                SecurityConstraintsType.SecureAccessPossibility copySecureAccessPossibility = ((SecurityConstraintsType.SecureAccessPossibility) strategy.copy(LocatorUtils.property(locator, "secureAccessPossibility", sourceSecureAccessPossibility), sourceSecureAccessPossibility));
                copy.setSecureAccessPossibility(copySecureAccessPossibility);
            } else {
                copy.secureAccessPossibility = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SecurityConstraintsType();
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;boolean"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class DedicatedServer implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected boolean value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public DedicatedServer() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public DedicatedServer(final boolean value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public boolean isValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(boolean value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SecurityConstraintsType.DedicatedServer) {
                final SecurityConstraintsType.DedicatedServer copy = ((SecurityConstraintsType.DedicatedServer) draftCopy);
                boolean sourceValue;
                sourceValue = (true?this.isValue():false);
                boolean copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SecurityConstraintsType.DedicatedServer();
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType&gt;
     *   &lt;simpleContent&gt;
     *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;boolean"&gt;
     *       &lt;attribute name="priority" type="{http://www.w3.org/2001/XMLSchema}int" default="1" /&gt;
     *     &lt;/extension&gt;
     *   &lt;/simpleContent&gt;
     * &lt;/complexType&gt;
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "value"
    })
    public static class SecureAccessPossibility implements Cloneable, Visitable, CopyTo
    {

        @XmlValue
        protected boolean value;
        @XmlAttribute(name = "priority")
        protected Integer priority;

        /**
         * Default no-arg constructor
         * 
         */
        public SecureAccessPossibility() {
            super();
        }

        /**
         * Fully-initialising value constructor
         * 
         */
        public SecureAccessPossibility(final boolean value, final Integer priority) {
            this.value = value;
            this.priority = priority;
        }

        /**
         * Gets the value of the value property.
         * 
         */
        public boolean isValue() {
            return value;
        }

        /**
         * Sets the value of the value property.
         * 
         */
        public void setValue(boolean value) {
            this.value = value;
        }

        /**
         * Gets the value of the priority property.
         * 
         * @return
         *     possible object is
         *     {@link Integer }
         *     
         */
        public int getPriority() {
            if (priority == null) {
                return  1;
            } else {
                return priority;
            }
        }

        /**
         * Sets the value of the priority property.
         * 
         * @param value
         *     allowed object is
         *     {@link Integer }
         *     
         */
        public void setPriority(Integer value) {
            this.priority = value;
        }

        public void accept(Visitor aVisitor) {
            aVisitor.visit(this);
        }

        public Object clone() {
            return copyTo(createNewInstance());
        }

        public Object copyTo(Object target) {
            final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
            return copyTo(null, target, strategy);
        }

        public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
            final Object draftCopy = ((target == null)?createNewInstance():target);
            if (draftCopy instanceof SecurityConstraintsType.SecureAccessPossibility) {
                final SecurityConstraintsType.SecureAccessPossibility copy = ((SecurityConstraintsType.SecureAccessPossibility) draftCopy);
                boolean sourceValue;
                sourceValue = (true?this.isValue():false);
                boolean copyValue = strategy.copy(LocatorUtils.property(locator, "value", sourceValue), sourceValue);
                copy.setValue(copyValue);
                if (this.priority!= null) {
                    int sourcePriority;
                    sourcePriority = ((this.priority!= null)?this.getPriority(): 0);
                    int copyPriority = strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority);
                    copy.setPriority(copyPriority);
                } else {
                    copy.priority = null;
                }
            }
            return draftCopy;
        }

        public Object createNewInstance() {
            return new SecurityConstraintsType.SecureAccessPossibility();
        }

    }

}
