//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//

package f4g.schemas.java.actions;

import org.joda.time.DateTime;

public abstract class AbstractBaseAction implements Cloneable /* , CopyTo */
{
    protected ActionId id;
    protected Boolean forwarded;
    protected DateTime forwardedAt;

    /**
     * Default no-arg constructor
     * 
     */
    public AbstractBaseAction() {
	super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public AbstractBaseAction(ActionId id, Boolean forwarded, DateTime forwardedAt) {
	this.id = id;
	this.forwarded = forwarded;
	this.forwardedAt = forwardedAt;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return possible object is {@link ActionId }
     * 
     */
    public ActionId getID() {
	return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *            allowed object is {@link ActionId }
     * 
     */
    public void setID(ActionId value) {
	this.id = value;
    }

    /**
     * Gets the value of the forwarded property.
     * 
     * @return possible object is {@link Boolean }
     * 
     */
    public Boolean isForwarded() {
	return forwarded;
    }

    /**
     * Sets the value of the forwarded property.
     * 
     * @param value
     *            allowed object is {@link Boolean }
     * 
     */
    public void setForwarded(Boolean value) {
	this.forwarded = value;
    }

    /**
     * Gets the value of the forwardedAt property.
     * 
     * @return possible object is {@link DateTime }
     * 
     */
    public DateTime getForwardedAt() {
	return forwardedAt;
    }

    /**
     * Sets the value of the forwardedAt property.
     * 
     * @param value
     *            allowed object is {@link DateTime }
     * 
     */
    public void setForwardedAt(DateTime value) {
	this.forwardedAt = value;
    }

    /*
     * public Object clone() { return copyTo(createNewInstance()); }
     * 
     * public Object copyTo(Object target) { final CopyStrategy strategy =
     * JAXBCopyStrategy.INSTANCE; return copyTo(null, target, strategy); }
     * 
     * public Object copyTo(ObjectLocator locator, Object target, CopyStrategy
     * strategy) { if (null == target) { throw new IllegalArgumentException(
     * "Target argument must not be null for abstract copyable classes."); } if
     * (target instanceof AbstractBaseAction) { final AbstractBaseAction copy =
     * ((AbstractBaseAction) target); if (this.id!= null) { String sourceID;
     * sourceID = this.getID(); String copyID = ((String)
     * strategy.copy(LocatorUtils.property(locator, "id", sourceID), sourceID));
     * copy.setID(copyID); } else { copy.id = null; } if (this.frameworkName!=
     * null) { String sourceFrameworkName; sourceFrameworkName =
     * this.getFrameworkName(); String copyFrameworkName = ((String)
     * strategy.copy(LocatorUtils.property(locator, "frameworkName",
     * sourceFrameworkName), sourceFrameworkName));
     * copy.setFrameworkName(copyFrameworkName); } else { copy.frameworkName =
     * null; } if (this.forwarded!= null) { Boolean sourceForwarded;
     * sourceForwarded = this.isForwarded(); Boolean copyForwarded = ((Boolean)
     * strategy.copy(LocatorUtils.property(locator, "forwarded",
     * sourceForwarded), sourceForwarded)); copy.setForwarded(copyForwarded); }
     * else { copy.forwarded = null; } if (this.forwardedAt!= null) {
     * XMLGregorianCalendar sourceForwardedAt; sourceForwardedAt =
     * this.getForwardedAt(); XMLGregorianCalendar copyForwardedAt =
     * ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator,
     * "forwardedAt", sourceForwardedAt), sourceForwardedAt));
     * copy.setForwardedAt(copyForwardedAt); } else { copy.forwardedAt = null; }
     * } return target; }
     */
}
