//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//

package f4g.schemas.java.actions;

import org.joda.time.DateTime;

import f4g.schemas.java.metamodel.ServerName;
import f4g.schemas.java.metamodel.VirtualMachineName;

public class LiveMigrateVMAction extends AbstractBaseAction
	implements Cloneable /* , CopyTo */
{

    protected VirtualMachineName virtualMachineId;
    protected ServerName srcServer;
    protected ServerName dstServer;

    /**
     * Fully-initialising value constructor
     * 
     */
    public LiveMigrateVMAction(ActionId id, Boolean forwarded, DateTime forwardedAt, VirtualMachineName virtualMachine,
	    ServerName srcServer, String dstServer) {
	super(id, forwarded, forwardedAt);
	this.virtualMachineId = virtualMachine;
	this.srcServer = srcServer;
	this.srcServer = srcServer;
    }

    /**
     * Gets the value of VirtualMachineName.
     * 
     * @return possible object is {@link ActionId }
     * 
     */
    public VirtualMachineName getVirtualMachine() {
	return virtualMachineId;
    }

    /**
     * Sets the value of the virtualMachineName.
     * 
     * @param value
     *            allowed object is {@link VirtualMachineName }
     * 
     */
    public void setVirtualMachine(VirtualMachineName value) {
	this.virtualMachineId = value;
    }

    /**
     * Gets the value of sourceServerName.
     * 
     * @return possible object is {@link ServerName }
     * 
     */
    public ServerName getSourceServer() {
	return srcServer;
    }

    /**
     * Sets the value of sourceServerName
     * 
     * @param value
     *            allowed object is {@link ServerName }
     * 
     */
    public void setSourceServer(ServerName value) {
	this.srcServer = value;
    }

    /**
     * Gets the value of DestServerName
     * 
     * @return possible object is {@link ServerName }
     * 
     */
    public ServerName getDestServer() {
	return dstServer;
    }

    /**
     * Sets the value of DestServerName.
     * 
     * @param value
     *            allowed object is {@link ServerName }
     * 
     */
    public void setDestServer(ServerName value) {
	this.dstServer = value;
    }

    /*
     * public Object clone() { return copyTo(createNewInstance()); }
     * 
     * public Object copyTo(Object target) { final CopyStrategy strategy =
     * JAXBCopyStrategy.INSTANCE; return copyTo(null, target, strategy); }
     * 
     * public Object copyTo(ObjectLocator locator, Object target, CopyStrategy
     * strategy) { final Object draftCopy = ((target ==
     * null)?createNewInstance():target); super.copyTo(locator, draftCopy,
     * strategy); if (draftCopy instanceof LiveMigrateVMAction) { final
     * LiveMigrateVMAction copy = ((LiveMigrateVMAction) draftCopy); if
     * (this.virtualMachine!= null) { String sourceVirtualMachine;
     * sourceVirtualMachine = this.getVirtualMachine(); String
     * copyVirtualMachine = ((String)
     * strategy.copy(LocatorUtils.property(locator, "virtualMachine",
     * sourceVirtualMachine), sourceVirtualMachine));
     * copy.setVirtualMachine(copyVirtualMachine); } else { copy.virtualMachine
     * = null; } if (this.sourceNodeController!= null) { String
     * sourceSourceNodeController; sourceSourceNodeController =
     * this.getSourceNodeController(); String copySourceNodeController =
     * ((String) strategy.copy(LocatorUtils.property(locator,
     * "sourceNodeController", sourceSourceNodeController),
     * sourceSourceNodeController));
     * copy.setSourceNodeController(copySourceNodeController); } else {
     * copy.sourceNodeController = null; } if (this.destNodeController!= null) {
     * String sourceDestNodeController; sourceDestNodeController =
     * this.getDestNodeController(); String copyDestNodeController = ((String)
     * strategy.copy(LocatorUtils.property(locator, "destNodeController",
     * sourceDestNodeController), sourceDestNodeController));
     * copy.setDestNodeController(copyDestNodeController); } else {
     * copy.destNodeController = null; } } return draftCopy; }
     * 
     * public Object createNewInstance() { return new LiveMigrateVMAction(); }
     */

}
