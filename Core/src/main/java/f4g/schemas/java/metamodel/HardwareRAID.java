//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for HardwareRAID complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="HardwareRAID"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{f4g/schemas/java/MetaModel}RAID"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}Cache" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "HardwareRAID", propOrder = {
    "cache"
})
public class HardwareRAID
    extends RAID
    implements Cloneable, Visitable, CopyTo
{

    @XmlElement(name = "Cache", namespace = "f4g/schemas/java/MetaModel")
    protected List<Cache> cache;

    /**
     * Default no-arg constructor
     * 
     */
    public HardwareRAID() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public HardwareRAID(final RAIDLevel level, final Power computedPower, final List<SolidStateDisk> solidStateDisk, final List<HardDisk> hardDisk, final String id, final QName jaxbElementName, final List<Cache> cache) {
        super(level, computedPower, solidStateDisk, hardDisk, id, jaxbElementName);
        this.cache = cache;
    }

    /**
     * Gets the value of the cache property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cache property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCache().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Cache }
     * 
     * 
     */
    public List<Cache> getCache() {
        if (cache == null) {
            cache = new ArrayList<Cache>();
        }
        return this.cache;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof HardwareRAID) {
            final HardwareRAID copy = ((HardwareRAID) draftCopy);
            if ((this.cache!= null)&&(!this.cache.isEmpty())) {
                List<Cache> sourceCache;
                sourceCache = (((this.cache!= null)&&(!this.cache.isEmpty()))?this.getCache():null);
                @SuppressWarnings("unchecked")
                List<Cache> copyCache = ((List<Cache> ) strategy.copy(LocatorUtils.property(locator, "cache", sourceCache), sourceCache));
                copy.cache = null;
                if (copyCache!= null) {
                    List<Cache> uniqueCachel = copy.getCache();
                    uniqueCachel.addAll(copyCache);
                }
            } else {
                copy.cache = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new HardwareRAID();
    }

}
