//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Enclosure complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Enclosure"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="powerIdle" type="{f4g/schemas/java/MetaModel}Power"/&gt;
 *         &lt;element name="powerMax" type="{f4g/schemas/java/MetaModel}Power"/&gt;
 *         &lt;element name="frameworkID" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="computedPower" type="{f4g/schemas/java/MetaModel}Power" minOccurs="0"/&gt;
 *         &lt;element name="measuredPower" type="{f4g/schemas/java/MetaModel}Power" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}BladeServer" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}EthernetNIC" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}FiberchannelNIC" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}PSU" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}Fan" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}WaterCooler" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="frameworkRef" type="{http://www.w3.org/2001/XMLSchema}IDREF" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Enclosure", propOrder = {
    "powerIdle",
    "powerMax",
    "frameworkID",
    "computedPower",
    "measuredPower",
    "bladeServer",
    "ethernetNIC",
    "fiberchannelNIC",
    "psu",
    "fan",
    "waterCooler"
})
public class Enclosure implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Power powerIdle;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Power powerMax;
    @XmlElement(required = true)
    protected String frameworkID;
    @XmlSchemaType(name = "double")
    protected Power computedPower;
    @XmlSchemaType(name = "double")
    protected Power measuredPower;
    @XmlElement(name = "BladeServer", namespace = "f4g/schemas/java/MetaModel")
    protected List<BladeServer> bladeServer;
    @XmlElement(name = "EthernetNIC", namespace = "f4g/schemas/java/MetaModel")
    protected List<NIC> ethernetNIC;
    @XmlElement(name = "FiberchannelNIC", namespace = "f4g/schemas/java/MetaModel")
    protected List<NIC> fiberchannelNIC;
    @XmlElement(name = "PSU", namespace = "f4g/schemas/java/MetaModel")
    protected List<PSU> psu;
    @XmlElement(name = "Fan", namespace = "f4g/schemas/java/MetaModel")
    protected List<Fan> fan;
    @XmlElement(name = "WaterCooler", namespace = "f4g/schemas/java/MetaModel")
    protected List<WaterCooler> waterCooler;
    @XmlAttribute(name = "frameworkRef")
    @XmlIDREF
    @XmlSchemaType(name = "IDREF")
    protected Object frameworkRef;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public Enclosure() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Enclosure(final Power powerIdle, final Power powerMax, final String frameworkID, final Power computedPower, final Power measuredPower, final List<BladeServer> bladeServer, final List<NIC> ethernetNIC, final List<NIC> fiberchannelNIC, final List<PSU> psu, final List<Fan> fan, final List<WaterCooler> waterCooler, final Object frameworkRef, final QName jaxbElementName) {
        this.powerIdle = powerIdle;
        this.powerMax = powerMax;
        this.frameworkID = frameworkID;
        this.computedPower = computedPower;
        this.measuredPower = measuredPower;
        this.bladeServer = bladeServer;
        this.ethernetNIC = ethernetNIC;
        this.fiberchannelNIC = fiberchannelNIC;
        this.psu = psu;
        this.fan = fan;
        this.waterCooler = waterCooler;
        this.frameworkRef = frameworkRef;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the powerIdle property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getPowerIdle() {
        return powerIdle;
    }

    /**
     * Sets the value of the powerIdle property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setPowerIdle(Power value) {
        this.powerIdle = value;
    }

    /**
     * Gets the value of the powerMax property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getPowerMax() {
        return powerMax;
    }

    /**
     * Sets the value of the powerMax property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setPowerMax(Power value) {
        this.powerMax = value;
    }

    /**
     * Gets the value of the frameworkID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFrameworkID() {
        return frameworkID;
    }

    /**
     * Sets the value of the frameworkID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFrameworkID(String value) {
        this.frameworkID = value;
    }

    /**
     * Gets the value of the computedPower property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getComputedPower() {
        return computedPower;
    }

    /**
     * Sets the value of the computedPower property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setComputedPower(Power value) {
        this.computedPower = value;
    }

    /**
     * Gets the value of the measuredPower property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getMeasuredPower() {
        return measuredPower;
    }

    /**
     * Sets the value of the measuredPower property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setMeasuredPower(Power value) {
        this.measuredPower = value;
    }

    /**
     * Gets the value of the bladeServer property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the bladeServer property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBladeServer().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link BladeServer }
     * 
     * 
     */
    public List<BladeServer> getBladeServer() {
        if (bladeServer == null) {
            bladeServer = new ArrayList<BladeServer>();
        }
        return this.bladeServer;
    }

    /**
     * Gets the value of the ethernetNIC property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the ethernetNIC property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEthernetNIC().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NIC }
     * 
     * 
     */
    public List<NIC> getEthernetNIC() {
        if (ethernetNIC == null) {
            ethernetNIC = new ArrayList<NIC>();
        }
        return this.ethernetNIC;
    }

    /**
     * Gets the value of the fiberchannelNIC property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fiberchannelNIC property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFiberchannelNIC().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NIC }
     * 
     * 
     */
    public List<NIC> getFiberchannelNIC() {
        if (fiberchannelNIC == null) {
            fiberchannelNIC = new ArrayList<NIC>();
        }
        return this.fiberchannelNIC;
    }

    /**
     * Gets the value of the psu property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the psu property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPSU().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PSU }
     * 
     * 
     */
    public List<PSU> getPSU() {
        if (psu == null) {
            psu = new ArrayList<PSU>();
        }
        return this.psu;
    }

    /**
     * Gets the value of the fan property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fan property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFan().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Fan }
     * 
     * 
     */
    public List<Fan> getFan() {
        if (fan == null) {
            fan = new ArrayList<Fan>();
        }
        return this.fan;
    }

    /**
     * Gets the value of the waterCooler property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the waterCooler property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getWaterCooler().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link WaterCooler }
     * 
     * 
     */
    public List<WaterCooler> getWaterCooler() {
        if (waterCooler == null) {
            waterCooler = new ArrayList<WaterCooler>();
        }
        return this.waterCooler;
    }

    /**
     * Gets the value of the frameworkRef property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getFrameworkRef() {
        return frameworkRef;
    }

    /**
     * Sets the value of the frameworkRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setFrameworkRef(Object value) {
        this.frameworkRef = value;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Enclosure) {
            final Enclosure copy = ((Enclosure) draftCopy);
            if (this.powerIdle!= null) {
                Power sourcePowerIdle;
                sourcePowerIdle = this.getPowerIdle();
                Power copyPowerIdle = ((Power) strategy.copy(LocatorUtils.property(locator, "powerIdle", sourcePowerIdle), sourcePowerIdle));
                copy.setPowerIdle(copyPowerIdle);
            } else {
                copy.powerIdle = null;
            }
            if (this.powerMax!= null) {
                Power sourcePowerMax;
                sourcePowerMax = this.getPowerMax();
                Power copyPowerMax = ((Power) strategy.copy(LocatorUtils.property(locator, "powerMax", sourcePowerMax), sourcePowerMax));
                copy.setPowerMax(copyPowerMax);
            } else {
                copy.powerMax = null;
            }
            if (this.frameworkID!= null) {
                String sourceFrameworkID;
                sourceFrameworkID = this.getFrameworkID();
                String copyFrameworkID = ((String) strategy.copy(LocatorUtils.property(locator, "frameworkID", sourceFrameworkID), sourceFrameworkID));
                copy.setFrameworkID(copyFrameworkID);
            } else {
                copy.frameworkID = null;
            }
            if (this.computedPower!= null) {
                Power sourceComputedPower;
                sourceComputedPower = this.getComputedPower();
                Power copyComputedPower = ((Power) strategy.copy(LocatorUtils.property(locator, "computedPower", sourceComputedPower), sourceComputedPower));
                copy.setComputedPower(copyComputedPower);
            } else {
                copy.computedPower = null;
            }
            if (this.measuredPower!= null) {
                Power sourceMeasuredPower;
                sourceMeasuredPower = this.getMeasuredPower();
                Power copyMeasuredPower = ((Power) strategy.copy(LocatorUtils.property(locator, "measuredPower", sourceMeasuredPower), sourceMeasuredPower));
                copy.setMeasuredPower(copyMeasuredPower);
            } else {
                copy.measuredPower = null;
            }
            if ((this.bladeServer!= null)&&(!this.bladeServer.isEmpty())) {
                List<BladeServer> sourceBladeServer;
                sourceBladeServer = (((this.bladeServer!= null)&&(!this.bladeServer.isEmpty()))?this.getBladeServer():null);
                @SuppressWarnings("unchecked")
                List<BladeServer> copyBladeServer = ((List<BladeServer> ) strategy.copy(LocatorUtils.property(locator, "bladeServer", sourceBladeServer), sourceBladeServer));
                copy.bladeServer = null;
                if (copyBladeServer!= null) {
                    List<BladeServer> uniqueBladeServerl = copy.getBladeServer();
                    uniqueBladeServerl.addAll(copyBladeServer);
                }
            } else {
                copy.bladeServer = null;
            }
            if ((this.ethernetNIC!= null)&&(!this.ethernetNIC.isEmpty())) {
                List<NIC> sourceEthernetNIC;
                sourceEthernetNIC = (((this.ethernetNIC!= null)&&(!this.ethernetNIC.isEmpty()))?this.getEthernetNIC():null);
                @SuppressWarnings("unchecked")
                List<NIC> copyEthernetNIC = ((List<NIC> ) strategy.copy(LocatorUtils.property(locator, "ethernetNIC", sourceEthernetNIC), sourceEthernetNIC));
                copy.ethernetNIC = null;
                if (copyEthernetNIC!= null) {
                    List<NIC> uniqueEthernetNICl = copy.getEthernetNIC();
                    uniqueEthernetNICl.addAll(copyEthernetNIC);
                }
            } else {
                copy.ethernetNIC = null;
            }
            if ((this.fiberchannelNIC!= null)&&(!this.fiberchannelNIC.isEmpty())) {
                List<NIC> sourceFiberchannelNIC;
                sourceFiberchannelNIC = (((this.fiberchannelNIC!= null)&&(!this.fiberchannelNIC.isEmpty()))?this.getFiberchannelNIC():null);
                @SuppressWarnings("unchecked")
                List<NIC> copyFiberchannelNIC = ((List<NIC> ) strategy.copy(LocatorUtils.property(locator, "fiberchannelNIC", sourceFiberchannelNIC), sourceFiberchannelNIC));
                copy.fiberchannelNIC = null;
                if (copyFiberchannelNIC!= null) {
                    List<NIC> uniqueFiberchannelNICl = copy.getFiberchannelNIC();
                    uniqueFiberchannelNICl.addAll(copyFiberchannelNIC);
                }
            } else {
                copy.fiberchannelNIC = null;
            }
            if ((this.psu!= null)&&(!this.psu.isEmpty())) {
                List<PSU> sourcePSU;
                sourcePSU = (((this.psu!= null)&&(!this.psu.isEmpty()))?this.getPSU():null);
                @SuppressWarnings("unchecked")
                List<PSU> copyPSU = ((List<PSU> ) strategy.copy(LocatorUtils.property(locator, "psu", sourcePSU), sourcePSU));
                copy.psu = null;
                if (copyPSU!= null) {
                    List<PSU> uniquePSUl = copy.getPSU();
                    uniquePSUl.addAll(copyPSU);
                }
            } else {
                copy.psu = null;
            }
            if ((this.fan!= null)&&(!this.fan.isEmpty())) {
                List<Fan> sourceFan;
                sourceFan = (((this.fan!= null)&&(!this.fan.isEmpty()))?this.getFan():null);
                @SuppressWarnings("unchecked")
                List<Fan> copyFan = ((List<Fan> ) strategy.copy(LocatorUtils.property(locator, "fan", sourceFan), sourceFan));
                copy.fan = null;
                if (copyFan!= null) {
                    List<Fan> uniqueFanl = copy.getFan();
                    uniqueFanl.addAll(copyFan);
                }
            } else {
                copy.fan = null;
            }
            if ((this.waterCooler!= null)&&(!this.waterCooler.isEmpty())) {
                List<WaterCooler> sourceWaterCooler;
                sourceWaterCooler = (((this.waterCooler!= null)&&(!this.waterCooler.isEmpty()))?this.getWaterCooler():null);
                @SuppressWarnings("unchecked")
                List<WaterCooler> copyWaterCooler = ((List<WaterCooler> ) strategy.copy(LocatorUtils.property(locator, "waterCooler", sourceWaterCooler), sourceWaterCooler));
                copy.waterCooler = null;
                if (copyWaterCooler!= null) {
                    List<WaterCooler> uniqueWaterCoolerl = copy.getWaterCooler();
                    uniqueWaterCoolerl.addAll(copyWaterCooler);
                }
            } else {
                copy.waterCooler = null;
            }
            if (this.frameworkRef!= null) {
                Object sourceFrameworkRef;
                sourceFrameworkRef = this.getFrameworkRef();
                Object copyFrameworkRef = ((Object) strategy.copy(LocatorUtils.property(locator, "frameworkRef", sourceFrameworkRef), sourceFrameworkRef));
                copy.setFrameworkRef(copyFrameworkRef);
            } else {
                copy.frameworkRef = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Enclosure();
    }

}
