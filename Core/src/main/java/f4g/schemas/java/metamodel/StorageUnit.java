//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for StorageUnit complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="StorageUnit"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="frameworkID" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="storageCapacity" type="{f4g/schemas/java/MetaModel}StorageCapacity"/&gt;
 *         &lt;element name="maxReadRate" type="{f4g/schemas/java/MetaModel}IoRate"/&gt;
 *         &lt;element name="maxWriteRate" type="{f4g/schemas/java/MetaModel}IoRate"/&gt;
 *         &lt;element name="readRate" type="{f4g/schemas/java/MetaModel}IoRate" minOccurs="0"/&gt;
 *         &lt;element name="writeRate" type="{f4g/schemas/java/MetaModel}IoRate" minOccurs="0"/&gt;
 *         &lt;element name="powerIdle" type="{f4g/schemas/java/MetaModel}Power"/&gt;
 *         &lt;element name="powerMax" type="{f4g/schemas/java/MetaModel}Power"/&gt;
 *         &lt;element name="computedPower" type="{f4g/schemas/java/MetaModel}Power" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}Cache" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StorageUnit", propOrder = {
    "frameworkID",
    "storageCapacity",
    "maxReadRate",
    "maxWriteRate",
    "readRate",
    "writeRate",
    "powerIdle",
    "powerMax",
    "computedPower",
    "cache"
})
@XmlSeeAlso({
    HardDisk.class,
    SolidStateDisk.class
})
public class StorageUnit implements Cloneable, Named, Visitable, CopyTo
{

    protected String frameworkID;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected StorageCapacity storageCapacity;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected IoRate maxReadRate;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected IoRate maxWriteRate;
    @XmlSchemaType(name = "double")
    protected IoRate readRate;
    @XmlSchemaType(name = "double")
    protected IoRate writeRate;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Power powerIdle;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Power powerMax;
    @XmlSchemaType(name = "double")
    protected Power computedPower;
    @XmlElement(name = "Cache", namespace = "f4g/schemas/java/MetaModel")
    protected List<Cache> cache;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public StorageUnit() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public StorageUnit(final String frameworkID, final StorageCapacity storageCapacity, final IoRate maxReadRate, final IoRate maxWriteRate, final IoRate readRate, final IoRate writeRate, final Power powerIdle, final Power powerMax, final Power computedPower, final List<Cache> cache, final QName jaxbElementName) {
        this.frameworkID = frameworkID;
        this.storageCapacity = storageCapacity;
        this.maxReadRate = maxReadRate;
        this.maxWriteRate = maxWriteRate;
        this.readRate = readRate;
        this.writeRate = writeRate;
        this.powerIdle = powerIdle;
        this.powerMax = powerMax;
        this.computedPower = computedPower;
        this.cache = cache;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the frameworkID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFrameworkID() {
        return frameworkID;
    }

    /**
     * Sets the value of the frameworkID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFrameworkID(String value) {
        this.frameworkID = value;
    }

    /**
     * Gets the value of the storageCapacity property.
     * 
     * @return
     *     possible object is
     *     {@link StorageCapacity }
     *     
     */
    public StorageCapacity getStorageCapacity() {
        return storageCapacity;
    }

    /**
     * Sets the value of the storageCapacity property.
     * 
     * @param value
     *     allowed object is
     *     {@link StorageCapacity }
     *     
     */
    public void setStorageCapacity(StorageCapacity value) {
        this.storageCapacity = value;
    }

    /**
     * Gets the value of the maxReadRate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getMaxReadRate() {
        return maxReadRate;
    }

    /**
     * Sets the value of the maxReadRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setMaxReadRate(IoRate value) {
        this.maxReadRate = value;
    }

    /**
     * Gets the value of the maxWriteRate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getMaxWriteRate() {
        return maxWriteRate;
    }

    /**
     * Sets the value of the maxWriteRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setMaxWriteRate(IoRate value) {
        this.maxWriteRate = value;
    }

    /**
     * Gets the value of the readRate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getReadRate() {
        return readRate;
    }

    /**
     * Sets the value of the readRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setReadRate(IoRate value) {
        this.readRate = value;
    }

    /**
     * Gets the value of the writeRate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getWriteRate() {
        return writeRate;
    }

    /**
     * Sets the value of the writeRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setWriteRate(IoRate value) {
        this.writeRate = value;
    }

    /**
     * Gets the value of the powerIdle property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getPowerIdle() {
        return powerIdle;
    }

    /**
     * Sets the value of the powerIdle property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setPowerIdle(Power value) {
        this.powerIdle = value;
    }

    /**
     * Gets the value of the powerMax property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getPowerMax() {
        return powerMax;
    }

    /**
     * Sets the value of the powerMax property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setPowerMax(Power value) {
        this.powerMax = value;
    }

    /**
     * Gets the value of the computedPower property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getComputedPower() {
        return computedPower;
    }

    /**
     * Sets the value of the computedPower property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setComputedPower(Power value) {
        this.computedPower = value;
    }

    /**
     * Gets the value of the cache property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cache property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCache().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Cache }
     * 
     * 
     */
    public List<Cache> getCache() {
        if (cache == null) {
            cache = new ArrayList<Cache>();
        }
        return this.cache;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof StorageUnit) {
            final StorageUnit copy = ((StorageUnit) draftCopy);
            if (this.frameworkID!= null) {
                String sourceFrameworkID;
                sourceFrameworkID = this.getFrameworkID();
                String copyFrameworkID = ((String) strategy.copy(LocatorUtils.property(locator, "frameworkID", sourceFrameworkID), sourceFrameworkID));
                copy.setFrameworkID(copyFrameworkID);
            } else {
                copy.frameworkID = null;
            }
            if (this.storageCapacity!= null) {
                StorageCapacity sourceStorageCapacity;
                sourceStorageCapacity = this.getStorageCapacity();
                StorageCapacity copyStorageCapacity = ((StorageCapacity) strategy.copy(LocatorUtils.property(locator, "storageCapacity", sourceStorageCapacity), sourceStorageCapacity));
                copy.setStorageCapacity(copyStorageCapacity);
            } else {
                copy.storageCapacity = null;
            }
            if (this.maxReadRate!= null) {
                IoRate sourceMaxReadRate;
                sourceMaxReadRate = this.getMaxReadRate();
                IoRate copyMaxReadRate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "maxReadRate", sourceMaxReadRate), sourceMaxReadRate));
                copy.setMaxReadRate(copyMaxReadRate);
            } else {
                copy.maxReadRate = null;
            }
            if (this.maxWriteRate!= null) {
                IoRate sourceMaxWriteRate;
                sourceMaxWriteRate = this.getMaxWriteRate();
                IoRate copyMaxWriteRate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "maxWriteRate", sourceMaxWriteRate), sourceMaxWriteRate));
                copy.setMaxWriteRate(copyMaxWriteRate);
            } else {
                copy.maxWriteRate = null;
            }
            if (this.readRate!= null) {
                IoRate sourceReadRate;
                sourceReadRate = this.getReadRate();
                IoRate copyReadRate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "readRate", sourceReadRate), sourceReadRate));
                copy.setReadRate(copyReadRate);
            } else {
                copy.readRate = null;
            }
            if (this.writeRate!= null) {
                IoRate sourceWriteRate;
                sourceWriteRate = this.getWriteRate();
                IoRate copyWriteRate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "writeRate", sourceWriteRate), sourceWriteRate));
                copy.setWriteRate(copyWriteRate);
            } else {
                copy.writeRate = null;
            }
            if (this.powerIdle!= null) {
                Power sourcePowerIdle;
                sourcePowerIdle = this.getPowerIdle();
                Power copyPowerIdle = ((Power) strategy.copy(LocatorUtils.property(locator, "powerIdle", sourcePowerIdle), sourcePowerIdle));
                copy.setPowerIdle(copyPowerIdle);
            } else {
                copy.powerIdle = null;
            }
            if (this.powerMax!= null) {
                Power sourcePowerMax;
                sourcePowerMax = this.getPowerMax();
                Power copyPowerMax = ((Power) strategy.copy(LocatorUtils.property(locator, "powerMax", sourcePowerMax), sourcePowerMax));
                copy.setPowerMax(copyPowerMax);
            } else {
                copy.powerMax = null;
            }
            if (this.computedPower!= null) {
                Power sourceComputedPower;
                sourceComputedPower = this.getComputedPower();
                Power copyComputedPower = ((Power) strategy.copy(LocatorUtils.property(locator, "computedPower", sourceComputedPower), sourceComputedPower));
                copy.setComputedPower(copyComputedPower);
            } else {
                copy.computedPower = null;
            }
            if ((this.cache!= null)&&(!this.cache.isEmpty())) {
                List<Cache> sourceCache;
                sourceCache = (((this.cache!= null)&&(!this.cache.isEmpty()))?this.getCache():null);
                @SuppressWarnings("unchecked")
                List<Cache> copyCache = ((List<Cache> ) strategy.copy(LocatorUtils.property(locator, "cache", sourceCache), sourceCache));
                copy.cache = null;
                if (copyCache!= null) {
                    List<Cache> uniqueCachel = copy.getCache();
                    uniqueCachel.addAll(copyCache);
                }
            } else {
                copy.cache = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new StorageUnit();
    }

}
