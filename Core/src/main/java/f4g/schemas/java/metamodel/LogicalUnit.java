//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for LogicalUnit complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LogicalUnit"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="lunId" type="{http://www.w3.org/2001/XMLSchema}ID"/&gt;
 *         &lt;element name="readRate" type="{f4g/schemas/java/MetaModel}IoRate"/&gt;
 *         &lt;element name="writeRate" type="{f4g/schemas/java/MetaModel}IoRate"/&gt;
 *         &lt;element name="maxReadRate" type="{f4g/schemas/java/MetaModel}IoRate"/&gt;
 *         &lt;element name="maxWriteRate" type="{f4g/schemas/java/MetaModel}IoRate"/&gt;
 *         &lt;element name="numOfReadOP" type="{f4g/schemas/java/MetaModel}OP"/&gt;
 *         &lt;element name="numOfWriteOP" type="{f4g/schemas/java/MetaModel}OP"/&gt;
 *         &lt;element name="stripSize" type="{f4g/schemas/java/MetaModel}StripSize"/&gt;
 *         &lt;element name="computedPower" type="{f4g/schemas/java/MetaModel}Power" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}RAID"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}RAIDDisk" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}SolidStateDisk" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}HardDisk" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LogicalUnit", propOrder = {
    "lunId",
    "readRate",
    "writeRate",
    "maxReadRate",
    "maxWriteRate",
    "numOfReadOP",
    "numOfWriteOP",
    "stripSize",
    "computedPower",
    "raid",
    "raidDisk",
    "solidStateDisk",
    "hardDisk"
})
public class LogicalUnit implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String lunId;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected IoRate readRate;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected IoRate writeRate;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected IoRate maxReadRate;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected IoRate maxWriteRate;
    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected OP numOfReadOP;
    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected OP numOfWriteOP;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected StripSize stripSize;
    @XmlSchemaType(name = "double")
    protected Power computedPower;
    @XmlElement(name = "RAID", namespace = "f4g/schemas/java/MetaModel", required = true)
    protected RAID raid;
    @XmlElement(name = "RAIDDisk", namespace = "f4g/schemas/java/MetaModel")
    protected RAIDDisk raidDisk;
    @XmlElement(name = "SolidStateDisk", namespace = "f4g/schemas/java/MetaModel")
    protected List<SolidStateDisk> solidStateDisk;
    @XmlElement(name = "HardDisk", namespace = "f4g/schemas/java/MetaModel")
    protected List<HardDisk> hardDisk;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public LogicalUnit() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public LogicalUnit(final String lunId, final IoRate readRate, final IoRate writeRate, final IoRate maxReadRate, final IoRate maxWriteRate, final OP numOfReadOP, final OP numOfWriteOP, final StripSize stripSize, final Power computedPower, final RAID raid, final RAIDDisk raidDisk, final List<SolidStateDisk> solidStateDisk, final List<HardDisk> hardDisk, final QName jaxbElementName) {
        this.lunId = lunId;
        this.readRate = readRate;
        this.writeRate = writeRate;
        this.maxReadRate = maxReadRate;
        this.maxWriteRate = maxWriteRate;
        this.numOfReadOP = numOfReadOP;
        this.numOfWriteOP = numOfWriteOP;
        this.stripSize = stripSize;
        this.computedPower = computedPower;
        this.raid = raid;
        this.raidDisk = raidDisk;
        this.solidStateDisk = solidStateDisk;
        this.hardDisk = hardDisk;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the lunId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLunId() {
        return lunId;
    }

    /**
     * Sets the value of the lunId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLunId(String value) {
        this.lunId = value;
    }

    /**
     * Gets the value of the readRate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getReadRate() {
        return readRate;
    }

    /**
     * Sets the value of the readRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setReadRate(IoRate value) {
        this.readRate = value;
    }

    /**
     * Gets the value of the writeRate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getWriteRate() {
        return writeRate;
    }

    /**
     * Sets the value of the writeRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setWriteRate(IoRate value) {
        this.writeRate = value;
    }

    /**
     * Gets the value of the maxReadRate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getMaxReadRate() {
        return maxReadRate;
    }

    /**
     * Sets the value of the maxReadRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setMaxReadRate(IoRate value) {
        this.maxReadRate = value;
    }

    /**
     * Gets the value of the maxWriteRate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getMaxWriteRate() {
        return maxWriteRate;
    }

    /**
     * Sets the value of the maxWriteRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setMaxWriteRate(IoRate value) {
        this.maxWriteRate = value;
    }

    /**
     * Gets the value of the numOfReadOP property.
     * 
     * @return
     *     possible object is
     *     {@link OP }
     *     
     */
    public OP getNumOfReadOP() {
        return numOfReadOP;
    }

    /**
     * Sets the value of the numOfReadOP property.
     * 
     * @param value
     *     allowed object is
     *     {@link OP }
     *     
     */
    public void setNumOfReadOP(OP value) {
        this.numOfReadOP = value;
    }

    /**
     * Gets the value of the numOfWriteOP property.
     * 
     * @return
     *     possible object is
     *     {@link OP }
     *     
     */
    public OP getNumOfWriteOP() {
        return numOfWriteOP;
    }

    /**
     * Sets the value of the numOfWriteOP property.
     * 
     * @param value
     *     allowed object is
     *     {@link OP }
     *     
     */
    public void setNumOfWriteOP(OP value) {
        this.numOfWriteOP = value;
    }

    /**
     * Gets the value of the stripSize property.
     * 
     * @return
     *     possible object is
     *     {@link StripSize }
     *     
     */
    public StripSize getStripSize() {
        return stripSize;
    }

    /**
     * Sets the value of the stripSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link StripSize }
     *     
     */
    public void setStripSize(StripSize value) {
        this.stripSize = value;
    }

    /**
     * Gets the value of the computedPower property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getComputedPower() {
        return computedPower;
    }

    /**
     * Sets the value of the computedPower property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setComputedPower(Power value) {
        this.computedPower = value;
    }

    /**
     * Gets the value of the raid property.
     * 
     * @return
     *     possible object is
     *     {@link RAID }
     *     
     */
    public RAID getRAID() {
        return raid;
    }

    /**
     * Sets the value of the raid property.
     * 
     * @param value
     *     allowed object is
     *     {@link RAID }
     *     
     */
    public void setRAID(RAID value) {
        this.raid = value;
    }

    /**
     * Gets the value of the raidDisk property.
     * 
     * @return
     *     possible object is
     *     {@link RAIDDisk }
     *     
     */
    public RAIDDisk getRAIDDisk() {
        return raidDisk;
    }

    /**
     * Sets the value of the raidDisk property.
     * 
     * @param value
     *     allowed object is
     *     {@link RAIDDisk }
     *     
     */
    public void setRAIDDisk(RAIDDisk value) {
        this.raidDisk = value;
    }

    /**
     * Gets the value of the solidStateDisk property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the solidStateDisk property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSolidStateDisk().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SolidStateDisk }
     * 
     * 
     */
    public List<SolidStateDisk> getSolidStateDisk() {
        if (solidStateDisk == null) {
            solidStateDisk = new ArrayList<SolidStateDisk>();
        }
        return this.solidStateDisk;
    }

    /**
     * Gets the value of the hardDisk property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the hardDisk property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getHardDisk().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link HardDisk }
     * 
     * 
     */
    public List<HardDisk> getHardDisk() {
        if (hardDisk == null) {
            hardDisk = new ArrayList<HardDisk>();
        }
        return this.hardDisk;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof LogicalUnit) {
            final LogicalUnit copy = ((LogicalUnit) draftCopy);
            if (this.lunId!= null) {
                String sourceLunId;
                sourceLunId = this.getLunId();
                String copyLunId = ((String) strategy.copy(LocatorUtils.property(locator, "lunId", sourceLunId), sourceLunId));
                copy.setLunId(copyLunId);
            } else {
                copy.lunId = null;
            }
            if (this.readRate!= null) {
                IoRate sourceReadRate;
                sourceReadRate = this.getReadRate();
                IoRate copyReadRate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "readRate", sourceReadRate), sourceReadRate));
                copy.setReadRate(copyReadRate);
            } else {
                copy.readRate = null;
            }
            if (this.writeRate!= null) {
                IoRate sourceWriteRate;
                sourceWriteRate = this.getWriteRate();
                IoRate copyWriteRate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "writeRate", sourceWriteRate), sourceWriteRate));
                copy.setWriteRate(copyWriteRate);
            } else {
                copy.writeRate = null;
            }
            if (this.maxReadRate!= null) {
                IoRate sourceMaxReadRate;
                sourceMaxReadRate = this.getMaxReadRate();
                IoRate copyMaxReadRate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "maxReadRate", sourceMaxReadRate), sourceMaxReadRate));
                copy.setMaxReadRate(copyMaxReadRate);
            } else {
                copy.maxReadRate = null;
            }
            if (this.maxWriteRate!= null) {
                IoRate sourceMaxWriteRate;
                sourceMaxWriteRate = this.getMaxWriteRate();
                IoRate copyMaxWriteRate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "maxWriteRate", sourceMaxWriteRate), sourceMaxWriteRate));
                copy.setMaxWriteRate(copyMaxWriteRate);
            } else {
                copy.maxWriteRate = null;
            }
            if (this.numOfReadOP!= null) {
                OP sourceNumOfReadOP;
                sourceNumOfReadOP = this.getNumOfReadOP();
                OP copyNumOfReadOP = ((OP) strategy.copy(LocatorUtils.property(locator, "numOfReadOP", sourceNumOfReadOP), sourceNumOfReadOP));
                copy.setNumOfReadOP(copyNumOfReadOP);
            } else {
                copy.numOfReadOP = null;
            }
            if (this.numOfWriteOP!= null) {
                OP sourceNumOfWriteOP;
                sourceNumOfWriteOP = this.getNumOfWriteOP();
                OP copyNumOfWriteOP = ((OP) strategy.copy(LocatorUtils.property(locator, "numOfWriteOP", sourceNumOfWriteOP), sourceNumOfWriteOP));
                copy.setNumOfWriteOP(copyNumOfWriteOP);
            } else {
                copy.numOfWriteOP = null;
            }
            if (this.stripSize!= null) {
                StripSize sourceStripSize;
                sourceStripSize = this.getStripSize();
                StripSize copyStripSize = ((StripSize) strategy.copy(LocatorUtils.property(locator, "stripSize", sourceStripSize), sourceStripSize));
                copy.setStripSize(copyStripSize);
            } else {
                copy.stripSize = null;
            }
            if (this.computedPower!= null) {
                Power sourceComputedPower;
                sourceComputedPower = this.getComputedPower();
                Power copyComputedPower = ((Power) strategy.copy(LocatorUtils.property(locator, "computedPower", sourceComputedPower), sourceComputedPower));
                copy.setComputedPower(copyComputedPower);
            } else {
                copy.computedPower = null;
            }
            if (this.raid!= null) {
                RAID sourceRAID;
                sourceRAID = this.getRAID();
                RAID copyRAID = ((RAID) strategy.copy(LocatorUtils.property(locator, "raid", sourceRAID), sourceRAID));
                copy.setRAID(copyRAID);
            } else {
                copy.raid = null;
            }
            if (this.raidDisk!= null) {
                RAIDDisk sourceRAIDDisk;
                sourceRAIDDisk = this.getRAIDDisk();
                RAIDDisk copyRAIDDisk = ((RAIDDisk) strategy.copy(LocatorUtils.property(locator, "raidDisk", sourceRAIDDisk), sourceRAIDDisk));
                copy.setRAIDDisk(copyRAIDDisk);
            } else {
                copy.raidDisk = null;
            }
            if ((this.solidStateDisk!= null)&&(!this.solidStateDisk.isEmpty())) {
                List<SolidStateDisk> sourceSolidStateDisk;
                sourceSolidStateDisk = (((this.solidStateDisk!= null)&&(!this.solidStateDisk.isEmpty()))?this.getSolidStateDisk():null);
                @SuppressWarnings("unchecked")
                List<SolidStateDisk> copySolidStateDisk = ((List<SolidStateDisk> ) strategy.copy(LocatorUtils.property(locator, "solidStateDisk", sourceSolidStateDisk), sourceSolidStateDisk));
                copy.solidStateDisk = null;
                if (copySolidStateDisk!= null) {
                    List<SolidStateDisk> uniqueSolidStateDiskl = copy.getSolidStateDisk();
                    uniqueSolidStateDiskl.addAll(copySolidStateDisk);
                }
            } else {
                copy.solidStateDisk = null;
            }
            if ((this.hardDisk!= null)&&(!this.hardDisk.isEmpty())) {
                List<HardDisk> sourceHardDisk;
                sourceHardDisk = (((this.hardDisk!= null)&&(!this.hardDisk.isEmpty()))?this.getHardDisk():null);
                @SuppressWarnings("unchecked")
                List<HardDisk> copyHardDisk = ((List<HardDisk> ) strategy.copy(LocatorUtils.property(locator, "hardDisk", sourceHardDisk), sourceHardDisk));
                copy.hardDisk = null;
                if (copyHardDisk!= null) {
                    List<HardDisk> uniqueHardDiskl = copy.getHardDisk();
                    uniqueHardDiskl.addAll(copyHardDisk);
                }
            } else {
                copy.hardDisk = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new LogicalUnit();
    }

}
