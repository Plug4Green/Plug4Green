//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Flow complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Flow"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="sourceNetworkNodeRef" type="{http://www.w3.org/2001/XMLSchema}IDREF"/&gt;
 *         &lt;element name="destinationNetworkNodeRef" type="{http://www.w3.org/2001/XMLSchema}IDREF"/&gt;
 *         &lt;element name="bandwidth" type="{f4g/schemas/java/MetaModel}Bandwidth"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Flow", propOrder = {
    "sourceNetworkNodeRef",
    "destinationNetworkNodeRef",
    "bandwidth"
})
public class Flow implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlIDREF
    @XmlSchemaType(name = "IDREF")
    protected Object sourceNetworkNodeRef;
    @XmlElement(required = true)
    @XmlIDREF
    @XmlSchemaType(name = "IDREF")
    protected Object destinationNetworkNodeRef;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Bandwidth bandwidth;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public Flow() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Flow(final Object sourceNetworkNodeRef, final Object destinationNetworkNodeRef, final Bandwidth bandwidth, final QName jaxbElementName) {
        this.sourceNetworkNodeRef = sourceNetworkNodeRef;
        this.destinationNetworkNodeRef = destinationNetworkNodeRef;
        this.bandwidth = bandwidth;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the sourceNetworkNodeRef property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getSourceNetworkNodeRef() {
        return sourceNetworkNodeRef;
    }

    /**
     * Sets the value of the sourceNetworkNodeRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setSourceNetworkNodeRef(Object value) {
        this.sourceNetworkNodeRef = value;
    }

    /**
     * Gets the value of the destinationNetworkNodeRef property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getDestinationNetworkNodeRef() {
        return destinationNetworkNodeRef;
    }

    /**
     * Sets the value of the destinationNetworkNodeRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setDestinationNetworkNodeRef(Object value) {
        this.destinationNetworkNodeRef = value;
    }

    /**
     * Gets the value of the bandwidth property.
     * 
     * @return
     *     possible object is
     *     {@link Bandwidth }
     *     
     */
    public Bandwidth getBandwidth() {
        return bandwidth;
    }

    /**
     * Sets the value of the bandwidth property.
     * 
     * @param value
     *     allowed object is
     *     {@link Bandwidth }
     *     
     */
    public void setBandwidth(Bandwidth value) {
        this.bandwidth = value;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Flow) {
            final Flow copy = ((Flow) draftCopy);
            if (this.sourceNetworkNodeRef!= null) {
                Object sourceSourceNetworkNodeRef;
                sourceSourceNetworkNodeRef = this.getSourceNetworkNodeRef();
                Object copySourceNetworkNodeRef = ((Object) strategy.copy(LocatorUtils.property(locator, "sourceNetworkNodeRef", sourceSourceNetworkNodeRef), sourceSourceNetworkNodeRef));
                copy.setSourceNetworkNodeRef(copySourceNetworkNodeRef);
            } else {
                copy.sourceNetworkNodeRef = null;
            }
            if (this.destinationNetworkNodeRef!= null) {
                Object sourceDestinationNetworkNodeRef;
                sourceDestinationNetworkNodeRef = this.getDestinationNetworkNodeRef();
                Object copyDestinationNetworkNodeRef = ((Object) strategy.copy(LocatorUtils.property(locator, "destinationNetworkNodeRef", sourceDestinationNetworkNodeRef), sourceDestinationNetworkNodeRef));
                copy.setDestinationNetworkNodeRef(copyDestinationNetworkNodeRef);
            } else {
                copy.destinationNetworkNodeRef = null;
            }
            if (this.bandwidth!= null) {
                Bandwidth sourceBandwidth;
                sourceBandwidth = this.getBandwidth();
                Bandwidth copyBandwidth = ((Bandwidth) strategy.copy(LocatorUtils.property(locator, "bandwidth", sourceBandwidth), sourceBandwidth));
                copy.setBandwidth(copyBandwidth);
            } else {
                copy.bandwidth = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Flow();
    }

}
