//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Job complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Job"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="numberOfNodes" type="{f4g/schemas/java/MetaModel}NrOfNodes"/&gt;
 *         &lt;element name="propertiesOfNodes" type="{f4g/schemas/java/MetaModel}JobPropOfNodes" maxOccurs="unbounded"/&gt;
 *         &lt;element name="neededMemory" type="{f4g/schemas/java/MetaModel}MemoryUsage"/&gt;
 *         &lt;element name="neededCoresPerNode" type="{f4g/schemas/java/MetaModel}NrOfCores"/&gt;
 *         &lt;element name="neededCPUSpeed" type="{f4g/schemas/java/MetaModel}Frequency"/&gt;
 *         &lt;element name="wallTime" type="{f4g/schemas/java/MetaModel}JobTime"/&gt;
 *         &lt;element name="timeOfSubmission" type="{f4g/schemas/java/MetaModel}JobTime"/&gt;
 *         &lt;element name="timeOfStart" type="{f4g/schemas/java/MetaModel}JobTime"/&gt;
 *         &lt;element name="status" type="{f4g/schemas/java/MetaModel}JobStatus"/&gt;
 *         &lt;element name="priority" type="{f4g/schemas/java/MetaModel}JobPriority"/&gt;
 *         &lt;element name="frameworkID" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="frameworkRef" use="required" type="{http://www.w3.org/2001/XMLSchema}IDREF" /&gt;
 *       &lt;attribute name="Id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Job", propOrder = {
    "numberOfNodes",
    "propertiesOfNodes",
    "neededMemory",
    "neededCoresPerNode",
    "neededCPUSpeed",
    "wallTime",
    "timeOfSubmission",
    "timeOfStart",
    "status",
    "priority",
    "frameworkID"
})
public class Job implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected NrOfNodes numberOfNodes;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected List<JobPropOfNodes> propertiesOfNodes;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected MemoryUsage neededMemory;
    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected NrOfCores neededCoresPerNode;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Frequency neededCPUSpeed;
    @XmlElement(required = true)
    @XmlSchemaType(name = "long")
    protected JobTime wallTime;
    @XmlElement(required = true)
    @XmlSchemaType(name = "long")
    protected JobTime timeOfSubmission;
    @XmlElement(required = true)
    @XmlSchemaType(name = "long")
    protected JobTime timeOfStart;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected JobStatus status;
    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected JobPriority priority;
    @XmlElement(required = true)
    protected String frameworkID;
    @XmlAttribute(name = "frameworkRef", required = true)
    @XmlIDREF
    @XmlSchemaType(name = "IDREF")
    protected Object frameworkRef;
    @XmlAttribute(name = "Id", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public Job() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Job(final NrOfNodes numberOfNodes, final List<JobPropOfNodes> propertiesOfNodes, final MemoryUsage neededMemory, final NrOfCores neededCoresPerNode, final Frequency neededCPUSpeed, final JobTime wallTime, final JobTime timeOfSubmission, final JobTime timeOfStart, final JobStatus status, final JobPriority priority, final String frameworkID, final Object frameworkRef, final String id, final QName jaxbElementName) {
        this.numberOfNodes = numberOfNodes;
        this.propertiesOfNodes = propertiesOfNodes;
        this.neededMemory = neededMemory;
        this.neededCoresPerNode = neededCoresPerNode;
        this.neededCPUSpeed = neededCPUSpeed;
        this.wallTime = wallTime;
        this.timeOfSubmission = timeOfSubmission;
        this.timeOfStart = timeOfStart;
        this.status = status;
        this.priority = priority;
        this.frameworkID = frameworkID;
        this.frameworkRef = frameworkRef;
        this.id = id;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the numberOfNodes property.
     * 
     * @return
     *     possible object is
     *     {@link NrOfNodes }
     *     
     */
    public NrOfNodes getNumberOfNodes() {
        return numberOfNodes;
    }

    /**
     * Sets the value of the numberOfNodes property.
     * 
     * @param value
     *     allowed object is
     *     {@link NrOfNodes }
     *     
     */
    public void setNumberOfNodes(NrOfNodes value) {
        this.numberOfNodes = value;
    }

    /**
     * Gets the value of the propertiesOfNodes property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the propertiesOfNodes property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPropertiesOfNodes().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JobPropOfNodes }
     * 
     * 
     */
    public List<JobPropOfNodes> getPropertiesOfNodes() {
        if (propertiesOfNodes == null) {
            propertiesOfNodes = new ArrayList<JobPropOfNodes>();
        }
        return this.propertiesOfNodes;
    }

    /**
     * Gets the value of the neededMemory property.
     * 
     * @return
     *     possible object is
     *     {@link MemoryUsage }
     *     
     */
    public MemoryUsage getNeededMemory() {
        return neededMemory;
    }

    /**
     * Sets the value of the neededMemory property.
     * 
     * @param value
     *     allowed object is
     *     {@link MemoryUsage }
     *     
     */
    public void setNeededMemory(MemoryUsage value) {
        this.neededMemory = value;
    }

    /**
     * Gets the value of the neededCoresPerNode property.
     * 
     * @return
     *     possible object is
     *     {@link NrOfCores }
     *     
     */
    public NrOfCores getNeededCoresPerNode() {
        return neededCoresPerNode;
    }

    /**
     * Sets the value of the neededCoresPerNode property.
     * 
     * @param value
     *     allowed object is
     *     {@link NrOfCores }
     *     
     */
    public void setNeededCoresPerNode(NrOfCores value) {
        this.neededCoresPerNode = value;
    }

    /**
     * Gets the value of the neededCPUSpeed property.
     * 
     * @return
     *     possible object is
     *     {@link Frequency }
     *     
     */
    public Frequency getNeededCPUSpeed() {
        return neededCPUSpeed;
    }

    /**
     * Sets the value of the neededCPUSpeed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Frequency }
     *     
     */
    public void setNeededCPUSpeed(Frequency value) {
        this.neededCPUSpeed = value;
    }

    /**
     * Gets the value of the wallTime property.
     * 
     * @return
     *     possible object is
     *     {@link JobTime }
     *     
     */
    public JobTime getWallTime() {
        return wallTime;
    }

    /**
     * Sets the value of the wallTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link JobTime }
     *     
     */
    public void setWallTime(JobTime value) {
        this.wallTime = value;
    }

    /**
     * Gets the value of the timeOfSubmission property.
     * 
     * @return
     *     possible object is
     *     {@link JobTime }
     *     
     */
    public JobTime getTimeOfSubmission() {
        return timeOfSubmission;
    }

    /**
     * Sets the value of the timeOfSubmission property.
     * 
     * @param value
     *     allowed object is
     *     {@link JobTime }
     *     
     */
    public void setTimeOfSubmission(JobTime value) {
        this.timeOfSubmission = value;
    }

    /**
     * Gets the value of the timeOfStart property.
     * 
     * @return
     *     possible object is
     *     {@link JobTime }
     *     
     */
    public JobTime getTimeOfStart() {
        return timeOfStart;
    }

    /**
     * Sets the value of the timeOfStart property.
     * 
     * @param value
     *     allowed object is
     *     {@link JobTime }
     *     
     */
    public void setTimeOfStart(JobTime value) {
        this.timeOfStart = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link JobStatus }
     *     
     */
    public JobStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link JobStatus }
     *     
     */
    public void setStatus(JobStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the priority property.
     * 
     * @return
     *     possible object is
     *     {@link JobPriority }
     *     
     */
    public JobPriority getPriority() {
        return priority;
    }

    /**
     * Sets the value of the priority property.
     * 
     * @param value
     *     allowed object is
     *     {@link JobPriority }
     *     
     */
    public void setPriority(JobPriority value) {
        this.priority = value;
    }

    /**
     * Gets the value of the frameworkID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFrameworkID() {
        return frameworkID;
    }

    /**
     * Sets the value of the frameworkID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFrameworkID(String value) {
        this.frameworkID = value;
    }

    /**
     * Gets the value of the frameworkRef property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getFrameworkRef() {
        return frameworkRef;
    }

    /**
     * Sets the value of the frameworkRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setFrameworkRef(Object value) {
        this.frameworkRef = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Job) {
            final Job copy = ((Job) draftCopy);
            if (this.numberOfNodes!= null) {
                NrOfNodes sourceNumberOfNodes;
                sourceNumberOfNodes = this.getNumberOfNodes();
                NrOfNodes copyNumberOfNodes = ((NrOfNodes) strategy.copy(LocatorUtils.property(locator, "numberOfNodes", sourceNumberOfNodes), sourceNumberOfNodes));
                copy.setNumberOfNodes(copyNumberOfNodes);
            } else {
                copy.numberOfNodes = null;
            }
            if ((this.propertiesOfNodes!= null)&&(!this.propertiesOfNodes.isEmpty())) {
                List<JobPropOfNodes> sourcePropertiesOfNodes;
                sourcePropertiesOfNodes = (((this.propertiesOfNodes!= null)&&(!this.propertiesOfNodes.isEmpty()))?this.getPropertiesOfNodes():null);
                @SuppressWarnings("unchecked")
                List<JobPropOfNodes> copyPropertiesOfNodes = ((List<JobPropOfNodes> ) strategy.copy(LocatorUtils.property(locator, "propertiesOfNodes", sourcePropertiesOfNodes), sourcePropertiesOfNodes));
                copy.propertiesOfNodes = null;
                if (copyPropertiesOfNodes!= null) {
                    List<JobPropOfNodes> uniquePropertiesOfNodesl = copy.getPropertiesOfNodes();
                    uniquePropertiesOfNodesl.addAll(copyPropertiesOfNodes);
                }
            } else {
                copy.propertiesOfNodes = null;
            }
            if (this.neededMemory!= null) {
                MemoryUsage sourceNeededMemory;
                sourceNeededMemory = this.getNeededMemory();
                MemoryUsage copyNeededMemory = ((MemoryUsage) strategy.copy(LocatorUtils.property(locator, "neededMemory", sourceNeededMemory), sourceNeededMemory));
                copy.setNeededMemory(copyNeededMemory);
            } else {
                copy.neededMemory = null;
            }
            if (this.neededCoresPerNode!= null) {
                NrOfCores sourceNeededCoresPerNode;
                sourceNeededCoresPerNode = this.getNeededCoresPerNode();
                NrOfCores copyNeededCoresPerNode = ((NrOfCores) strategy.copy(LocatorUtils.property(locator, "neededCoresPerNode", sourceNeededCoresPerNode), sourceNeededCoresPerNode));
                copy.setNeededCoresPerNode(copyNeededCoresPerNode);
            } else {
                copy.neededCoresPerNode = null;
            }
            if (this.neededCPUSpeed!= null) {
                Frequency sourceNeededCPUSpeed;
                sourceNeededCPUSpeed = this.getNeededCPUSpeed();
                Frequency copyNeededCPUSpeed = ((Frequency) strategy.copy(LocatorUtils.property(locator, "neededCPUSpeed", sourceNeededCPUSpeed), sourceNeededCPUSpeed));
                copy.setNeededCPUSpeed(copyNeededCPUSpeed);
            } else {
                copy.neededCPUSpeed = null;
            }
            if (this.wallTime!= null) {
                JobTime sourceWallTime;
                sourceWallTime = this.getWallTime();
                JobTime copyWallTime = ((JobTime) strategy.copy(LocatorUtils.property(locator, "wallTime", sourceWallTime), sourceWallTime));
                copy.setWallTime(copyWallTime);
            } else {
                copy.wallTime = null;
            }
            if (this.timeOfSubmission!= null) {
                JobTime sourceTimeOfSubmission;
                sourceTimeOfSubmission = this.getTimeOfSubmission();
                JobTime copyTimeOfSubmission = ((JobTime) strategy.copy(LocatorUtils.property(locator, "timeOfSubmission", sourceTimeOfSubmission), sourceTimeOfSubmission));
                copy.setTimeOfSubmission(copyTimeOfSubmission);
            } else {
                copy.timeOfSubmission = null;
            }
            if (this.timeOfStart!= null) {
                JobTime sourceTimeOfStart;
                sourceTimeOfStart = this.getTimeOfStart();
                JobTime copyTimeOfStart = ((JobTime) strategy.copy(LocatorUtils.property(locator, "timeOfStart", sourceTimeOfStart), sourceTimeOfStart));
                copy.setTimeOfStart(copyTimeOfStart);
            } else {
                copy.timeOfStart = null;
            }
            if (this.status!= null) {
                JobStatus sourceStatus;
                sourceStatus = this.getStatus();
                JobStatus copyStatus = ((JobStatus) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                copy.setStatus(copyStatus);
            } else {
                copy.status = null;
            }
            if (this.priority!= null) {
                JobPriority sourcePriority;
                sourcePriority = this.getPriority();
                JobPriority copyPriority = ((JobPriority) strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority));
                copy.setPriority(copyPriority);
            } else {
                copy.priority = null;
            }
            if (this.frameworkID!= null) {
                String sourceFrameworkID;
                sourceFrameworkID = this.getFrameworkID();
                String copyFrameworkID = ((String) strategy.copy(LocatorUtils.property(locator, "frameworkID", sourceFrameworkID), sourceFrameworkID));
                copy.setFrameworkID(copyFrameworkID);
            } else {
                copy.frameworkID = null;
            }
            if (this.frameworkRef!= null) {
                Object sourceFrameworkRef;
                sourceFrameworkRef = this.getFrameworkRef();
                Object copyFrameworkRef = ((Object) strategy.copy(LocatorUtils.property(locator, "frameworkRef", sourceFrameworkRef), sourceFrameworkRef));
                copy.setFrameworkRef(copyFrameworkRef);
            } else {
                copy.frameworkRef = null;
            }
            if (this.id!= null) {
                String sourceId;
                sourceId = this.getId();
                String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                copy.setId(copyId);
            } else {
                copy.id = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Job();
    }

}
