//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for PSU complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PSU"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="load" type="{f4g/schemas/java/MetaModel}PSULoad"/&gt;
 *         &lt;element name="efficiency" type="{f4g/schemas/java/MetaModel}Efficiency"/&gt;
 *         &lt;element name="computedPower" type="{f4g/schemas/java/MetaModel}Power" minOccurs="0"/&gt;
 *         &lt;element name="measuredPower" type="{f4g/schemas/java/MetaModel}Power" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}Fan" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}WaterCooler" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PSU", propOrder = {
    "load",
    "efficiency",
    "computedPower",
    "measuredPower",
    "fan",
    "waterCooler"
})
public class PSU implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected PSULoad load;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Efficiency efficiency;
    @XmlSchemaType(name = "double")
    protected Power computedPower;
    @XmlSchemaType(name = "double")
    protected Power measuredPower;
    @XmlElement(name = "Fan", namespace = "f4g/schemas/java/MetaModel")
    protected List<Fan> fan;
    @XmlElement(name = "WaterCooler", namespace = "f4g/schemas/java/MetaModel")
    protected List<WaterCooler> waterCooler;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public PSU() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public PSU(final PSULoad load, final Efficiency efficiency, final Power computedPower, final Power measuredPower, final List<Fan> fan, final List<WaterCooler> waterCooler, final QName jaxbElementName) {
        this.load = load;
        this.efficiency = efficiency;
        this.computedPower = computedPower;
        this.measuredPower = measuredPower;
        this.fan = fan;
        this.waterCooler = waterCooler;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the load property.
     * 
     * @return
     *     possible object is
     *     {@link PSULoad }
     *     
     */
    public PSULoad getLoad() {
        return load;
    }

    /**
     * Sets the value of the load property.
     * 
     * @param value
     *     allowed object is
     *     {@link PSULoad }
     *     
     */
    public void setLoad(PSULoad value) {
        this.load = value;
    }

    /**
     * Gets the value of the efficiency property.
     * 
     * @return
     *     possible object is
     *     {@link Efficiency }
     *     
     */
    public Efficiency getEfficiency() {
        return efficiency;
    }

    /**
     * Sets the value of the efficiency property.
     * 
     * @param value
     *     allowed object is
     *     {@link Efficiency }
     *     
     */
    public void setEfficiency(Efficiency value) {
        this.efficiency = value;
    }

    /**
     * Gets the value of the computedPower property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getComputedPower() {
        return computedPower;
    }

    /**
     * Sets the value of the computedPower property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setComputedPower(Power value) {
        this.computedPower = value;
    }

    /**
     * Gets the value of the measuredPower property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getMeasuredPower() {
        return measuredPower;
    }

    /**
     * Sets the value of the measuredPower property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setMeasuredPower(Power value) {
        this.measuredPower = value;
    }

    /**
     * Gets the value of the fan property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fan property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFan().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Fan }
     * 
     * 
     */
    public List<Fan> getFan() {
        if (fan == null) {
            fan = new ArrayList<Fan>();
        }
        return this.fan;
    }

    /**
     * Gets the value of the waterCooler property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the waterCooler property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getWaterCooler().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link WaterCooler }
     * 
     * 
     */
    public List<WaterCooler> getWaterCooler() {
        if (waterCooler == null) {
            waterCooler = new ArrayList<WaterCooler>();
        }
        return this.waterCooler;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PSU) {
            final PSU copy = ((PSU) draftCopy);
            if (this.load!= null) {
                PSULoad sourceLoad;
                sourceLoad = this.getLoad();
                PSULoad copyLoad = ((PSULoad) strategy.copy(LocatorUtils.property(locator, "load", sourceLoad), sourceLoad));
                copy.setLoad(copyLoad);
            } else {
                copy.load = null;
            }
            if (this.efficiency!= null) {
                Efficiency sourceEfficiency;
                sourceEfficiency = this.getEfficiency();
                Efficiency copyEfficiency = ((Efficiency) strategy.copy(LocatorUtils.property(locator, "efficiency", sourceEfficiency), sourceEfficiency));
                copy.setEfficiency(copyEfficiency);
            } else {
                copy.efficiency = null;
            }
            if (this.computedPower!= null) {
                Power sourceComputedPower;
                sourceComputedPower = this.getComputedPower();
                Power copyComputedPower = ((Power) strategy.copy(LocatorUtils.property(locator, "computedPower", sourceComputedPower), sourceComputedPower));
                copy.setComputedPower(copyComputedPower);
            } else {
                copy.computedPower = null;
            }
            if (this.measuredPower!= null) {
                Power sourceMeasuredPower;
                sourceMeasuredPower = this.getMeasuredPower();
                Power copyMeasuredPower = ((Power) strategy.copy(LocatorUtils.property(locator, "measuredPower", sourceMeasuredPower), sourceMeasuredPower));
                copy.setMeasuredPower(copyMeasuredPower);
            } else {
                copy.measuredPower = null;
            }
            if ((this.fan!= null)&&(!this.fan.isEmpty())) {
                List<Fan> sourceFan;
                sourceFan = (((this.fan!= null)&&(!this.fan.isEmpty()))?this.getFan():null);
                @SuppressWarnings("unchecked")
                List<Fan> copyFan = ((List<Fan> ) strategy.copy(LocatorUtils.property(locator, "fan", sourceFan), sourceFan));
                copy.fan = null;
                if (copyFan!= null) {
                    List<Fan> uniqueFanl = copy.getFan();
                    uniqueFanl.addAll(copyFan);
                }
            } else {
                copy.fan = null;
            }
            if ((this.waterCooler!= null)&&(!this.waterCooler.isEmpty())) {
                List<WaterCooler> sourceWaterCooler;
                sourceWaterCooler = (((this.waterCooler!= null)&&(!this.waterCooler.isEmpty()))?this.getWaterCooler():null);
                @SuppressWarnings("unchecked")
                List<WaterCooler> copyWaterCooler = ((List<WaterCooler> ) strategy.copy(LocatorUtils.property(locator, "waterCooler", sourceWaterCooler), sourceWaterCooler));
                copy.waterCooler = null;
                if (copyWaterCooler!= null) {
                    List<WaterCooler> uniqueWaterCoolerl = copy.getWaterCooler();
                    uniqueWaterCoolerl.addAll(copyWaterCooler);
                }
            } else {
                copy.waterCooler = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PSU();
    }

}
