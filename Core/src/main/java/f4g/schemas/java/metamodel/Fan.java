//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Fan complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Fan"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{f4g/schemas/java/MetaModel}CoolingSystem"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="maxRPM" type="{f4g/schemas/java/MetaModel}RPM"/&gt;
 *         &lt;element name="actualRPM" type="{f4g/schemas/java/MetaModel}RPM"/&gt;
 *         &lt;element name="powerMax" type="{f4g/schemas/java/MetaModel}Power"/&gt;
 *         &lt;element name="depth" type="{f4g/schemas/java/MetaModel}Dimension"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Fan", propOrder = {
    "maxRPM",
    "actualRPM",
    "powerMax",
    "depth"
})
public class Fan
    extends CoolingSystem
    implements Cloneable, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected RPM maxRPM;
    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected RPM actualRPM;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Power powerMax;
    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected Dimension depth;

    /**
     * Default no-arg constructor
     * 
     */
    public Fan() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Fan(final Power computedPower, final Power measuredPower, final QName jaxbElementName, final RPM maxRPM, final RPM actualRPM, final Power powerMax, final Dimension depth) {
        super(computedPower, measuredPower, jaxbElementName);
        this.maxRPM = maxRPM;
        this.actualRPM = actualRPM;
        this.powerMax = powerMax;
        this.depth = depth;
    }

    /**
     * Gets the value of the maxRPM property.
     * 
     * @return
     *     possible object is
     *     {@link RPM }
     *     
     */
    public RPM getMaxRPM() {
        return maxRPM;
    }

    /**
     * Sets the value of the maxRPM property.
     * 
     * @param value
     *     allowed object is
     *     {@link RPM }
     *     
     */
    public void setMaxRPM(RPM value) {
        this.maxRPM = value;
    }

    /**
     * Gets the value of the actualRPM property.
     * 
     * @return
     *     possible object is
     *     {@link RPM }
     *     
     */
    public RPM getActualRPM() {
        return actualRPM;
    }

    /**
     * Sets the value of the actualRPM property.
     * 
     * @param value
     *     allowed object is
     *     {@link RPM }
     *     
     */
    public void setActualRPM(RPM value) {
        this.actualRPM = value;
    }

    /**
     * Gets the value of the powerMax property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getPowerMax() {
        return powerMax;
    }

    /**
     * Sets the value of the powerMax property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setPowerMax(Power value) {
        this.powerMax = value;
    }

    /**
     * Gets the value of the depth property.
     * 
     * @return
     *     possible object is
     *     {@link Dimension }
     *     
     */
    public Dimension getDepth() {
        return depth;
    }

    /**
     * Sets the value of the depth property.
     * 
     * @param value
     *     allowed object is
     *     {@link Dimension }
     *     
     */
    public void setDepth(Dimension value) {
        this.depth = value;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof Fan) {
            final Fan copy = ((Fan) draftCopy);
            if (this.maxRPM!= null) {
                RPM sourceMaxRPM;
                sourceMaxRPM = this.getMaxRPM();
                RPM copyMaxRPM = ((RPM) strategy.copy(LocatorUtils.property(locator, "maxRPM", sourceMaxRPM), sourceMaxRPM));
                copy.setMaxRPM(copyMaxRPM);
            } else {
                copy.maxRPM = null;
            }
            if (this.actualRPM!= null) {
                RPM sourceActualRPM;
                sourceActualRPM = this.getActualRPM();
                RPM copyActualRPM = ((RPM) strategy.copy(LocatorUtils.property(locator, "actualRPM", sourceActualRPM), sourceActualRPM));
                copy.setActualRPM(copyActualRPM);
            } else {
                copy.actualRPM = null;
            }
            if (this.powerMax!= null) {
                Power sourcePowerMax;
                sourcePowerMax = this.getPowerMax();
                Power copyPowerMax = ((Power) strategy.copy(LocatorUtils.property(locator, "powerMax", sourcePowerMax), sourcePowerMax));
                copy.setPowerMax(copyPowerMax);
            } else {
                copy.powerMax = null;
            }
            if (this.depth!= null) {
                Dimension sourceDepth;
                sourceDepth = this.getDepth();
                Dimension copyDepth = ((Dimension) strategy.copy(LocatorUtils.property(locator, "depth", sourceDepth), sourceDepth));
                copy.setDepth(copyDepth);
            } else {
                copy.depth = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Fan();
    }

}
