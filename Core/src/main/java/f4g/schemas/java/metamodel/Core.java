//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Core complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Core"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="frameworkID" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="voltage" type="{f4g/schemas/java/MetaModel}Voltage"/&gt;
 *         &lt;element name="frequency" type="{f4g/schemas/java/MetaModel}Frequency"/&gt;
 *         &lt;element name="frequencyMin" type="{f4g/schemas/java/MetaModel}Frequency" minOccurs="0"/&gt;
 *         &lt;element name="frequencyMax" type="{f4g/schemas/java/MetaModel}Frequency" minOccurs="0"/&gt;
 *         &lt;element name="coreLoad" type="{f4g/schemas/java/MetaModel}CoreLoad" minOccurs="0"/&gt;
 *         &lt;element name="computedPower" type="{f4g/schemas/java/MetaModel}Power" minOccurs="0"/&gt;
 *         &lt;element name="totalPstates" type="{f4g/schemas/java/MetaModel}NrOfPstates"/&gt;
 *         &lt;element name="lastPstate" type="{f4g/schemas/java/MetaModel}NrOfPstates"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}Cache" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Core", propOrder = {
    "frameworkID",
    "voltage",
    "frequency",
    "frequencyMin",
    "frequencyMax",
    "coreLoad",
    "computedPower",
    "totalPstates",
    "lastPstate",
    "cache"
})
public class Core implements Cloneable, Named, Visitable, CopyTo
{

    protected String frameworkID;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Voltage voltage;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Frequency frequency;
    @XmlSchemaType(name = "double")
    protected Frequency frequencyMin;
    @XmlSchemaType(name = "double")
    protected Frequency frequencyMax;
    @XmlSchemaType(name = "double")
    protected CoreLoad coreLoad;
    @XmlSchemaType(name = "double")
    protected Power computedPower;
    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected NrOfPstates totalPstates;
    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected NrOfPstates lastPstate;
    @XmlElement(name = "Cache", namespace = "f4g/schemas/java/MetaModel")
    protected List<Cache> cache;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public Core() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Core(final String frameworkID, final Voltage voltage, final Frequency frequency, final Frequency frequencyMin, final Frequency frequencyMax, final CoreLoad coreLoad, final Power computedPower, final NrOfPstates totalPstates, final NrOfPstates lastPstate, final List<Cache> cache, final QName jaxbElementName) {
        this.frameworkID = frameworkID;
        this.voltage = voltage;
        this.frequency = frequency;
        this.frequencyMin = frequencyMin;
        this.frequencyMax = frequencyMax;
        this.coreLoad = coreLoad;
        this.computedPower = computedPower;
        this.totalPstates = totalPstates;
        this.lastPstate = lastPstate;
        this.cache = cache;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the frameworkID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFrameworkID() {
        return frameworkID;
    }

    /**
     * Sets the value of the frameworkID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFrameworkID(String value) {
        this.frameworkID = value;
    }

    /**
     * Gets the value of the voltage property.
     * 
     * @return
     *     possible object is
     *     {@link Voltage }
     *     
     */
    public Voltage getVoltage() {
        return voltage;
    }

    /**
     * Sets the value of the voltage property.
     * 
     * @param value
     *     allowed object is
     *     {@link Voltage }
     *     
     */
    public void setVoltage(Voltage value) {
        this.voltage = value;
    }

    /**
     * Gets the value of the frequency property.
     * 
     * @return
     *     possible object is
     *     {@link Frequency }
     *     
     */
    public Frequency getFrequency() {
        return frequency;
    }

    /**
     * Sets the value of the frequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link Frequency }
     *     
     */
    public void setFrequency(Frequency value) {
        this.frequency = value;
    }

    /**
     * Gets the value of the frequencyMin property.
     * 
     * @return
     *     possible object is
     *     {@link Frequency }
     *     
     */
    public Frequency getFrequencyMin() {
        return frequencyMin;
    }

    /**
     * Sets the value of the frequencyMin property.
     * 
     * @param value
     *     allowed object is
     *     {@link Frequency }
     *     
     */
    public void setFrequencyMin(Frequency value) {
        this.frequencyMin = value;
    }

    /**
     * Gets the value of the frequencyMax property.
     * 
     * @return
     *     possible object is
     *     {@link Frequency }
     *     
     */
    public Frequency getFrequencyMax() {
        return frequencyMax;
    }

    /**
     * Sets the value of the frequencyMax property.
     * 
     * @param value
     *     allowed object is
     *     {@link Frequency }
     *     
     */
    public void setFrequencyMax(Frequency value) {
        this.frequencyMax = value;
    }

    /**
     * Gets the value of the coreLoad property.
     * 
     * @return
     *     possible object is
     *     {@link CoreLoad }
     *     
     */
    public CoreLoad getCoreLoad() {
        return coreLoad;
    }

    /**
     * Sets the value of the coreLoad property.
     * 
     * @param value
     *     allowed object is
     *     {@link CoreLoad }
     *     
     */
    public void setCoreLoad(CoreLoad value) {
        this.coreLoad = value;
    }

    /**
     * Gets the value of the computedPower property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getComputedPower() {
        return computedPower;
    }

    /**
     * Sets the value of the computedPower property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setComputedPower(Power value) {
        this.computedPower = value;
    }

    /**
     * Gets the value of the totalPstates property.
     * 
     * @return
     *     possible object is
     *     {@link NrOfPstates }
     *     
     */
    public NrOfPstates getTotalPstates() {
        return totalPstates;
    }

    /**
     * Sets the value of the totalPstates property.
     * 
     * @param value
     *     allowed object is
     *     {@link NrOfPstates }
     *     
     */
    public void setTotalPstates(NrOfPstates value) {
        this.totalPstates = value;
    }

    /**
     * Gets the value of the lastPstate property.
     * 
     * @return
     *     possible object is
     *     {@link NrOfPstates }
     *     
     */
    public NrOfPstates getLastPstate() {
        return lastPstate;
    }

    /**
     * Sets the value of the lastPstate property.
     * 
     * @param value
     *     allowed object is
     *     {@link NrOfPstates }
     *     
     */
    public void setLastPstate(NrOfPstates value) {
        this.lastPstate = value;
    }

    /**
     * Gets the value of the cache property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the cache property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCache().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Cache }
     * 
     * 
     */
    public List<Cache> getCache() {
        if (cache == null) {
            cache = new ArrayList<Cache>();
        }
        return this.cache;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Core) {
            final Core copy = ((Core) draftCopy);
            if (this.frameworkID!= null) {
                String sourceFrameworkID;
                sourceFrameworkID = this.getFrameworkID();
                String copyFrameworkID = ((String) strategy.copy(LocatorUtils.property(locator, "frameworkID", sourceFrameworkID), sourceFrameworkID));
                copy.setFrameworkID(copyFrameworkID);
            } else {
                copy.frameworkID = null;
            }
            if (this.voltage!= null) {
                Voltage sourceVoltage;
                sourceVoltage = this.getVoltage();
                Voltage copyVoltage = ((Voltage) strategy.copy(LocatorUtils.property(locator, "voltage", sourceVoltage), sourceVoltage));
                copy.setVoltage(copyVoltage);
            } else {
                copy.voltage = null;
            }
            if (this.frequency!= null) {
                Frequency sourceFrequency;
                sourceFrequency = this.getFrequency();
                Frequency copyFrequency = ((Frequency) strategy.copy(LocatorUtils.property(locator, "frequency", sourceFrequency), sourceFrequency));
                copy.setFrequency(copyFrequency);
            } else {
                copy.frequency = null;
            }
            if (this.frequencyMin!= null) {
                Frequency sourceFrequencyMin;
                sourceFrequencyMin = this.getFrequencyMin();
                Frequency copyFrequencyMin = ((Frequency) strategy.copy(LocatorUtils.property(locator, "frequencyMin", sourceFrequencyMin), sourceFrequencyMin));
                copy.setFrequencyMin(copyFrequencyMin);
            } else {
                copy.frequencyMin = null;
            }
            if (this.frequencyMax!= null) {
                Frequency sourceFrequencyMax;
                sourceFrequencyMax = this.getFrequencyMax();
                Frequency copyFrequencyMax = ((Frequency) strategy.copy(LocatorUtils.property(locator, "frequencyMax", sourceFrequencyMax), sourceFrequencyMax));
                copy.setFrequencyMax(copyFrequencyMax);
            } else {
                copy.frequencyMax = null;
            }
            if (this.coreLoad!= null) {
                CoreLoad sourceCoreLoad;
                sourceCoreLoad = this.getCoreLoad();
                CoreLoad copyCoreLoad = ((CoreLoad) strategy.copy(LocatorUtils.property(locator, "coreLoad", sourceCoreLoad), sourceCoreLoad));
                copy.setCoreLoad(copyCoreLoad);
            } else {
                copy.coreLoad = null;
            }
            if (this.computedPower!= null) {
                Power sourceComputedPower;
                sourceComputedPower = this.getComputedPower();
                Power copyComputedPower = ((Power) strategy.copy(LocatorUtils.property(locator, "computedPower", sourceComputedPower), sourceComputedPower));
                copy.setComputedPower(copyComputedPower);
            } else {
                copy.computedPower = null;
            }
            if (this.totalPstates!= null) {
                NrOfPstates sourceTotalPstates;
                sourceTotalPstates = this.getTotalPstates();
                NrOfPstates copyTotalPstates = ((NrOfPstates) strategy.copy(LocatorUtils.property(locator, "totalPstates", sourceTotalPstates), sourceTotalPstates));
                copy.setTotalPstates(copyTotalPstates);
            } else {
                copy.totalPstates = null;
            }
            if (this.lastPstate!= null) {
                NrOfPstates sourceLastPstate;
                sourceLastPstate = this.getLastPstate();
                NrOfPstates copyLastPstate = ((NrOfPstates) strategy.copy(LocatorUtils.property(locator, "lastPstate", sourceLastPstate), sourceLastPstate));
                copy.setLastPstate(copyLastPstate);
            } else {
                copy.lastPstate = null;
            }
            if ((this.cache!= null)&&(!this.cache.isEmpty())) {
                List<Cache> sourceCache;
                sourceCache = (((this.cache!= null)&&(!this.cache.isEmpty()))?this.getCache():null);
                @SuppressWarnings("unchecked")
                List<Cache> copyCache = ((List<Cache> ) strategy.copy(LocatorUtils.property(locator, "cache", sourceCache), sourceCache));
                copy.cache = null;
                if (copyCache!= null) {
                    List<Cache> uniqueCachel = copy.getCache();
                    uniqueCachel.addAll(copyCache);
                }
            } else {
                copy.cache = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Core();
    }

}
