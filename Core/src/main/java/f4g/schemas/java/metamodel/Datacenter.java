//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//

package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;

import javax.measure.quantity.Energy;

import org.jscience.physics.amount.Amount;

//TODO: implement CopyTo if needed
public class Datacenter implements Cloneable /* , CopyTo */
{

    protected String name;
    protected PUE pue;
    protected CUE cue;
    protected Amount<Energy> evMigration;
    protected List<FrameworkCapabilities> frameworkCapabilities;
    protected List<Server> servers;

    /**
     * Default no-arg constructor
     * 
     */
    public Datacenter() {
	super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Datacenter(final String name, final PUE pue, final CUE cue, Amount<Energy> evMigration,
	    final List<FrameworkCapabilities> frameworkCapabilities, List<Server> servers) {
	this.name = name;
	this.pue = pue;
	this.cue = cue;
	this.evMigration = evMigration;
	this.frameworkCapabilities = frameworkCapabilities;
	this.servers = servers;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return possible object is {@link String }
     * 
     */
    public String getName() {
	return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *            allowed object is {@link String }
     * 
     */
    public void setName(String value) {
	this.name = value;
    }

    /**
     * Gets the value of frameworkCapabilities.
     * 
     * return Objects of the following type(s) are allowed in the list
     * {@link FrameworkCapabilities }
     */
    public List<FrameworkCapabilities> getFrameworkCapabilities() {
	if (frameworkCapabilities == null) {
	    frameworkCapabilities = new ArrayList<FrameworkCapabilities>();
	}
	return this.frameworkCapabilities;
    }

    public void setFrameworkCapabilities(List<FrameworkCapabilities> frameworkCapabilities) {
	this.frameworkCapabilities = frameworkCapabilities;
    }

    public PUE getPue() {
	return pue;
    }

    public void setPue(PUE pue) {
	this.pue = pue;
    }

    public CUE getCue() {
	return cue;
    }

    public void setCue(CUE cue) {
	this.cue = cue;
    }

    public Amount<Energy> getEvMigration() {
	return evMigration;
    }

    public void setEvMigration(Amount<Energy> evMigration) {
	this.evMigration = evMigration;
    }

    public List<Server> getServers() {
	return servers;
    }

    public void setServers(List<Server> servers) {
	this.servers = servers;
    }

    /*
     * public Object clone() { return copyTo(createNewInstance()); }
     * 
     * public Object copyTo(Object target) { final CopyStrategy strategy =
     * JAXBCopyStrategy.INSTANCE; return copyTo(null, target, strategy); }
     * 
     * public Object copyTo(ObjectLocator locator, Object target, CopyStrategy
     * strategy) { final Object draftCopy = ((target == null) ?
     * createNewInstance() : target); if (draftCopy instanceof Datacenter) {
     * final Datacenter copy = ((Datacenter) draftCopy); if (this.name != null)
     * { String sourceName; sourceName = this.getName(); String copyName =
     * ((String) strategy.copy(LocatorUtils.property(locator, "name",
     * sourceName), sourceName)); copy.setName(copyName); } else { copy.name =
     * null; } if ((this.applicationBenchmark != null) &&
     * (!this.applicationBenchmark.isEmpty())) { List<ApplicationBenchmark>
     * sourceApplicationBenchmark; sourceApplicationBenchmark =
     * (((this.applicationBenchmark != null) &&
     * (!this.applicationBenchmark.isEmpty())) ? this.getApplicationBenchmark()
     * : null);
     * 
     * @SuppressWarnings("unchecked") List<ApplicationBenchmark>
     * copyApplicationBenchmark = ((List<ApplicationBenchmark>) strategy.copy(
     * LocatorUtils.property(locator, "applicationBenchmark",
     * sourceApplicationBenchmark), sourceApplicationBenchmark));
     * copy.applicationBenchmark = null; if (copyApplicationBenchmark != null) {
     * List<ApplicationBenchmark> uniqueApplicationBenchmarkl =
     * copy.getApplicationBenchmark();
     * uniqueApplicationBenchmarkl.addAll(copyApplicationBenchmark); } } else {
     * copy.applicationBenchmark = null; } if (this.computedPower != null) {
     * Power sourceComputedPower; sourceComputedPower = this.getComputedPower();
     * Power copyComputedPower = ((Power) strategy.copy(
     * LocatorUtils.property(locator, "computedPower", sourceComputedPower),
     * sourceComputedPower)); copy.setComputedPower(copyComputedPower); } else {
     * copy.computedPower = null; } if ((this.rack != null) &&
     * (!this.rack.isEmpty())) { List<Rack> sourceRack; sourceRack =
     * (((this.rack != null) && (!this.rack.isEmpty())) ? this.getRack() :
     * null);
     * 
     * @SuppressWarnings("unchecked") List<Rack> copyRack = ((List<Rack>)
     * strategy.copy(LocatorUtils.property(locator, "rack", sourceRack),
     * sourceRack)); copy.rack = null; if (copyRack != null) { List<Rack>
     * uniqueRackl = copy.getRack(); uniqueRackl.addAll(copyRack); } } else {
     * copy.rack = null; } if ((this.towerServer != null) &&
     * (!this.towerServer.isEmpty())) { List<TowerServer> sourceTowerServer;
     * sourceTowerServer = (((this.towerServer != null) &&
     * (!this.towerServer.isEmpty())) ? this.getTowerServer() : null);
     * 
     * @SuppressWarnings("unchecked") List<TowerServer> copyTowerServer =
     * ((List<TowerServer>) strategy .copy(LocatorUtils.property(locator,
     * "towerServer", sourceTowerServer), sourceTowerServer)); copy.towerServer
     * = null; if (copyTowerServer != null) { List<TowerServer>
     * uniqueTowerServerl = copy.getTowerServer();
     * uniqueTowerServerl.addAll(copyTowerServer); } } else { copy.towerServer =
     * null; } if ((this.boxRouter != null) && (!this.boxRouter.isEmpty())) {
     * List<BoxRouter> sourceBoxRouter; sourceBoxRouter = (((this.boxRouter !=
     * null) && (!this.boxRouter.isEmpty())) ? this.getBoxRouter() : null);
     * 
     * @SuppressWarnings("unchecked") List<BoxRouter> copyBoxRouter =
     * ((List<BoxRouter>) strategy .copy(LocatorUtils.property(locator,
     * "boxRouter", sourceBoxRouter), sourceBoxRouter)); copy.boxRouter = null;
     * if (copyBoxRouter != null) { List<BoxRouter> uniqueBoxRouterl =
     * copy.getBoxRouter(); uniqueBoxRouterl.addAll(copyBoxRouter); } } else {
     * copy.boxRouter = null; } if ((this.boxSwitch != null) &&
     * (!this.boxSwitch.isEmpty())) { List<BoxSwitch> sourceBoxSwitch;
     * sourceBoxSwitch = (((this.boxSwitch != null) &&
     * (!this.boxSwitch.isEmpty())) ? this.getBoxSwitch() : null);
     * 
     * @SuppressWarnings("unchecked") List<BoxSwitch> copyBoxSwitch =
     * ((List<BoxSwitch>) strategy .copy(LocatorUtils.property(locator,
     * "boxSwitch", sourceBoxSwitch), sourceBoxSwitch)); copy.boxSwitch = null;
     * if (copyBoxSwitch != null) { List<BoxSwitch> uniqueBoxSwitchl =
     * copy.getBoxSwitch(); uniqueBoxSwitchl.addAll(copyBoxSwitch); } } else {
     * copy.boxSwitch = null; } if ((this.frameworkCapabilities != null) &&
     * (!this.frameworkCapabilities.isEmpty())) { List<FrameworkCapabilities>
     * sourceFrameworkCapabilities; sourceFrameworkCapabilities =
     * (((this.frameworkCapabilities != null) &&
     * (!this.frameworkCapabilities.isEmpty())) ?
     * this.getFrameworkCapabilities() : null);
     * 
     * @SuppressWarnings("unchecked") List<FrameworkCapabilities>
     * copyFrameworkCapabilities = ((List<FrameworkCapabilities>) strategy.copy(
     * LocatorUtils.property(locator, "frameworkCapabilities",
     * sourceFrameworkCapabilities), sourceFrameworkCapabilities));
     * copy.frameworkCapabilities = null; if (copyFrameworkCapabilities != null)
     * { List<FrameworkCapabilities> uniqueFrameworkCapabilitiesl =
     * copy.getFrameworkCapabilities();
     * uniqueFrameworkCapabilitiesl.addAll(copyFrameworkCapabilities); } } else
     * { copy.frameworkCapabilities = null; } if (this.networkLoad != null) {
     * NetworkLoad sourceNetworkLoad; sourceNetworkLoad = this.getNetworkLoad();
     * NetworkLoad copyNetworkLoad = ((NetworkLoad) strategy
     * .copy(LocatorUtils.property(locator, "networkLoad", sourceNetworkLoad),
     * sourceNetworkLoad)); copy.setNetworkLoad(copyNetworkLoad); } else {
     * copy.networkLoad = null; } } return draftCopy; }
     * 
     * public Object createNewInstance() { return new Datacenter(); }
     */

}
