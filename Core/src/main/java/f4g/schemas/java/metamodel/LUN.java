//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for LUN complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LUN"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="readRate" type="{f4g/schemas/java/MetaModel}IoRate"/&gt;
 *         &lt;element name="writeRate" type="{f4g/schemas/java/MetaModel}IoRate"/&gt;
 *         &lt;element name="lunRef" type="{http://www.w3.org/2001/XMLSchema}IDREF"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LUN", propOrder = {
    "readRate",
    "writeRate",
    "lunRef"
})
public class LUN implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected IoRate readRate;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected IoRate writeRate;
    @XmlElement(required = true)
    @XmlIDREF
    @XmlSchemaType(name = "IDREF")
    protected Object lunRef;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public LUN() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public LUN(final IoRate readRate, final IoRate writeRate, final Object lunRef, final QName jaxbElementName) {
        this.readRate = readRate;
        this.writeRate = writeRate;
        this.lunRef = lunRef;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the readRate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getReadRate() {
        return readRate;
    }

    /**
     * Sets the value of the readRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setReadRate(IoRate value) {
        this.readRate = value;
    }

    /**
     * Gets the value of the writeRate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getWriteRate() {
        return writeRate;
    }

    /**
     * Sets the value of the writeRate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setWriteRate(IoRate value) {
        this.writeRate = value;
    }

    /**
     * Gets the value of the lunRef property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getLunRef() {
        return lunRef;
    }

    /**
     * Sets the value of the lunRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setLunRef(Object value) {
        this.lunRef = value;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof LUN) {
            final LUN copy = ((LUN) draftCopy);
            if (this.readRate!= null) {
                IoRate sourceReadRate;
                sourceReadRate = this.getReadRate();
                IoRate copyReadRate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "readRate", sourceReadRate), sourceReadRate));
                copy.setReadRate(copyReadRate);
            } else {
                copy.readRate = null;
            }
            if (this.writeRate!= null) {
                IoRate sourceWriteRate;
                sourceWriteRate = this.getWriteRate();
                IoRate copyWriteRate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "writeRate", sourceWriteRate), sourceWriteRate));
                copy.setWriteRate(copyWriteRate);
            } else {
                copy.writeRate = null;
            }
            if (this.lunRef!= null) {
                Object sourceLunRef;
                sourceLunRef = this.getLunRef();
                Object copyLunRef = ((Object) strategy.copy(LocatorUtils.property(locator, "lunRef", sourceLunRef), sourceLunRef));
                copy.setLunRef(copyLunRef);
            } else {
                copy.lunRef = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new LUN();
    }

}
