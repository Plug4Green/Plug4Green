//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for OperatingSystem complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="OperatingSystem"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{f4g/schemas/java/MetaModel}OperatingSystemType"/&gt;
 *         &lt;element name="systemRAMBaseUsage" type="{f4g/schemas/java/MetaModel}MemoryUsage" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}FileSystem" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}SoftwareRAID" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}SoftwareNetwork" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "OperatingSystem", propOrder = {
    "name",
    "systemRAMBaseUsage",
    "fileSystem",
    "softwareRAID",
    "softwareNetwork"
})
@XmlSeeAlso({
    NativeOperatingSystem.class,
    NativeHypervisor.class,
    HostedOperatingSystem.class
})
public class OperatingSystem implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected OperatingSystemType name;
    @XmlSchemaType(name = "double")
    protected MemoryUsage systemRAMBaseUsage;
    @XmlElement(name = "FileSystem", namespace = "f4g/schemas/java/MetaModel")
    protected List<FileSystem> fileSystem;
    @XmlElement(name = "SoftwareRAID", namespace = "f4g/schemas/java/MetaModel")
    protected List<SoftwareRAID> softwareRAID;
    @XmlElement(name = "SoftwareNetwork", namespace = "f4g/schemas/java/MetaModel")
    protected List<SoftwareNetwork> softwareNetwork;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public OperatingSystem() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public OperatingSystem(final OperatingSystemType name, final MemoryUsage systemRAMBaseUsage, final List<FileSystem> fileSystem, final List<SoftwareRAID> softwareRAID, final List<SoftwareNetwork> softwareNetwork, final QName jaxbElementName) {
        this.name = name;
        this.systemRAMBaseUsage = systemRAMBaseUsage;
        this.fileSystem = fileSystem;
        this.softwareRAID = softwareRAID;
        this.softwareNetwork = softwareNetwork;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link OperatingSystemType }
     *     
     */
    public OperatingSystemType getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link OperatingSystemType }
     *     
     */
    public void setName(OperatingSystemType value) {
        this.name = value;
    }

    /**
     * Gets the value of the systemRAMBaseUsage property.
     * 
     * @return
     *     possible object is
     *     {@link MemoryUsage }
     *     
     */
    public MemoryUsage getSystemRAMBaseUsage() {
        return systemRAMBaseUsage;
    }

    /**
     * Sets the value of the systemRAMBaseUsage property.
     * 
     * @param value
     *     allowed object is
     *     {@link MemoryUsage }
     *     
     */
    public void setSystemRAMBaseUsage(MemoryUsage value) {
        this.systemRAMBaseUsage = value;
    }

    /**
     * Gets the value of the fileSystem property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fileSystem property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFileSystem().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link FileSystem }
     * 
     * 
     */
    public List<FileSystem> getFileSystem() {
        if (fileSystem == null) {
            fileSystem = new ArrayList<FileSystem>();
        }
        return this.fileSystem;
    }

    /**
     * Gets the value of the softwareRAID property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the softwareRAID property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSoftwareRAID().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SoftwareRAID }
     * 
     * 
     */
    public List<SoftwareRAID> getSoftwareRAID() {
        if (softwareRAID == null) {
            softwareRAID = new ArrayList<SoftwareRAID>();
        }
        return this.softwareRAID;
    }

    /**
     * Gets the value of the softwareNetwork property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the softwareNetwork property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSoftwareNetwork().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SoftwareNetwork }
     * 
     * 
     */
    public List<SoftwareNetwork> getSoftwareNetwork() {
        if (softwareNetwork == null) {
            softwareNetwork = new ArrayList<SoftwareNetwork>();
        }
        return this.softwareNetwork;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof OperatingSystem) {
            final OperatingSystem copy = ((OperatingSystem) draftCopy);
            if (this.name!= null) {
                OperatingSystemType sourceName;
                sourceName = this.getName();
                OperatingSystemType copyName = ((OperatingSystemType) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.systemRAMBaseUsage!= null) {
                MemoryUsage sourceSystemRAMBaseUsage;
                sourceSystemRAMBaseUsage = this.getSystemRAMBaseUsage();
                MemoryUsage copySystemRAMBaseUsage = ((MemoryUsage) strategy.copy(LocatorUtils.property(locator, "systemRAMBaseUsage", sourceSystemRAMBaseUsage), sourceSystemRAMBaseUsage));
                copy.setSystemRAMBaseUsage(copySystemRAMBaseUsage);
            } else {
                copy.systemRAMBaseUsage = null;
            }
            if ((this.fileSystem!= null)&&(!this.fileSystem.isEmpty())) {
                List<FileSystem> sourceFileSystem;
                sourceFileSystem = (((this.fileSystem!= null)&&(!this.fileSystem.isEmpty()))?this.getFileSystem():null);
                @SuppressWarnings("unchecked")
                List<FileSystem> copyFileSystem = ((List<FileSystem> ) strategy.copy(LocatorUtils.property(locator, "fileSystem", sourceFileSystem), sourceFileSystem));
                copy.fileSystem = null;
                if (copyFileSystem!= null) {
                    List<FileSystem> uniqueFileSysteml = copy.getFileSystem();
                    uniqueFileSysteml.addAll(copyFileSystem);
                }
            } else {
                copy.fileSystem = null;
            }
            if ((this.softwareRAID!= null)&&(!this.softwareRAID.isEmpty())) {
                List<SoftwareRAID> sourceSoftwareRAID;
                sourceSoftwareRAID = (((this.softwareRAID!= null)&&(!this.softwareRAID.isEmpty()))?this.getSoftwareRAID():null);
                @SuppressWarnings("unchecked")
                List<SoftwareRAID> copySoftwareRAID = ((List<SoftwareRAID> ) strategy.copy(LocatorUtils.property(locator, "softwareRAID", sourceSoftwareRAID), sourceSoftwareRAID));
                copy.softwareRAID = null;
                if (copySoftwareRAID!= null) {
                    List<SoftwareRAID> uniqueSoftwareRAIDl = copy.getSoftwareRAID();
                    uniqueSoftwareRAIDl.addAll(copySoftwareRAID);
                }
            } else {
                copy.softwareRAID = null;
            }
            if ((this.softwareNetwork!= null)&&(!this.softwareNetwork.isEmpty())) {
                List<SoftwareNetwork> sourceSoftwareNetwork;
                sourceSoftwareNetwork = (((this.softwareNetwork!= null)&&(!this.softwareNetwork.isEmpty()))?this.getSoftwareNetwork():null);
                @SuppressWarnings("unchecked")
                List<SoftwareNetwork> copySoftwareNetwork = ((List<SoftwareNetwork> ) strategy.copy(LocatorUtils.property(locator, "softwareNetwork", sourceSoftwareNetwork), sourceSoftwareNetwork));
                copy.softwareNetwork = null;
                if (copySoftwareNetwork!= null) {
                    List<SoftwareNetwork> uniqueSoftwareNetworkl = copy.getSoftwareNetwork();
                    uniqueSoftwareNetworkl.addAll(copySoftwareNetwork);
                }
            } else {
                copy.softwareNetwork = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new OperatingSystem();
    }

}
