//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for SoftwareApplication complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SoftwareApplication"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="numberOfCPUs" type="{f4g/schemas/java/MetaModel}NrOfCpus" minOccurs="0"/&gt;
 *         &lt;element name="actualCPUUsage" type="{f4g/schemas/java/MetaModel}CpuUsage" minOccurs="0"/&gt;
 *         &lt;element name="actualStorageUsage" type="{f4g/schemas/java/MetaModel}StorageUsage" minOccurs="0"/&gt;
 *         &lt;element name="actualDiskIORate" type="{f4g/schemas/java/MetaModel}IoRate" minOccurs="0"/&gt;
 *         &lt;element name="actualMemoryUsage" type="{f4g/schemas/java/MetaModel}MemoryUsage" minOccurs="0"/&gt;
 *         &lt;element name="actualNetworkUsage" type="{f4g/schemas/java/MetaModel}NetworkUsage" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SoftwareApplication", propOrder = {
    "name",
    "numberOfCPUs",
    "actualCPUUsage",
    "actualStorageUsage",
    "actualDiskIORate",
    "actualMemoryUsage",
    "actualNetworkUsage"
})
@XmlSeeAlso({
    Node.class,
    ClusterManagement.class
})
public class SoftwareApplication implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    protected String name;
    @XmlSchemaType(name = "int")
    protected NrOfCpus numberOfCPUs;
    @XmlSchemaType(name = "double")
    protected CpuUsage actualCPUUsage;
    @XmlSchemaType(name = "double")
    protected StorageUsage actualStorageUsage;
    @XmlSchemaType(name = "double")
    protected IoRate actualDiskIORate;
    @XmlSchemaType(name = "double")
    protected MemoryUsage actualMemoryUsage;
    @XmlSchemaType(name = "double")
    protected NetworkUsage actualNetworkUsage;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public SoftwareApplication() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public SoftwareApplication(final String name, final NrOfCpus numberOfCPUs, final CpuUsage actualCPUUsage, final StorageUsage actualStorageUsage, final IoRate actualDiskIORate, final MemoryUsage actualMemoryUsage, final NetworkUsage actualNetworkUsage, final QName jaxbElementName) {
        this.name = name;
        this.numberOfCPUs = numberOfCPUs;
        this.actualCPUUsage = actualCPUUsage;
        this.actualStorageUsage = actualStorageUsage;
        this.actualDiskIORate = actualDiskIORate;
        this.actualMemoryUsage = actualMemoryUsage;
        this.actualNetworkUsage = actualNetworkUsage;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the numberOfCPUs property.
     * 
     * @return
     *     possible object is
     *     {@link NrOfCpus }
     *     
     */
    public NrOfCpus getNumberOfCPUs() {
        return numberOfCPUs;
    }

    /**
     * Sets the value of the numberOfCPUs property.
     * 
     * @param value
     *     allowed object is
     *     {@link NrOfCpus }
     *     
     */
    public void setNumberOfCPUs(NrOfCpus value) {
        this.numberOfCPUs = value;
    }

    /**
     * Gets the value of the actualCPUUsage property.
     * 
     * @return
     *     possible object is
     *     {@link CpuUsage }
     *     
     */
    public CpuUsage getActualCPUUsage() {
        return actualCPUUsage;
    }

    /**
     * Sets the value of the actualCPUUsage property.
     * 
     * @param value
     *     allowed object is
     *     {@link CpuUsage }
     *     
     */
    public void setActualCPUUsage(CpuUsage value) {
        this.actualCPUUsage = value;
    }

    /**
     * Gets the value of the actualStorageUsage property.
     * 
     * @return
     *     possible object is
     *     {@link StorageUsage }
     *     
     */
    public StorageUsage getActualStorageUsage() {
        return actualStorageUsage;
    }

    /**
     * Sets the value of the actualStorageUsage property.
     * 
     * @param value
     *     allowed object is
     *     {@link StorageUsage }
     *     
     */
    public void setActualStorageUsage(StorageUsage value) {
        this.actualStorageUsage = value;
    }

    /**
     * Gets the value of the actualDiskIORate property.
     * 
     * @return
     *     possible object is
     *     {@link IoRate }
     *     
     */
    public IoRate getActualDiskIORate() {
        return actualDiskIORate;
    }

    /**
     * Sets the value of the actualDiskIORate property.
     * 
     * @param value
     *     allowed object is
     *     {@link IoRate }
     *     
     */
    public void setActualDiskIORate(IoRate value) {
        this.actualDiskIORate = value;
    }

    /**
     * Gets the value of the actualMemoryUsage property.
     * 
     * @return
     *     possible object is
     *     {@link MemoryUsage }
     *     
     */
    public MemoryUsage getActualMemoryUsage() {
        return actualMemoryUsage;
    }

    /**
     * Sets the value of the actualMemoryUsage property.
     * 
     * @param value
     *     allowed object is
     *     {@link MemoryUsage }
     *     
     */
    public void setActualMemoryUsage(MemoryUsage value) {
        this.actualMemoryUsage = value;
    }

    /**
     * Gets the value of the actualNetworkUsage property.
     * 
     * @return
     *     possible object is
     *     {@link NetworkUsage }
     *     
     */
    public NetworkUsage getActualNetworkUsage() {
        return actualNetworkUsage;
    }

    /**
     * Sets the value of the actualNetworkUsage property.
     * 
     * @param value
     *     allowed object is
     *     {@link NetworkUsage }
     *     
     */
    public void setActualNetworkUsage(NetworkUsage value) {
        this.actualNetworkUsage = value;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SoftwareApplication) {
            final SoftwareApplication copy = ((SoftwareApplication) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.numberOfCPUs!= null) {
                NrOfCpus sourceNumberOfCPUs;
                sourceNumberOfCPUs = this.getNumberOfCPUs();
                NrOfCpus copyNumberOfCPUs = ((NrOfCpus) strategy.copy(LocatorUtils.property(locator, "numberOfCPUs", sourceNumberOfCPUs), sourceNumberOfCPUs));
                copy.setNumberOfCPUs(copyNumberOfCPUs);
            } else {
                copy.numberOfCPUs = null;
            }
            if (this.actualCPUUsage!= null) {
                CpuUsage sourceActualCPUUsage;
                sourceActualCPUUsage = this.getActualCPUUsage();
                CpuUsage copyActualCPUUsage = ((CpuUsage) strategy.copy(LocatorUtils.property(locator, "actualCPUUsage", sourceActualCPUUsage), sourceActualCPUUsage));
                copy.setActualCPUUsage(copyActualCPUUsage);
            } else {
                copy.actualCPUUsage = null;
            }
            if (this.actualStorageUsage!= null) {
                StorageUsage sourceActualStorageUsage;
                sourceActualStorageUsage = this.getActualStorageUsage();
                StorageUsage copyActualStorageUsage = ((StorageUsage) strategy.copy(LocatorUtils.property(locator, "actualStorageUsage", sourceActualStorageUsage), sourceActualStorageUsage));
                copy.setActualStorageUsage(copyActualStorageUsage);
            } else {
                copy.actualStorageUsage = null;
            }
            if (this.actualDiskIORate!= null) {
                IoRate sourceActualDiskIORate;
                sourceActualDiskIORate = this.getActualDiskIORate();
                IoRate copyActualDiskIORate = ((IoRate) strategy.copy(LocatorUtils.property(locator, "actualDiskIORate", sourceActualDiskIORate), sourceActualDiskIORate));
                copy.setActualDiskIORate(copyActualDiskIORate);
            } else {
                copy.actualDiskIORate = null;
            }
            if (this.actualMemoryUsage!= null) {
                MemoryUsage sourceActualMemoryUsage;
                sourceActualMemoryUsage = this.getActualMemoryUsage();
                MemoryUsage copyActualMemoryUsage = ((MemoryUsage) strategy.copy(LocatorUtils.property(locator, "actualMemoryUsage", sourceActualMemoryUsage), sourceActualMemoryUsage));
                copy.setActualMemoryUsage(copyActualMemoryUsage);
            } else {
                copy.actualMemoryUsage = null;
            }
            if (this.actualNetworkUsage!= null) {
                NetworkUsage sourceActualNetworkUsage;
                sourceActualNetworkUsage = this.getActualNetworkUsage();
                NetworkUsage copyActualNetworkUsage = ((NetworkUsage) strategy.copy(LocatorUtils.property(locator, "actualNetworkUsage", sourceActualNetworkUsage), sourceActualNetworkUsage));
                copy.setActualNetworkUsage(copyActualNetworkUsage);
            } else {
                copy.actualNetworkUsage = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SoftwareApplication();
    }

}
