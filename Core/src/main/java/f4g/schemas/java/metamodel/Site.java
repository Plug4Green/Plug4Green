//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Site complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Site"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *         &lt;element name="PUE" type="{f4g/schemas/java/MetaModel}PUE"/&gt;
 *         &lt;element name="CUE" type="{f4g/schemas/java/MetaModel}CUE"/&gt;
 *         &lt;element name="computedPower" type="{f4g/schemas/java/MetaModel}Power" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}Datacenter" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Site", propOrder = {
    "name",
    "pue",
    "cue",
    "computedPower",
    "datacenter"
})
public class Site implements Cloneable, Named, Visitable, CopyTo
{

    protected String name;
    @XmlElement(name = "PUE", required = true)
    @XmlSchemaType(name = "double")
    protected PUE pue;
    @XmlElement(name = "CUE", required = true)
    @XmlSchemaType(name = "double")
    protected CUE cue;
    @XmlSchemaType(name = "double")
    protected Power computedPower;
    @XmlElement(name = "Datacenter", namespace = "f4g/schemas/java/MetaModel")
    protected List<Datacenter> datacenter;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public Site() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Site(final String name, final PUE pue, final CUE cue, final Power computedPower, final List<Datacenter> datacenter, final QName jaxbElementName) {
        this.name = name;
        this.pue = pue;
        this.cue = cue;
        this.computedPower = computedPower;
        this.datacenter = datacenter;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the pue property.
     * 
     * @return
     *     possible object is
     *     {@link PUE }
     *     
     */
    public PUE getPUE() {
        return pue;
    }

    /**
     * Sets the value of the pue property.
     * 
     * @param value
     *     allowed object is
     *     {@link PUE }
     *     
     */
    public void setPUE(PUE value) {
        this.pue = value;
    }

    /**
     * Gets the value of the cue property.
     * 
     * @return
     *     possible object is
     *     {@link CUE }
     *     
     */
    public CUE getCUE() {
        return cue;
    }

    /**
     * Sets the value of the cue property.
     * 
     * @param value
     *     allowed object is
     *     {@link CUE }
     *     
     */
    public void setCUE(CUE value) {
        this.cue = value;
    }

    /**
     * Gets the value of the computedPower property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getComputedPower() {
        return computedPower;
    }

    /**
     * Sets the value of the computedPower property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setComputedPower(Power value) {
        this.computedPower = value;
    }

    /**
     * Gets the value of the datacenter property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the datacenter property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDatacenter().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Datacenter }
     * 
     * 
     */
    public List<Datacenter> getDatacenter() {
        if (datacenter == null) {
            datacenter = new ArrayList<Datacenter>();
        }
        return this.datacenter;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Site) {
            final Site copy = ((Site) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.pue!= null) {
                PUE sourcePUE;
                sourcePUE = this.getPUE();
                PUE copyPUE = ((PUE) strategy.copy(LocatorUtils.property(locator, "pue", sourcePUE), sourcePUE));
                copy.setPUE(copyPUE);
            } else {
                copy.pue = null;
            }
            if (this.cue!= null) {
                CUE sourceCUE;
                sourceCUE = this.getCUE();
                CUE copyCUE = ((CUE) strategy.copy(LocatorUtils.property(locator, "cue", sourceCUE), sourceCUE));
                copy.setCUE(copyCUE);
            } else {
                copy.cue = null;
            }
            if (this.computedPower!= null) {
                Power sourceComputedPower;
                sourceComputedPower = this.getComputedPower();
                Power copyComputedPower = ((Power) strategy.copy(LocatorUtils.property(locator, "computedPower", sourceComputedPower), sourceComputedPower));
                copy.setComputedPower(copyComputedPower);
            } else {
                copy.computedPower = null;
            }
            if ((this.datacenter!= null)&&(!this.datacenter.isEmpty())) {
                List<Datacenter> sourceDatacenter;
                sourceDatacenter = (((this.datacenter!= null)&&(!this.datacenter.isEmpty()))?this.getDatacenter():null);
                @SuppressWarnings("unchecked")
                List<Datacenter> copyDatacenter = ((List<Datacenter> ) strategy.copy(LocatorUtils.property(locator, "datacenter", sourceDatacenter), sourceDatacenter));
                copy.datacenter = null;
                if (copyDatacenter!= null) {
                    List<Datacenter> uniqueDatacenterl = copy.getDatacenter();
                    uniqueDatacenterl.addAll(copyDatacenter);
                }
            } else {
                copy.datacenter = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Site();
    }

}
