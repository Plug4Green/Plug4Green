//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for RAMStick complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RAMStick"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="voltage" type="{f4g/schemas/java/MetaModel}Voltage"/&gt;
 *         &lt;element name="size" type="{f4g/schemas/java/MetaModel}RAMSize"/&gt;
 *         &lt;element name="type" type="{f4g/schemas/java/MetaModel}RAMTypeType"/&gt;
 *         &lt;element name="frequency" type="{f4g/schemas/java/MetaModel}Frequency"/&gt;
 *         &lt;element name="bufferType" type="{f4g/schemas/java/MetaModel}BufferTypeType"/&gt;
 *         &lt;element name="vendor" type="{f4g/schemas/java/MetaModel}RAMTypeVendorType"/&gt;
 *         &lt;element name="computedPower" type="{f4g/schemas/java/MetaModel}Power" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RAMStick", propOrder = {
    "voltage",
    "size",
    "type",
    "frequency",
    "bufferType",
    "vendor",
    "computedPower"
})
public class RAMStick implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Voltage voltage;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected RAMSize size;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected RAMTypeType type;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Frequency frequency;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected BufferTypeType bufferType;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected RAMTypeVendorType vendor;
    @XmlSchemaType(name = "double")
    protected Power computedPower;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public RAMStick() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public RAMStick(final Voltage voltage, final RAMSize size, final RAMTypeType type, final Frequency frequency, final BufferTypeType bufferType, final RAMTypeVendorType vendor, final Power computedPower, final QName jaxbElementName) {
        this.voltage = voltage;
        this.size = size;
        this.type = type;
        this.frequency = frequency;
        this.bufferType = bufferType;
        this.vendor = vendor;
        this.computedPower = computedPower;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the voltage property.
     * 
     * @return
     *     possible object is
     *     {@link Voltage }
     *     
     */
    public Voltage getVoltage() {
        return voltage;
    }

    /**
     * Sets the value of the voltage property.
     * 
     * @param value
     *     allowed object is
     *     {@link Voltage }
     *     
     */
    public void setVoltage(Voltage value) {
        this.voltage = value;
    }

    /**
     * Gets the value of the size property.
     * 
     * @return
     *     possible object is
     *     {@link RAMSize }
     *     
     */
    public RAMSize getSize() {
        return size;
    }

    /**
     * Sets the value of the size property.
     * 
     * @param value
     *     allowed object is
     *     {@link RAMSize }
     *     
     */
    public void setSize(RAMSize value) {
        this.size = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link RAMTypeType }
     *     
     */
    public RAMTypeType getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link RAMTypeType }
     *     
     */
    public void setType(RAMTypeType value) {
        this.type = value;
    }

    /**
     * Gets the value of the frequency property.
     * 
     * @return
     *     possible object is
     *     {@link Frequency }
     *     
     */
    public Frequency getFrequency() {
        return frequency;
    }

    /**
     * Sets the value of the frequency property.
     * 
     * @param value
     *     allowed object is
     *     {@link Frequency }
     *     
     */
    public void setFrequency(Frequency value) {
        this.frequency = value;
    }

    /**
     * Gets the value of the bufferType property.
     * 
     * @return
     *     possible object is
     *     {@link BufferTypeType }
     *     
     */
    public BufferTypeType getBufferType() {
        return bufferType;
    }

    /**
     * Sets the value of the bufferType property.
     * 
     * @param value
     *     allowed object is
     *     {@link BufferTypeType }
     *     
     */
    public void setBufferType(BufferTypeType value) {
        this.bufferType = value;
    }

    /**
     * Gets the value of the vendor property.
     * 
     * @return
     *     possible object is
     *     {@link RAMTypeVendorType }
     *     
     */
    public RAMTypeVendorType getVendor() {
        return vendor;
    }

    /**
     * Sets the value of the vendor property.
     * 
     * @param value
     *     allowed object is
     *     {@link RAMTypeVendorType }
     *     
     */
    public void setVendor(RAMTypeVendorType value) {
        this.vendor = value;
    }

    /**
     * Gets the value of the computedPower property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getComputedPower() {
        return computedPower;
    }

    /**
     * Sets the value of the computedPower property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setComputedPower(Power value) {
        this.computedPower = value;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof RAMStick) {
            final RAMStick copy = ((RAMStick) draftCopy);
            if (this.voltage!= null) {
                Voltage sourceVoltage;
                sourceVoltage = this.getVoltage();
                Voltage copyVoltage = ((Voltage) strategy.copy(LocatorUtils.property(locator, "voltage", sourceVoltage), sourceVoltage));
                copy.setVoltage(copyVoltage);
            } else {
                copy.voltage = null;
            }
            if (this.size!= null) {
                RAMSize sourceSize;
                sourceSize = this.getSize();
                RAMSize copySize = ((RAMSize) strategy.copy(LocatorUtils.property(locator, "size", sourceSize), sourceSize));
                copy.setSize(copySize);
            } else {
                copy.size = null;
            }
            if (this.type!= null) {
                RAMTypeType sourceType;
                sourceType = this.getType();
                RAMTypeType copyType = ((RAMTypeType) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType));
                copy.setType(copyType);
            } else {
                copy.type = null;
            }
            if (this.frequency!= null) {
                Frequency sourceFrequency;
                sourceFrequency = this.getFrequency();
                Frequency copyFrequency = ((Frequency) strategy.copy(LocatorUtils.property(locator, "frequency", sourceFrequency), sourceFrequency));
                copy.setFrequency(copyFrequency);
            } else {
                copy.frequency = null;
            }
            if (this.bufferType!= null) {
                BufferTypeType sourceBufferType;
                sourceBufferType = this.getBufferType();
                BufferTypeType copyBufferType = ((BufferTypeType) strategy.copy(LocatorUtils.property(locator, "bufferType", sourceBufferType), sourceBufferType));
                copy.setBufferType(copyBufferType);
            } else {
                copy.bufferType = null;
            }
            if (this.vendor!= null) {
                RAMTypeVendorType sourceVendor;
                sourceVendor = this.getVendor();
                RAMTypeVendorType copyVendor = ((RAMTypeVendorType) strategy.copy(LocatorUtils.property(locator, "vendor", sourceVendor), sourceVendor));
                copy.setVendor(copyVendor);
            } else {
                copy.vendor = null;
            }
            if (this.computedPower!= null) {
                Power sourceComputedPower;
                sourceComputedPower = this.getComputedPower();
                Power copyComputedPower = ((Power) strategy.copy(LocatorUtils.property(locator, "computedPower", sourceComputedPower), sourceComputedPower));
                copy.setComputedPower(copyComputedPower);
            } else {
                copy.computedPower = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RAMStick();
    }

}
