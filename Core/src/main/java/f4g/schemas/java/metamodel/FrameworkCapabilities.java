//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//

package f4g.schemas.java.metamodel;

public class FrameworkCapabilities implements Cloneable /* , CopyTo */
{

    protected NodeActions node;
    protected VMActions vm;

    /**
     * Default no-arg constructor
     * 
     */
    public FrameworkCapabilities() {
	super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public FrameworkCapabilities(final NodeActions node, final VMActions vm) {
	this.node = node;
	this.vm = vm;
    }

    /**
     * Gets the value of the node property.
     * 
     * @return possible object is {@link NodeActions }
     * 
     */
    public NodeActions getNode() {
	return node;
    }

    /**
     * Sets the value of the node property.
     * 
     * @param value
     *            allowed object is {@link NodeActions }
     * 
     */
    public void setNode(NodeActions value) {
	this.node = value;
    }

    /**
     * Gets the value of the vm property.
     * 
     * @return possible object is {@link VMActions }
     * 
     */
    public VMActions getVm() {
	return vm;
    }

    /**
     * Sets the value of the vm property.
     * 
     * @param value
     *            allowed object is {@link VMActions }
     * 
     */
    public void setVmActions(VMActions value) {
	this.vm = value;
    }

    /*
     * public Object clone() { return copyTo(createNewInstance()); }
     * 
     * public Object copyTo(Object target) { final CopyStrategy strategy =
     * JAXBCopyStrategy.INSTANCE; return copyTo(null, target, strategy); }
     * 
     * public Object copyTo(ObjectLocator locator, Object target, CopyStrategy
     * strategy) { final Object draftCopy = ((target ==
     * null)?createNewInstance():target); if (draftCopy instanceof
     * FrameworkCapabilities) { final FrameworkCapabilities copy =
     * ((FrameworkCapabilities) draftCopy); if (this.frameworkName!= null) {
     * String sourceFrameworkName; sourceFrameworkName =
     * this.getFrameworkName(); String copyFrameworkName = ((String)
     * strategy.copy(LocatorUtils.property(locator, "frameworkName",
     * sourceFrameworkName), sourceFrameworkName));
     * copy.setFrameworkName(copyFrameworkName); } else { copy.frameworkName =
     * null; } if (this.status!= null) { FrameworkStatus sourceStatus;
     * sourceStatus = this.getStatus(); FrameworkStatus copyStatus =
     * ((FrameworkStatus) strategy.copy(LocatorUtils.property(locator, "status",
     * sourceStatus), sourceStatus)); copy.setStatus(copyStatus); } else {
     * copy.status = null; } if (this.node!= null) { NodeActions sourceNode;
     * sourceNode = this.getNode(); NodeActions copyNode = ((NodeActions)
     * strategy.copy(LocatorUtils.property(locator, "node", sourceNode),
     * sourceNode)); copy.setNode(copyNode); } else { copy.node = null; } if
     * (this.vm!= null) { VMActions sourceVm; sourceVm = this.getVm(); VMActions
     * copyVm = ((VMActions) strategy.copy(LocatorUtils.property(locator, "vm",
     * sourceVm), sourceVm)); copy.setVm(copyVm); } else { copy.vm = null; } if
     * (this.job!= null) { JobActions sourceJob; sourceJob = this.getJob();
     * JobActions copyJob = ((JobActions)
     * strategy.copy(LocatorUtils.property(locator, "job", sourceJob),
     * sourceJob)); copy.setJob(copyJob); } else { copy.job = null; } if
     * (this.networkNode!= null) { NodeActions sourceNetworkNode;
     * sourceNetworkNode = this.getNetworkNode(); NodeActions copyNetworkNode =
     * ((NodeActions) strategy.copy(LocatorUtils.property(locator,
     * "networkNode", sourceNetworkNode), sourceNetworkNode));
     * copy.setNetworkNode(copyNetworkNode); } else { copy.networkNode = null; }
     * if (this.id!= null) { String sourceId; sourceId = this.getId(); String
     * copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id",
     * sourceId), sourceId)); copy.setId(copyId); } else { copy.id = null; } }
     * return draftCopy; }
     * 
     * public Object createNewInstance() { return new FrameworkCapabilities(); }
     */
}
