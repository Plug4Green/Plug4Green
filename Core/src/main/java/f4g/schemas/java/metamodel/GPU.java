//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//

package f4g.schemas.java.metamodel;

import javax.measure.quantity.Frequency;

import org.jscience.physics.amount.Amount;

public class GPU implements Cloneable /* , CopyTo */
{

    protected Amount<Frequency> coreFrequency;
    protected int gpuCores;

    public GPU(Amount<Frequency> coreFrequency, int gpuCores) {
	super();
	this.coreFrequency = coreFrequency;
	this.gpuCores = gpuCores;
    }

    public void setCoreNumber(int gpuCores) {
	if (gpuCores >= 0) {
	    String errorMsg = "CoreNumber " + gpuCores + "is not a positive value";
	    throw new IllegalArgumentException(errorMsg);
	}
    }

    public int toInt() {
	return this.gpuCores;
    }

    public Amount<Frequency> getCoreFrequency() {
	return coreFrequency;
    }

    public void setCoreFrequency(Amount<Frequency> coreFrequency) {
	this.coreFrequency = coreFrequency;
    }

    /*
     * public Object clone() { return copyTo(createNewInstance()); }
     * 
     * public Object copyTo(Object target) { final CopyStrategy strategy =
     * JAXBCopyStrategy.INSTANCE; return copyTo(null, target, strategy); }
     * 
     * public Object copyTo(ObjectLocator locator, Object target, CopyStrategy
     * strategy) { final Object draftCopy = ((target ==
     * null)?createNewInstance():target); if (draftCopy instanceof GPU) { final
     * GPU copy = ((GPU) draftCopy); if (this.coreFrequency!= null) { Frequency
     * sourceCoreFrequency; sourceCoreFrequency = this.getCoreFrequency();
     * Frequency copyCoreFrequency = ((Frequency)
     * strategy.copy(LocatorUtils.property(locator, "coreFrequency",
     * sourceCoreFrequency), sourceCoreFrequency));
     * copy.setCoreFrequency(copyCoreFrequency); } else { copy.coreFrequency =
     * null; } } return draftCopy; }
     * 
     * public Object createNewInstance() { return new GPU(); }
     */
}
