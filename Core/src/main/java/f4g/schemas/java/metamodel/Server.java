//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//

package f4g.schemas.java.metamodel;

import java.util.List;

import javax.measure.quantity.Power;
import javax.xml.datatype.XMLGregorianCalendar;

import org.joda.time.DateTime;
import org.jscience.physics.amount.Amount;

//TODO: implement CopyTo if needed
public class Server implements Cloneable /* , CopyTo */ {

    protected ServerRole name;
    protected ServerStatus status;
    protected ServerName serverName;
    protected Amount<Power> idlePower;
    protected Amount<Power> maxPower;
    protected DateTime lastOnOffTimestamp;
    protected RAMSize ramSize;
    protected StorageCapacity storageCapacity;
    protected Cores cores;
    protected GPU gpu;
    protected List<VirtualMachine> VMs;

    public Server(ServerRole name, ServerStatus status, ServerName frameworkID, Amount<Power> idlePower,
	    Amount<Power> maxPower, DateTime lastOnOffTimestamp, RAMSize ramSize, StorageCapacity storageCapacity,
	    Cores cores, GPU gpu, List<VirtualMachine> vMs) {
	super();
	this.name = name;
	this.status = status;
	this.serverName = frameworkID;
	this.idlePower = idlePower;
	this.maxPower = maxPower;
	this.lastOnOffTimestamp = lastOnOffTimestamp;
	this.ramSize = ramSize;
	this.storageCapacity = storageCapacity;
	this.cores = cores;
	this.gpu = gpu;
	this.VMs = vMs;
    }

    /**
     * Gets the value of name.
     *
     * @return possible object is {@link ServerRole }
     */
    public ServerRole getName() {
	return name;
    }

    /**
     * Sets the value of name.
     *
     * @param value
     *            allowed object is {@link ServerRole }
     */
    public void setName(ServerRole value) {
	this.name = value;
    }

    /**
     * Gets the value of status.
     *
     * @return possible object is {@link ServerStatus }
     */
    public ServerStatus getStatus() {
	return status;
    }

    /**
     * Sets the value of status.
     *
     * @param value
     *            allowed object is {@link ServerStatus }
     */
    public void setStatus(ServerStatus value) {
	this.status = value;
    }

    /**
     * Gets the value of frameworkID.
     *
     * @return possible object is {@link String }
     */
    public ServerName getFrameworkID() {
	return serverName;
    }

    /**
     * Sets the value of frameworkID.
     *
     * @param value
     *            allowed object is {@link String }
     */
    public void setFrameworkID(ServerName value) {
	this.serverName = value;
    }

    /**
     * Gets the value of idlePower.
     *
     * @return possible object is {@link Power }
     */
    public Amount<Power> getIdlePower() {
	return idlePower;
    }

    /**
     * Sets the value of idlePower.
     *
     * @param value
     *            allowed object is {@link Power }
     */
    public void setIdlePower(Amount<Power> value) {
	this.idlePower = value;
    }

    /**
     * Gets the value of maxPower.
     *
     * @return possible object is {@link Power }
     */
    public Amount<Power> getMaxPower() {
	return maxPower;
    }

    /**
     * Sets the value of maxPower.
     *
     * @param value
     *            allowed object is {@link Power }
     */
    public void setMeasuredPower(Amount<Power> value) {
	this.maxPower = value;
    }

    /**
     * Gets the value of ramSize.
     *
     * @return possible object is {@link RAMSize }
     */
    public RAMSize getRAMSize() {
	return this.ramSize;
    }

    /**
     * Sets the value of RAMSize.
     *
     * @param value
     *            allowed object is {@link RAMSize }
     */
    public void setRAMSize(RAMSize value) {
	this.ramSize = ramSize;
    }

    /**
     * Gets the value of StorageCapacity.
     *
     * @return possible object is {@link StorageCapacity }
     */
    public StorageCapacity getStorageCapacity() {
	return this.storageCapacity;
    }

    /**
     * Sets the value of StorageCapacity.
     *
     * @param value
     *            allowed object is {@link StorageCapacity }
     */
    public StorageCapacity setStorageCapacity(StorageCapacity value) {
	return this.storageCapacity = value;
    }

    /**
     * Sets the value of CoreNumber.
     *
     * @param value
     *            allowed object is {@link Cores }
     * @return
     */
    public void setCoreNumber(Cores value) {
	this.cores = value;
    }

    /**
     * Gets the value of the lastOnOffTimestamp.
     *
     * @return possibile object is {@link XMLGregorianCalendar }
     */
    public DateTime getLastOnOffTimestamp() {
	return lastOnOffTimestamp;
    }

    /**
     * Sets the value of the lastOnOffTimestamp.
     *
     * @param value
     *            allowed object is {@link XMLGregorianCalendar }
     */
    public void setLastOnOffTimestamp(DateTime value) {
	this.lastOnOffTimestamp = value;
    }

    /*
     * public Object copyTo(ObjectLocator locator, Object target, CopyStrategy
     * strategy) { final Object draftCopy = ((target == null) ?
     * createNewInstance() : target); if (draftCopy instanceof Server) { final
     * Server copy = ((Server) draftCopy); if (this.name != null) { ServerRole
     * sourceName; sourceName = this.getName(); ServerRole copyName =
     * ((ServerRole) strategy.copy(LocatorUtils.property(locator, "name",
     * sourceName), sourceName)); copy.setName(copyName); } else { copy.name =
     * null; } if (this.status != null) { ServerStatus sourceStatus;
     * sourceStatus = this.getStatus(); ServerStatus copyStatus =
     * ((ServerStatus) strategy.copy(LocatorUtils.property(locator, "status",
     * sourceStatus), sourceStatus)); copy.setStatus(copyStatus); } else {
     * copy.status = null; } if (this.frameworkID != null) { String
     * sourceFrameworkID; sourceFrameworkID = this.getFrameworkID(); String
     * copyFrameworkID = ((String) strategy.copy(LocatorUtils.property(locator,
     * "frameworkID", sourceFrameworkID), sourceFrameworkID));
     * copy.setFrameworkID(copyFrameworkID); } else { copy.frameworkID = null; }
     * if (this.computedPower != null) { Power sourceComputedPower;
     * sourceComputedPower = this.getComputedPower(); Power copyComputedPower =
     * ((Power) strategy.copy(LocatorUtils.property(locator, "computedPower",
     * sourceComputedPower), sourceComputedPower));
     * copy.setComputedPower(copyComputedPower); } else { copy.computedPower =
     * null; } if (this.measuredPower != null) { Power sourceMeasuredPower;
     * sourceMeasuredPower = this.getMeasuredPower(); Power copyMeasuredPower =
     * ((Power) strategy.copy(LocatorUtils.property(locator, "measuredPower",
     * sourceMeasuredPower), sourceMeasuredPower));
     * copy.setMeasuredPower(copyMeasuredPower); } else { copy.measuredPower =
     * null; } if ((this.logicalVolume != null) &&
     * (!this.logicalVolume.isEmpty())) { List<LogicalVolume>
     * sourceLogicalVolume; sourceLogicalVolume = (((this.logicalVolume != null)
     * && (!this.logicalVolume.isEmpty())) ? this.getLogicalVolume() : null);
     * 
     * @SuppressWarnings("unchecked") List<LogicalVolume> copyLogicalVolume =
     * ((List<LogicalVolume>) strategy.copy(LocatorUtils.property(locator,
     * "logicalVolume", sourceLogicalVolume), sourceLogicalVolume));
     * copy.logicalVolume = null; if (copyLogicalVolume != null) {
     * List<LogicalVolume> uniqueLogicalVolumel = copy.getLogicalVolume();
     * uniqueLogicalVolumel.addAll(copyLogicalVolume); } } else {
     * copy.logicalVolume = null; } if ((this.mainboard != null) &&
     * (!this.mainboard.isEmpty())) { List<Mainboard> sourceMainboard;
     * sourceMainboard = (((this.mainboard != null) &&
     * (!this.mainboard.isEmpty())) ? this.getMainboard() : null);
     * 
     * @SuppressWarnings("unchecked") List<Mainboard> copyMainboard =
     * ((List<Mainboard>) strategy.copy(LocatorUtils.property(locator,
     * "mainboard", sourceMainboard), sourceMainboard)); copy.mainboard = null;
     * if (copyMainboard != null) { List<Mainboard> uniqueMainboardl =
     * copy.getMainboard(); uniqueMainboardl.addAll(copyMainboard); } } else {
     * copy.mainboard = null; } if (this.nativeOperatingSystem != null) {
     * NativeOperatingSystem sourceNativeOperatingSystem;
     * sourceNativeOperatingSystem = this.getNativeOperatingSystem();
     * NativeOperatingSystem copyNativeOperatingSystem =
     * ((NativeOperatingSystem) strategy.copy(LocatorUtils.property(locator,
     * "nativeOperatingSystem", sourceNativeOperatingSystem),
     * sourceNativeOperatingSystem));
     * copy.setNativeOperatingSystem(copyNativeOperatingSystem); } else {
     * copy.nativeOperatingSystem = null; } if (this.nativeHypervisor != null) {
     * NativeHypervisor sourceNativeHypervisor; sourceNativeHypervisor =
     * this.getNativeHypervisor(); NativeHypervisor copyNativeHypervisor =
     * ((NativeHypervisor) strategy.copy(LocatorUtils.property(locator,
     * "nativeHypervisor", sourceNativeHypervisor), sourceNativeHypervisor));
     * copy.setNativeHypervisor(copyNativeHypervisor); } else {
     * copy.nativeHypervisor = null; } if (this.lastOnOffTimestamp != null) {
     * XMLGregorianCalendar sourceLastOnOffTimestamp; sourceLastOnOffTimestamp =
     * this.getLastOnOffTimestamp(); XMLGregorianCalendar copyLastOnOffTimestamp
     * = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator,
     * "lastOnOffTimestamp", sourceLastOnOffTimestamp),
     * sourceLastOnOffTimestamp));
     * copy.setLastOnOffTimestamp(copyLastOnOffTimestamp); } else {
     * copy.lastOnOffTimestamp = null; } if (this.frameworkRef != null) { Object
     * sourceFrameworkRef; sourceFrameworkRef = this.getFrameworkRef(); Object
     * copyFrameworkRef = ((Object) strategy.copy(LocatorUtils.property(locator,
     * "frameworkRef", sourceFrameworkRef), sourceFrameworkRef));
     * copy.setFrameworkRef(copyFrameworkRef); } else { copy.frameworkRef =
     * null; } } return draftCopy; }
     * 
     * public Object createNewInstance() { return new Server(); }
     */
}
