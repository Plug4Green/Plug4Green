//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for RackableServer complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RackableServer"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{f4g/schemas/java/MetaModel}Server"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}PSU" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}Fan" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}WaterCooler" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RackableServer", propOrder = {
    "psu",
    "fan",
    "waterCooler"
})
public class RackableServer
    extends Server
    implements Cloneable, Visitable, CopyTo
{

    @XmlElement(name = "PSU", namespace = "f4g/schemas/java/MetaModel")
    protected List<PSU> psu;
    @XmlElement(name = "Fan", namespace = "f4g/schemas/java/MetaModel")
    protected List<Fan> fan;
    @XmlElement(name = "WaterCooler", namespace = "f4g/schemas/java/MetaModel")
    protected List<WaterCooler> waterCooler;

    /**
     * Default no-arg constructor
     * 
     */
    public RackableServer() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public RackableServer(final ServerRole name, final ServerStatus status, final String frameworkID, final Power computedPower, final Power measuredPower, final List<LogicalVolume> logicalVolume, final List<Mainboard> mainboard, final NativeOperatingSystem nativeOperatingSystem, final NativeHypervisor nativeHypervisor, final XMLGregorianCalendar lastOnOffTimestamp, final Object frameworkRef, final QName jaxbElementName, final List<PSU> psu, final List<Fan> fan, final List<WaterCooler> waterCooler) {
        super(name, status, frameworkID, computedPower, measuredPower, logicalVolume, mainboard, nativeOperatingSystem, nativeHypervisor, lastOnOffTimestamp, frameworkRef, jaxbElementName);
        this.psu = psu;
        this.fan = fan;
        this.waterCooler = waterCooler;
    }

    /**
     * Gets the value of the psu property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the psu property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPSU().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PSU }
     * 
     * 
     */
    public List<PSU> getPSU() {
        if (psu == null) {
            psu = new ArrayList<PSU>();
        }
        return this.psu;
    }

    /**
     * Gets the value of the fan property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the fan property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFan().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Fan }
     * 
     * 
     */
    public List<Fan> getFan() {
        if (fan == null) {
            fan = new ArrayList<Fan>();
        }
        return this.fan;
    }

    /**
     * Gets the value of the waterCooler property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the waterCooler property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getWaterCooler().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link WaterCooler }
     * 
     * 
     */
    public List<WaterCooler> getWaterCooler() {
        if (waterCooler == null) {
            waterCooler = new ArrayList<WaterCooler>();
        }
        return this.waterCooler;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof RackableServer) {
            final RackableServer copy = ((RackableServer) draftCopy);
            if ((this.psu!= null)&&(!this.psu.isEmpty())) {
                List<PSU> sourcePSU;
                sourcePSU = (((this.psu!= null)&&(!this.psu.isEmpty()))?this.getPSU():null);
                @SuppressWarnings("unchecked")
                List<PSU> copyPSU = ((List<PSU> ) strategy.copy(LocatorUtils.property(locator, "psu", sourcePSU), sourcePSU));
                copy.psu = null;
                if (copyPSU!= null) {
                    List<PSU> uniquePSUl = copy.getPSU();
                    uniquePSUl.addAll(copyPSU);
                }
            } else {
                copy.psu = null;
            }
            if ((this.fan!= null)&&(!this.fan.isEmpty())) {
                List<Fan> sourceFan;
                sourceFan = (((this.fan!= null)&&(!this.fan.isEmpty()))?this.getFan():null);
                @SuppressWarnings("unchecked")
                List<Fan> copyFan = ((List<Fan> ) strategy.copy(LocatorUtils.property(locator, "fan", sourceFan), sourceFan));
                copy.fan = null;
                if (copyFan!= null) {
                    List<Fan> uniqueFanl = copy.getFan();
                    uniqueFanl.addAll(copyFan);
                }
            } else {
                copy.fan = null;
            }
            if ((this.waterCooler!= null)&&(!this.waterCooler.isEmpty())) {
                List<WaterCooler> sourceWaterCooler;
                sourceWaterCooler = (((this.waterCooler!= null)&&(!this.waterCooler.isEmpty()))?this.getWaterCooler():null);
                @SuppressWarnings("unchecked")
                List<WaterCooler> copyWaterCooler = ((List<WaterCooler> ) strategy.copy(LocatorUtils.property(locator, "waterCooler", sourceWaterCooler), sourceWaterCooler));
                copy.waterCooler = null;
                if (copyWaterCooler!= null) {
                    List<WaterCooler> uniqueWaterCoolerl = copy.getWaterCooler();
                    uniqueWaterCoolerl.addAll(copyWaterCooler);
                }
            } else {
                copy.waterCooler = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new RackableServer();
    }

}
