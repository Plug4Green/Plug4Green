//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import f4g.schemas.java.IDREFS;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Node complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Node"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{f4g/schemas/java/MetaModel}SoftwareApplication"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="properties" type="{f4g/schemas/java/MetaModel}NodeProp"/&gt;
 *         &lt;element name="status" type="{f4g/schemas/java/MetaModel}NodeStatus"/&gt;
 *         &lt;element name="coresInUse" type="{f4g/schemas/java/MetaModel}NrOfCores"/&gt;
 *         &lt;element name="jobRef" type="{http://www.w3.org/2001/XMLSchema}IDREFS" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Node", propOrder = {
    "properties",
    "status",
    "coresInUse",
    "jobRef"
})
public class Node
    extends SoftwareApplication
    implements Cloneable, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected NodeProp properties;
    @XmlElement(required = true)
    @XmlSchemaType(name = "string")
    protected NodeStatus status;
    @XmlElement(required = true)
    @XmlSchemaType(name = "int")
    protected NrOfCores coresInUse;
    protected IDREFS jobRef;

    /**
     * Default no-arg constructor
     * 
     */
    public Node() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Node(final String name, final NrOfCpus numberOfCPUs, final CpuUsage actualCPUUsage, final StorageUsage actualStorageUsage, final IoRate actualDiskIORate, final MemoryUsage actualMemoryUsage, final NetworkUsage actualNetworkUsage, final QName jaxbElementName, final NodeProp properties, final NodeStatus status, final NrOfCores coresInUse, final IDREFS jobRef) {
        super(name, numberOfCPUs, actualCPUUsage, actualStorageUsage, actualDiskIORate, actualMemoryUsage, actualNetworkUsage, jaxbElementName);
        this.properties = properties;
        this.status = status;
        this.coresInUse = coresInUse;
        this.jobRef = jobRef;
    }

    /**
     * Gets the value of the properties property.
     * 
     * @return
     *     possible object is
     *     {@link NodeProp }
     *     
     */
    public NodeProp getProperties() {
        return properties;
    }

    /**
     * Sets the value of the properties property.
     * 
     * @param value
     *     allowed object is
     *     {@link NodeProp }
     *     
     */
    public void setProperties(NodeProp value) {
        this.properties = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link NodeStatus }
     *     
     */
    public NodeStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link NodeStatus }
     *     
     */
    public void setStatus(NodeStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the coresInUse property.
     * 
     * @return
     *     possible object is
     *     {@link NrOfCores }
     *     
     */
    public NrOfCores getCoresInUse() {
        return coresInUse;
    }

    /**
     * Sets the value of the coresInUse property.
     * 
     * @param value
     *     allowed object is
     *     {@link NrOfCores }
     *     
     */
    public void setCoresInUse(NrOfCores value) {
        this.coresInUse = value;
    }

    /**
     * Gets the value of the jobRef property.
     * 
     * @return
     *     possible object is
     *     {@link IDREFS }
     *     
     */
    public IDREFS getJobRef() {
        return jobRef;
    }

    /**
     * Sets the value of the jobRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link IDREFS }
     *     
     */
    public void setJobRef(IDREFS value) {
        this.jobRef = value;
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof Node) {
            final Node copy = ((Node) draftCopy);
            if (this.properties!= null) {
                NodeProp sourceProperties;
                sourceProperties = this.getProperties();
                NodeProp copyProperties = ((NodeProp) strategy.copy(LocatorUtils.property(locator, "properties", sourceProperties), sourceProperties));
                copy.setProperties(copyProperties);
            } else {
                copy.properties = null;
            }
            if (this.status!= null) {
                NodeStatus sourceStatus;
                sourceStatus = this.getStatus();
                NodeStatus copyStatus = ((NodeStatus) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                copy.setStatus(copyStatus);
            } else {
                copy.status = null;
            }
            if (this.coresInUse!= null) {
                NrOfCores sourceCoresInUse;
                sourceCoresInUse = this.getCoresInUse();
                NrOfCores copyCoresInUse = ((NrOfCores) strategy.copy(LocatorUtils.property(locator, "coresInUse", sourceCoresInUse), sourceCoresInUse));
                copy.setCoresInUse(copyCoresInUse);
            } else {
                copy.coresInUse = null;
            }
            if (this.jobRef!= null) {
                IDREFS sourceJobRef;
                sourceJobRef = this.getJobRef();
                IDREFS copyJobRef = ((IDREFS) strategy.copy(LocatorUtils.property(locator, "jobRef", sourceJobRef), sourceJobRef));
                copy.setJobRef(copyJobRef);
            } else {
                copy.jobRef = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Node();
    }

}
