//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//

package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;

//TODO: implement CopyTo
public class Federation implements Cloneable /* , CopyTo */
{

    protected List<Datacenter> datacenters;
    protected DateTime currentTime;

    /*
     * protected List<String> description; protected List<String> version;
     */

    // TODO: implement CopyTo
    /**
     * Fully-initialising value constructor
     * 
     */
    public Federation(final List<Datacenter> datacenters, final DateTime datetime) {
	this.datacenters = datacenters;
	this.currentTime = datetime;
    }

    public List<Datacenter> getDatacenter() {
	if (datacenters == null) {
	    datacenters = new ArrayList<Datacenter>();
	}
	return datacenters;
    }

    /**
     * Gets the value of the datetime.
     * 
     * @return possible object is {@link DateTime }
     * 
     */
    public DateTime getcurrentTime() {
	return currentTime;
    }

    /**
     * Sets the datetime value .
     * 
     * @param value
     *            allowed object is {@link DateTime }
     * 
     */
    public void setcurrentTime(DateTime value) {
	this.currentTime = value;
    }

    /*
     * public Object clone() { return copyTo(createNewInstance()); }
     * 
     * public Object copyTo(Object target) { final CopyStrategy strategy =
     * JAXBCopyStrategy.INSTANCE; return copyTo(null, target, strategy); }
     * 
     * public Object copyTo(ObjectLocator locator, Object target, CopyStrategy
     * strategy) { final Object draftCopy = ((target ==
     * null)?createNewInstance():target); if (draftCopy instanceof Federation) {
     * final Federation copy = ((Federation) draftCopy); if ((this.site!=
     * null)&&(!this.site.isEmpty())) { List<Site> sourceSite; sourceSite =
     * (((this.site!= null)&&(!this.site.isEmpty()))?this.getSite():null);
     * 
     * @SuppressWarnings("unchecked") List<Site> copySite = ((List<Site> )
     * strategy.copy(LocatorUtils.property(locator, "site", sourceSite),
     * sourceSite)); copy.site = null; if (copySite!= null) { List<Site>
     * uniqueSitel = copy.getSite(); uniqueSitel.addAll(copySite); } } else {
     * copy.site = null; } if ((this.description!=
     * null)&&(!this.description.isEmpty())) { List<String> sourceDescription;
     * sourceDescription = (((this.description!=
     * null)&&(!this.description.isEmpty()))?this.getDescription():null);
     * 
     * @SuppressWarnings("unchecked") List<String> copyDescription =
     * ((List<String> ) strategy.copy(LocatorUtils.property(locator,
     * "description", sourceDescription), sourceDescription)); copy.description
     * = null; if (copyDescription!= null) { List<String> uniqueDescriptionl =
     * copy.getDescription(); uniqueDescriptionl.addAll(copyDescription); } }
     * else { copy.description = null; } if ((this.version!=
     * null)&&(!this.version.isEmpty())) { List<String> sourceVersion;
     * sourceVersion = (((this.version!=
     * null)&&(!this.version.isEmpty()))?this.getVersion():null);
     * 
     * @SuppressWarnings("unchecked") List<String> copyVersion = ((List<String>
     * ) strategy.copy(LocatorUtils.property(locator, "version", sourceVersion),
     * sourceVersion)); copy.version = null; if (copyVersion!= null) {
     * List<String> uniqueVersionl = copy.getVersion();
     * uniqueVersionl.addAll(copyVersion); } } else { copy.version = null; } if
     * (this.datetime!= null) { XMLGregorianCalendar sourceDatetime;
     * sourceDatetime = this.getDatetime(); XMLGregorianCalendar copyDatetime =
     * ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator,
     * "datetime", sourceDatetime), sourceDatetime));
     * copy.setDatetime(copyDatetime); } else { copy.datetime = null; } } return
     * draftCopy; }
     * 
     * @Override public Object createNewInstance() { // TODO Auto-generated
     * method stub return null; }
     */

    /*
     * public List<String> getDescription() { if (description == null) {
     * description = new ArrayList<String>(); } return this.description; }
     * 
     * 
     * public List<String> getVersion() { if (version == null) { version = new
     * ArrayList<String>(); } return this.version; }
     */

}
