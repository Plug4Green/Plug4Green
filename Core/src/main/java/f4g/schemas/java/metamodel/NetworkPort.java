//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for NetworkPort complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="NetworkPort"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="lineCapacity" type="{f4g/schemas/java/MetaModel}NetworkTraffic"/&gt;
 *         &lt;element name="powerIdle" type="{f4g/schemas/java/MetaModel}Power"/&gt;
 *         &lt;element name="powerMax" type="{f4g/schemas/java/MetaModel}Power"/&gt;
 *         &lt;element name="portID" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="trafficIn" type="{f4g/schemas/java/MetaModel}NetworkTraffic" minOccurs="0"/&gt;
 *         &lt;element name="trafficOut" type="{f4g/schemas/java/MetaModel}NetworkTraffic" minOccurs="0"/&gt;
 *         &lt;element name="bufferSize" type="{f4g/schemas/java/MetaModel}NetworkPortBufferSize" minOccurs="0"/&gt;
 *         &lt;element name="bufferOccupancy" type="{f4g/schemas/java/MetaModel}NetworkPortBufferOccupancy" minOccurs="0"/&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}Link" minOccurs="0"/&gt;
 *         &lt;element name="NetworkPortRef" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="Id" use="required" type="{http://www.w3.org/2001/XMLSchema}ID" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NetworkPort", propOrder = {
    "lineCapacity",
    "powerIdle",
    "powerMax",
    "portID",
    "trafficIn",
    "trafficOut",
    "bufferSize",
    "bufferOccupancy",
    "link",
    "networkPortRef"
})
@XmlSeeAlso({
    ATM.class,
    VPN.class,
    E80211X.class,
    Ethernet.class,
    Tunnel.class,
    SerialPPP.class,
    OpticalFDDI.class
})
public class NetworkPort implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected NetworkTraffic lineCapacity;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Power powerIdle;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected Power powerMax;
    @XmlElement(required = true)
    protected String portID;
    @XmlSchemaType(name = "double")
    protected NetworkTraffic trafficIn;
    @XmlSchemaType(name = "double")
    protected NetworkTraffic trafficOut;
    @XmlSchemaType(name = "double")
    protected NetworkPortBufferSize bufferSize;
    @XmlSchemaType(name = "double")
    protected NetworkPortBufferOccupancy bufferOccupancy;
    @XmlElement(name = "Link", namespace = "f4g/schemas/java/MetaModel")
    protected Link link;
    @XmlElement(name = "NetworkPortRef")
    protected String networkPortRef;
    @XmlAttribute(name = "Id", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public NetworkPort() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public NetworkPort(final NetworkTraffic lineCapacity, final Power powerIdle, final Power powerMax, final String portID, final NetworkTraffic trafficIn, final NetworkTraffic trafficOut, final NetworkPortBufferSize bufferSize, final NetworkPortBufferOccupancy bufferOccupancy, final Link link, final String networkPortRef, final String id, final QName jaxbElementName) {
        this.lineCapacity = lineCapacity;
        this.powerIdle = powerIdle;
        this.powerMax = powerMax;
        this.portID = portID;
        this.trafficIn = trafficIn;
        this.trafficOut = trafficOut;
        this.bufferSize = bufferSize;
        this.bufferOccupancy = bufferOccupancy;
        this.link = link;
        this.networkPortRef = networkPortRef;
        this.id = id;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the lineCapacity property.
     * 
     * @return
     *     possible object is
     *     {@link NetworkTraffic }
     *     
     */
    public NetworkTraffic getLineCapacity() {
        return lineCapacity;
    }

    /**
     * Sets the value of the lineCapacity property.
     * 
     * @param value
     *     allowed object is
     *     {@link NetworkTraffic }
     *     
     */
    public void setLineCapacity(NetworkTraffic value) {
        this.lineCapacity = value;
    }

    /**
     * Gets the value of the powerIdle property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getPowerIdle() {
        return powerIdle;
    }

    /**
     * Sets the value of the powerIdle property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setPowerIdle(Power value) {
        this.powerIdle = value;
    }

    /**
     * Gets the value of the powerMax property.
     * 
     * @return
     *     possible object is
     *     {@link Power }
     *     
     */
    public Power getPowerMax() {
        return powerMax;
    }

    /**
     * Sets the value of the powerMax property.
     * 
     * @param value
     *     allowed object is
     *     {@link Power }
     *     
     */
    public void setPowerMax(Power value) {
        this.powerMax = value;
    }

    /**
     * Gets the value of the portID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPortID() {
        return portID;
    }

    /**
     * Sets the value of the portID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPortID(String value) {
        this.portID = value;
    }

    /**
     * Gets the value of the trafficIn property.
     * 
     * @return
     *     possible object is
     *     {@link NetworkTraffic }
     *     
     */
    public NetworkTraffic getTrafficIn() {
        return trafficIn;
    }

    /**
     * Sets the value of the trafficIn property.
     * 
     * @param value
     *     allowed object is
     *     {@link NetworkTraffic }
     *     
     */
    public void setTrafficIn(NetworkTraffic value) {
        this.trafficIn = value;
    }

    /**
     * Gets the value of the trafficOut property.
     * 
     * @return
     *     possible object is
     *     {@link NetworkTraffic }
     *     
     */
    public NetworkTraffic getTrafficOut() {
        return trafficOut;
    }

    /**
     * Sets the value of the trafficOut property.
     * 
     * @param value
     *     allowed object is
     *     {@link NetworkTraffic }
     *     
     */
    public void setTrafficOut(NetworkTraffic value) {
        this.trafficOut = value;
    }

    /**
     * Gets the value of the bufferSize property.
     * 
     * @return
     *     possible object is
     *     {@link NetworkPortBufferSize }
     *     
     */
    public NetworkPortBufferSize getBufferSize() {
        return bufferSize;
    }

    /**
     * Sets the value of the bufferSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link NetworkPortBufferSize }
     *     
     */
    public void setBufferSize(NetworkPortBufferSize value) {
        this.bufferSize = value;
    }

    /**
     * Gets the value of the bufferOccupancy property.
     * 
     * @return
     *     possible object is
     *     {@link NetworkPortBufferOccupancy }
     *     
     */
    public NetworkPortBufferOccupancy getBufferOccupancy() {
        return bufferOccupancy;
    }

    /**
     * Sets the value of the bufferOccupancy property.
     * 
     * @param value
     *     allowed object is
     *     {@link NetworkPortBufferOccupancy }
     *     
     */
    public void setBufferOccupancy(NetworkPortBufferOccupancy value) {
        this.bufferOccupancy = value;
    }

    /**
     * Gets the value of the link property.
     * 
     * @return
     *     possible object is
     *     {@link Link }
     *     
     */
    public Link getLink() {
        return link;
    }

    /**
     * Sets the value of the link property.
     * 
     * @param value
     *     allowed object is
     *     {@link Link }
     *     
     */
    public void setLink(Link value) {
        this.link = value;
    }

    /**
     * Gets the value of the networkPortRef property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getNetworkPortRef() {
        return networkPortRef;
    }

    /**
     * Sets the value of the networkPortRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setNetworkPortRef(String value) {
        this.networkPortRef = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof NetworkPort) {
            final NetworkPort copy = ((NetworkPort) draftCopy);
            if (this.lineCapacity!= null) {
                NetworkTraffic sourceLineCapacity;
                sourceLineCapacity = this.getLineCapacity();
                NetworkTraffic copyLineCapacity = ((NetworkTraffic) strategy.copy(LocatorUtils.property(locator, "lineCapacity", sourceLineCapacity), sourceLineCapacity));
                copy.setLineCapacity(copyLineCapacity);
            } else {
                copy.lineCapacity = null;
            }
            if (this.powerIdle!= null) {
                Power sourcePowerIdle;
                sourcePowerIdle = this.getPowerIdle();
                Power copyPowerIdle = ((Power) strategy.copy(LocatorUtils.property(locator, "powerIdle", sourcePowerIdle), sourcePowerIdle));
                copy.setPowerIdle(copyPowerIdle);
            } else {
                copy.powerIdle = null;
            }
            if (this.powerMax!= null) {
                Power sourcePowerMax;
                sourcePowerMax = this.getPowerMax();
                Power copyPowerMax = ((Power) strategy.copy(LocatorUtils.property(locator, "powerMax", sourcePowerMax), sourcePowerMax));
                copy.setPowerMax(copyPowerMax);
            } else {
                copy.powerMax = null;
            }
            if (this.portID!= null) {
                String sourcePortID;
                sourcePortID = this.getPortID();
                String copyPortID = ((String) strategy.copy(LocatorUtils.property(locator, "portID", sourcePortID), sourcePortID));
                copy.setPortID(copyPortID);
            } else {
                copy.portID = null;
            }
            if (this.trafficIn!= null) {
                NetworkTraffic sourceTrafficIn;
                sourceTrafficIn = this.getTrafficIn();
                NetworkTraffic copyTrafficIn = ((NetworkTraffic) strategy.copy(LocatorUtils.property(locator, "trafficIn", sourceTrafficIn), sourceTrafficIn));
                copy.setTrafficIn(copyTrafficIn);
            } else {
                copy.trafficIn = null;
            }
            if (this.trafficOut!= null) {
                NetworkTraffic sourceTrafficOut;
                sourceTrafficOut = this.getTrafficOut();
                NetworkTraffic copyTrafficOut = ((NetworkTraffic) strategy.copy(LocatorUtils.property(locator, "trafficOut", sourceTrafficOut), sourceTrafficOut));
                copy.setTrafficOut(copyTrafficOut);
            } else {
                copy.trafficOut = null;
            }
            if (this.bufferSize!= null) {
                NetworkPortBufferSize sourceBufferSize;
                sourceBufferSize = this.getBufferSize();
                NetworkPortBufferSize copyBufferSize = ((NetworkPortBufferSize) strategy.copy(LocatorUtils.property(locator, "bufferSize", sourceBufferSize), sourceBufferSize));
                copy.setBufferSize(copyBufferSize);
            } else {
                copy.bufferSize = null;
            }
            if (this.bufferOccupancy!= null) {
                NetworkPortBufferOccupancy sourceBufferOccupancy;
                sourceBufferOccupancy = this.getBufferOccupancy();
                NetworkPortBufferOccupancy copyBufferOccupancy = ((NetworkPortBufferOccupancy) strategy.copy(LocatorUtils.property(locator, "bufferOccupancy", sourceBufferOccupancy), sourceBufferOccupancy));
                copy.setBufferOccupancy(copyBufferOccupancy);
            } else {
                copy.bufferOccupancy = null;
            }
            if (this.link!= null) {
                Link sourceLink;
                sourceLink = this.getLink();
                Link copyLink = ((Link) strategy.copy(LocatorUtils.property(locator, "link", sourceLink), sourceLink));
                copy.setLink(copyLink);
            } else {
                copy.link = null;
            }
            if (this.networkPortRef!= null) {
                String sourceNetworkPortRef;
                sourceNetworkPortRef = this.getNetworkPortRef();
                String copyNetworkPortRef = ((String) strategy.copy(LocatorUtils.property(locator, "networkPortRef", sourceNetworkPortRef), sourceNetworkPortRef));
                copy.setNetworkPortRef(copyNetworkPortRef);
            } else {
                copy.networkPortRef = null;
            }
            if (this.id!= null) {
                String sourceId;
                sourceId = this.getId();
                String copyId = ((String) strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId));
                copy.setId(copyId);
            } else {
                copy.id = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new NetworkPort();
    }

}
