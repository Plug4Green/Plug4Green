//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for FIT4Green complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FIT4Green"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{f4g/schemas/java/MetaModel}Site" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="description" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="version" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="Datetime" type="{http://www.w3.org/2001/XMLSchema}dateTime" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FIT4Green", propOrder = {
    "site",
    "description",
    "version",
    "datetime"
})
public class FIT4Green implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(name = "Site", namespace = "f4g/schemas/java/MetaModel")
    protected List<Site> site;
    protected List<String> description;
    protected List<String> version;
    @XmlElement(name = "Datetime")
    @XmlSchemaType(name = "dateTime")
    protected XMLGregorianCalendar datetime;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public FIT4Green() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public FIT4Green(final List<Site> site, final List<String> description, final List<String> version, final XMLGregorianCalendar datetime, final QName jaxbElementName) {
        this.site = site;
        this.description = description;
        this.version = version;
        this.datetime = datetime;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the site property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the site property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSite().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Site }
     * 
     * 
     */
    public List<Site> getSite() {
        if (site == null) {
            site = new ArrayList<Site>();
        }
        return this.site;
    }

    /**
     * Gets the value of the description property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the description property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDescription().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getDescription() {
        if (description == null) {
            description = new ArrayList<String>();
        }
        return this.description;
    }

    /**
     * Gets the value of the version property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the version property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVersion().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getVersion() {
        if (version == null) {
            version = new ArrayList<String>();
        }
        return this.version;
    }

    /**
     * Gets the value of the datetime property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getDatetime() {
        return datetime;
    }

    /**
     * Sets the value of the datetime property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setDatetime(XMLGregorianCalendar value) {
        this.datetime = value;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof FIT4Green) {
            final FIT4Green copy = ((FIT4Green) draftCopy);
            if ((this.site!= null)&&(!this.site.isEmpty())) {
                List<Site> sourceSite;
                sourceSite = (((this.site!= null)&&(!this.site.isEmpty()))?this.getSite():null);
                @SuppressWarnings("unchecked")
                List<Site> copySite = ((List<Site> ) strategy.copy(LocatorUtils.property(locator, "site", sourceSite), sourceSite));
                copy.site = null;
                if (copySite!= null) {
                    List<Site> uniqueSitel = copy.getSite();
                    uniqueSitel.addAll(copySite);
                }
            } else {
                copy.site = null;
            }
            if ((this.description!= null)&&(!this.description.isEmpty())) {
                List<String> sourceDescription;
                sourceDescription = (((this.description!= null)&&(!this.description.isEmpty()))?this.getDescription():null);
                @SuppressWarnings("unchecked")
                List<String> copyDescription = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.description = null;
                if (copyDescription!= null) {
                    List<String> uniqueDescriptionl = copy.getDescription();
                    uniqueDescriptionl.addAll(copyDescription);
                }
            } else {
                copy.description = null;
            }
            if ((this.version!= null)&&(!this.version.isEmpty())) {
                List<String> sourceVersion;
                sourceVersion = (((this.version!= null)&&(!this.version.isEmpty()))?this.getVersion():null);
                @SuppressWarnings("unchecked")
                List<String> copyVersion = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "version", sourceVersion), sourceVersion));
                copy.version = null;
                if (copyVersion!= null) {
                    List<String> uniqueVersionl = copy.getVersion();
                    uniqueVersionl.addAll(copyVersion);
                }
            } else {
                copy.version = null;
            }
            if (this.datetime!= null) {
                XMLGregorianCalendar sourceDatetime;
                sourceDatetime = this.getDatetime();
                XMLGregorianCalendar copyDatetime = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "datetime", sourceDatetime), sourceDatetime));
                copy.setDatetime(copyDatetime);
            } else {
                copy.datetime = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new FIT4Green();
    }

}
