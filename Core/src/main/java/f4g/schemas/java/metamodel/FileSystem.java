//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.08.10 at 04:34:50 PM CEST 
//


package f4g.schemas.java.metamodel;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;
import com.massfords.humantask.Named;
import com.massfords.humantask.Visitable;
import com.massfords.humantask.Visitor;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for FileSystem complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FileSystem"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="fragmentation" type="{f4g/schemas/java/MetaModel}FileSystemFragmentation"/&gt;
 *         &lt;element name="size" type="{f4g/schemas/java/MetaModel}FileSystemSpace"/&gt;
 *         &lt;element name="free" type="{f4g/schemas/java/MetaModel}FileSystemSpace"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="RAIDRef" type="{http://www.w3.org/2001/XMLSchema}IDREF" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FileSystem", propOrder = {
    "name",
    "fragmentation",
    "size",
    "free"
})
public class FileSystem implements Cloneable, Named, Visitable, CopyTo
{

    @XmlElement(required = true)
    protected String name;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected FileSystemFragmentation fragmentation;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected FileSystemSpace size;
    @XmlElement(required = true)
    @XmlSchemaType(name = "double")
    protected FileSystemSpace free;
    @XmlAttribute(name = "RAIDRef")
    @XmlIDREF
    @XmlSchemaType(name = "IDREF")
    protected Object raidRef;
    @XmlTransient
    private QName jaxbElementName;

    /**
     * Default no-arg constructor
     * 
     */
    public FileSystem() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public FileSystem(final String name, final FileSystemFragmentation fragmentation, final FileSystemSpace size, final FileSystemSpace free, final Object raidRef, final QName jaxbElementName) {
        this.name = name;
        this.fragmentation = fragmentation;
        this.size = size;
        this.free = free;
        this.raidRef = raidRef;
        this.jaxbElementName = jaxbElementName;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the fragmentation property.
     * 
     * @return
     *     possible object is
     *     {@link FileSystemFragmentation }
     *     
     */
    public FileSystemFragmentation getFragmentation() {
        return fragmentation;
    }

    /**
     * Sets the value of the fragmentation property.
     * 
     * @param value
     *     allowed object is
     *     {@link FileSystemFragmentation }
     *     
     */
    public void setFragmentation(FileSystemFragmentation value) {
        this.fragmentation = value;
    }

    /**
     * Gets the value of the size property.
     * 
     * @return
     *     possible object is
     *     {@link FileSystemSpace }
     *     
     */
    public FileSystemSpace getSize() {
        return size;
    }

    /**
     * Sets the value of the size property.
     * 
     * @param value
     *     allowed object is
     *     {@link FileSystemSpace }
     *     
     */
    public void setSize(FileSystemSpace value) {
        this.size = value;
    }

    /**
     * Gets the value of the free property.
     * 
     * @return
     *     possible object is
     *     {@link FileSystemSpace }
     *     
     */
    public FileSystemSpace getFree() {
        return free;
    }

    /**
     * Sets the value of the free property.
     * 
     * @param value
     *     allowed object is
     *     {@link FileSystemSpace }
     *     
     */
    public void setFree(FileSystemSpace value) {
        this.free = value;
    }

    /**
     * Gets the value of the raidRef property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getRAIDRef() {
        return raidRef;
    }

    /**
     * Sets the value of the raidRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setRAIDRef(Object value) {
        this.raidRef = value;
    }

    public void setJAXBElementName(QName name) {
        this.jaxbElementName = name;
    }

    public QName getJAXBElementName() {
        return this.jaxbElementName;
    }

    public void afterUnmarshal(Unmarshaller u, Object parent) {
        if (parent instanceof JAXBElement) {
            this.jaxbElementName = ((JAXBElement) parent).getName();
        }
    }

    public void accept(Visitor aVisitor) {
        aVisitor.visit(this);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof FileSystem) {
            final FileSystem copy = ((FileSystem) draftCopy);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.fragmentation!= null) {
                FileSystemFragmentation sourceFragmentation;
                sourceFragmentation = this.getFragmentation();
                FileSystemFragmentation copyFragmentation = ((FileSystemFragmentation) strategy.copy(LocatorUtils.property(locator, "fragmentation", sourceFragmentation), sourceFragmentation));
                copy.setFragmentation(copyFragmentation);
            } else {
                copy.fragmentation = null;
            }
            if (this.size!= null) {
                FileSystemSpace sourceSize;
                sourceSize = this.getSize();
                FileSystemSpace copySize = ((FileSystemSpace) strategy.copy(LocatorUtils.property(locator, "size", sourceSize), sourceSize));
                copy.setSize(copySize);
            } else {
                copy.size = null;
            }
            if (this.free!= null) {
                FileSystemSpace sourceFree;
                sourceFree = this.getFree();
                FileSystemSpace copyFree = ((FileSystemSpace) strategy.copy(LocatorUtils.property(locator, "free", sourceFree), sourceFree));
                copy.setFree(copyFree);
            } else {
                copy.free = null;
            }
            if (this.raidRef!= null) {
                Object sourceRAIDRef;
                sourceRAIDRef = this.getRAIDRef();
                Object copyRAIDRef = ((Object) strategy.copy(LocatorUtils.property(locator, "raidRef", sourceRAIDRef), sourceRAIDRef));
                copy.setRAIDRef(copyRAIDRef);
            } else {
                copy.raidRef = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new FileSystem();
    }

}
